import{_ as t,o as a,c as e,V as o}from"./chunks/framework.ff44d2fd.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"browser-principle/21-Chrome开发者工具：利用网络面板做性能分析.md","filePath":"browser-principle/21-Chrome开发者工具：利用网络面板做性能分析.md","lastUpdated":1712814842000}'),n={name:"browser-principle/21-Chrome开发者工具：利用网络面板做性能分析.md"},r=o('<h2 id="network项" tabindex="-1">Network项 <a class="header-anchor" href="#network项" aria-label="Permalink to &quot;Network项&quot;">​</a></h2><p>最下面有个**“下载信息概要”**：</p><p><img src="http://img.vim-cn.com/6a/fa55fdcb55135498587336a54ed10e37364db4.png" alt=""></p><ul><li>DOMContentLoaded，这个事件发生后，说明页面已经构建好 DOM 了，这意味着构建 DOM 所需要的 HTML 文件、JavaScript 文件、CSS 文件都已经下载完成了。</li><li>Load，说明浏览器已经加载了所有的资源（图像、样式表等）。</li></ul><p>一条请求的详细信息：</p><p><img src="https://img.vim-cn.com/e1/f651de68cf90148f3116196d121715edcfea75.png" alt=""></p><h3 id="时间线-timing" tabindex="-1">时间线 Timing <a class="header-anchor" href="#时间线-timing" aria-label="Permalink to &quot;时间线 Timing&quot;">​</a></h3><p>Timing时间线表示一个HTTP请求各个阶段的运行时间分布，如下图：</p><p><img src="https://static001.geekbang.org/resource/image/ba/af/ba91f06503bda4b4dc4a54901bd7a8af.png" alt=""></p><p>那面板中这各项到底是什么含义呢：</p><p><strong>第一个是 Queuing</strong>，也就是排队的意思，当浏览器发起一个请求的时候，会有很多原因导致该请求不能被立即执行，而是需要排队等待。导致请求处于排队状态的原因有很多。</p><ul><li>首先，页面中的资源是有优先级的，比如 CSS、HTML、JavaScript 等都是页面中的核心文件，所以优先级最高；而图片、视频、音频这类资源就不是核心资源，优先级就比较低。通常当后者遇到前者时，就需要“让路”，进入待排队状态。</li><li>其次，我们前面也提到过，浏览器会为每个域名最多维护 6 个 TCP 连接，如果发起一个 HTTP 请求时，这 6 个 TCP 连接都处于忙碌状态，那么这个请求就会处于排队状态。</li><li>最后，网络进程在为数据分配磁盘空间时，新的 HTTP 请求也需要短暂地等待磁盘分配结束。</li></ul><p>等待排队完成之后，就要进入发起连接的状态了。不过在发起连接之前，还有一些原因可能导致连接过程被推迟，这个推迟就表现在面板中的<strong>Stalled</strong>上，它表示停滞的意思。</p><blockquote><p>这里需要额外说明的是，如果你使用了代理服务器，还会增加一个<strong>Proxy Negotiation</strong>阶段，也就是代理协商阶段，它表示代理服务器连接协商所用的时间，不过在上图中没有体现出来，因为这里我们没有使用代理服务器。</p></blockquote><p>接下来，就到了<strong>Initial connection/SSL 阶段</strong>了，也就是和服务器建立连接的阶段，这包括了建立 TCP 连接所花费的时间；不过如果你使用了 HTTPS 协议，那么还需要一个额外的 SSL 握手时间，这个过程主要是用来协商一些加密信息的。</p><p>和服务器建立好连接之后，网络进程会准备请求数据，并将其发送给网络，这就是<strong>Request sent 阶段</strong>。通常这个阶段非常快，因为只需要把浏览器缓冲区的数据发送出去就结束了，并不需要判断服务器是否接收到了，所以这个时间通常不到 1 毫秒。</p><p>数据发送出去了，接下来就是等待接收服务器第一个字节的数据，这个阶段称为 Waiting (TTFB)，通常也称为“<strong>第一字节时间</strong>”。 TTFB 是反映服务端响应速度的重要指标，对服务器来说，TTFB 时间越短，就说明服务器响应越快。</p><p>接收到第一个字节之后，进入陆续接收完整数据的阶段，也就是<strong>Content Download 阶段</strong>，这意味着从第一字节时间到接收到全部响应数据所用的时间。</p><h3 id="优化时间线上耗时项" tabindex="-1">优化时间线上耗时项 <a class="header-anchor" href="#优化时间线上耗时项" aria-label="Permalink to &quot;优化时间线上耗时项&quot;">​</a></h3><p>了解了时间线面板上的各项含义之后，我们就可以根据这个请求的时间线来实现相关的优化操作了。</p><h4 id="排队-queuing-时间过久" tabindex="-1">排队（Queuing）时间过久 <a class="header-anchor" href="#排队-queuing-时间过久" aria-label="Permalink to &quot;排队（Queuing）时间过久&quot;">​</a></h4><p>排队时间过久，大概率是由浏览器为每个域名最多维护 6 个连接导致的。那么基于这个原因，你就可以让 1 个站点下面的资源放在多个域名下面，比如放到 3 个域名下面，这样就可以同时支持 18 个连接了，这种方案称为<strong>域名分片</strong>技术。除了域名分片技术外，我个人还建议你<strong>把站点升级到 HTTP2</strong>，因为 HTTP2 已经没有每个域名最多维护 6 个 TCP 连接的限制了。</p><h4 id="第一字节时间-ttfb-时间过久" tabindex="-1">第一字节时间（TTFB）时间过久 <a class="header-anchor" href="#第一字节时间-ttfb-时间过久" aria-label="Permalink to &quot;第一字节时间（TTFB）时间过久&quot;">​</a></h4><p>这可能的原因有如下：</p><ul><li><strong>服务器生成页面数据的时间过久</strong>。对于动态网页来说，服务器收到用户打开一个页面的请求时，首先要从数据库中读取该页面需要的数据，然后把这些数据传入到模板中，模板渲染后，再返回给用户。服务器在处理这个数据的过程中，可能某个环节会出问题。</li><li><strong>网络的原因</strong>。比如使用了低带宽的服务器，或者本来用的是电信的服务器，可联通的网络用户要来访问你的服务器，这样也会拖慢网速。</li><li><strong>发送请求头时带上了多余的用户信息</strong>。比如一些不必要的 Cookie 信息，服务器接收到这些 Cookie 信息之后可能需要对每一项都做处理，这样就加大了服务器的处理时长。</li></ul><p>对于这三种问题，你要有针对性地出一些解决方案。面对第一种服务器的问题，你可以想办法去提高服务器的处理速度，比如通过增加各种缓存的技术；针对第二种网络问题，你可以使用 CDN 来缓存一些静态文件；至于第三种，你在发送请求时就去尽可能地减少一些不必要的 Cookie 数据信息。</p><h4 id="content-download-时间过久" tabindex="-1">Content Download 时间过久 <a class="header-anchor" href="#content-download-时间过久" aria-label="Permalink to &quot;Content Download 时间过久&quot;">​</a></h4><p>如果单个请求的 Content Download 花费了大量时间，有可能是字节数太多的原因导致的。这时候你就需要减少文件大小，比如压缩、去掉源码中不必要的注释等方法。</p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p>分析一个12306 官网的性能瓶颈（比如<a href="https://www.12306.cn/index/" target="_blank" rel="noreferrer">https://www.12306.cn</a> ）。</p><p>我的答案：</p><ul><li>css未压缩</li><li>TTFB过长</li></ul>',32),i=[r];function l(s,p,c,d,h,g){return a(),e("div",null,i)}const T=t(n,[["render",l]]);export{u as __pageData,T as default};
