import{_ as s,o,c as a,U as e}from"./chunks/framework.5c992faa.js";const n="/fe-series-notes/assets/image_ch1d1tSVcj.219793da.png",l="/fe-series-notes/assets/1681393533878.694bef86.png",p="/fe-series-notes/assets/2023-04-13-21-57-49.73ad7485.png",g=JSON.parse('{"title":"Docker 从入门到实践","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/cicd/Docker从入门到实践.md","filePath":"engineer/cicd/Docker从入门到实践.md","lastUpdated":1689052576000}'),c={name:"engineer/cicd/Docker从入门到实践.md"},t=e('<h1 id="docker-从入门到实践" tabindex="-1">Docker 从入门到实践 <a class="header-anchor" href="#docker-从入门到实践" aria-label="Permalink to &quot;Docker 从入门到实践&quot;">​</a></h1><h2 id="docker-简介" tabindex="-1">Docker 简介 <a class="header-anchor" href="#docker-简介" aria-label="Permalink to &quot;Docker 简介&quot;">​</a></h2><h3 id="docker-是什么" tabindex="-1">Docker 是什么 <a class="header-anchor" href="#docker-是什么" aria-label="Permalink to &quot;Docker 是什么&quot;">​</a></h3><p>Docker 是一种开源的容器技术，它可以让开发者和运维人员更轻松地部署和管理应用程序。<strong>简单来说，Docker 将应用程序与该程序的依赖，打包在一个文件里面。运行这个文件，就会生成一个虚拟容器。程序在这个虚拟容器里运行，就好像在真实的物理机上运行一样。</strong></p><p>举个日常生活中的例子，假设你要搬家，你需要把所有的家具和物品都打包好，然后运到新家。在这个过程中，你需要确保所有的物品都能安全、完整地到达目的地。Docker 就像是给你提供了一个集装箱，你可以把所有的物品（应用程序及其依赖）都放进这个集装箱里，然后把集装箱运到新家（部署到服务器上）。这样，你就不用担心物品在运输过程中会丢失或损坏，而且在新家里，你可以很方便地把所有的物品都拿出来使用。</p><p>Docker 的主要优势在于它可以让你的应用程序在不同的环境中保持一致性，从而避免了“在我电脑上运行得好好的，为什么在服务器上就出问题了？”这样的问题。而且，Docker 还可以帮助你更高效地利用服务器资源，因为它比传统的虚拟机更轻量级，占用的资源更少。</p><h3 id="docker-vs-虚拟机" tabindex="-1">Docker vs 虚拟机 <a class="header-anchor" href="#docker-vs-虚拟机" aria-label="Permalink to &quot;Docker vs 虚拟机&quot;">​</a></h3><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。它可以在一种操作系统里面运行另一种操作系统，比如在 Windows 系统里面运行 Linux 系统。应用程序对此毫无感知，因为虚拟机看上去跟真实系统一模一样，而对于底层系统来说，虚拟机就是一个普通文件，不需要了就删掉，对其他部分毫无影响。</p><p>但是虚拟机有几个缺点：</p><ul><li><strong>资源占用多</strong>：虚拟机会独占一部分内存和硬盘空间。它运行的时候，其他程序就不能使用这些资源了。哪怕虚拟机里面的应用程序，真正使用的内存只有 1MB，虚拟机依然需要几百 MB 的内存才能运行。</li><li><strong>冗余步骤多</strong>：虚拟机是完整的操作系统，一些系统级别的操作步骤，往往无法跳过，比如用户登录。</li><li><strong>启动慢</strong>：启动操作系统需要多久，启动虚拟机就需要多久。可能要等几分钟，应用程序才能真正运行。</li></ul><p>由于虚拟机存在这些缺点，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。Linux 容器不是模拟一个完整的操作系统，而是<strong>对进程进行隔离</strong>。或者说，在正常进程的外面套了一个保护层。对于容器里面的进程来说，它接触到的各种资源都是虚拟的，从而实现与底层系统的隔离。</p><p>由于容器是进程级别的，相比虚拟机有很多优势。比如启动快，资源占用少，体积小。</p><p><strong>而 Docker 就属于 Linux 容器的一种封装</strong>，提供简单易用的容器使用接口。它是目前最流行的 Linux 容器解决方案。Docker 的接口相当简单，用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</p><p>参考文章：<a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" title="Docker 入门教程" target="_blank" rel="noreferrer">Docker 入门教程</a></p><h3 id="docker-使用场景" tabindex="-1">Docker 使用场景 <a class="header-anchor" href="#docker-使用场景" aria-label="Permalink to &quot;Docker 使用场景&quot;">​</a></h3><p>传统软件行业中存在的问题：</p><ul><li>开发、生产、测试环境不一致，开发环境下可用的服务挪到生产上不可用。</li><li>不同环境之间迁移成本太高，没有统一的软件部署封装标准及封装环境。</li><li>对于分布式软件持续集成（测试、打包、发布、部署、管理）周期很长，难以自动化、工程化。</li><li>面临瞬时用户流量增大的场景，很难实现分布式应用服务实例的快速部署。</li></ul><p>Docker 的主要用途，目前有三大类。</p><ol><li><strong>解决部署环境不一致的问题。</strong> 通常, 程序员开发的时候是在开发环境, 提测阶段部署到测试环境. 那么常常会遇到一个现象, 在开发环境运行的好好的, 怎么一部署到测试环境就有问题了呢? 开始各种排查, 最后发现, 可能是机器配置不一样, 导致 tomcat 启动超时等等。</li><li><strong>解决集群环境, 服务器繁多复杂的问题</strong>。如果使用集群部署的话，在一个集群里, 各种各样的软件, jdk, nginx, mysql, mongodb, redis......有很多. 以前运维老师是怎么干的? 搭建一个新的环境, 一台服务器一台服务器的安装. 像 mysql 还有配置环境, 一个服务器一个服务器的配置, 累的半死，而 docker 的实用场景之一就是一次部署, 到处使用。</li><li><strong>持续交付和部署。</strong> 对开发和运维（DevOps）人员来说，最希望的就是一次创建或配置，可以在任意地方正常运行。</li><li><strong>提供弹性的云服务。</strong> 因为 Docker 容器可以随开随关，很适合动态扩容和缩容。</li><li><strong>多租户环境</strong>：使用 Docker，可以为每一个租户的应用层的多个实例创建隔离的环境。</li><li><strong>更高效的利用计算机资源</strong>。docker 是内核级别的虚拟化, 可以在一个物理机上运行很多个容器实例, 服务器的性能可以被压榨到极致。通常, 一台主机只能同时运行 2-3 个虚拟机, 但是可以同时运行 20-30 个容器。</li></ol><h3 id="docker-历史背景" tabindex="-1">Docker 历史背景 <a class="header-anchor" href="#docker-历史背景" aria-label="Permalink to &quot;Docker 历史背景&quot;">​</a></h3><p>2008 年，Solomon Hykes 和他的朋友 Kamel Founadi、Sebastien Pahl 共同创立了一家名为 DotCloud 的公司，目标是利用一种叫做容器的技术来创建他们称作是“大规模的创新工具”：任何人都可以使用的编程工具。</p><p>2010 年，DotCloud 获得了创业孵化器 Y Combinator 的支持，并开始吸引到一些真正的投资，在接下来的 3 年中，dotCloud 内部孵化了一款名为 Docker 的产品。</p><p>Docker 刚诞生的时候, 并没有引起行业的注意, dotCloud 公司越来越难, 经济效益也不景气, 后来就要活不下去了, 他们有强烈的愿望, 希望能活下去. 于是, 想了一个办法, 将 docker 开源。2013 年 3 月 Docker 创始人 Solomon Hykes 在 PyCon 大会上的演讲中首次公开介绍了 Docker 这一产品。</p><p>在 2013 年 PyCon 大会之后，Docker 的 &quot;创新式镜像格式&quot; 以及 &quot;容器运行时&quot; 迅速成为社区、客户和更广泛行业的实际标准和基石。Docker 的强大之处在于它通过可移植的形式和易于使用的工具在应用程序和基础设施之间创造了独立性。其结果是，Docker 将容器技术大众化，并解决了困扰数百万开发人员的 &quot;matrix from hell&quot; 问题，使容器技术成为主流。</p><h3 id="docker-优缺点" tabindex="-1">Docker 优缺点 <a class="header-anchor" href="#docker-优缺点" aria-label="Permalink to &quot;Docker 优缺点&quot;">​</a></h3><p>优点</p><ul><li>更高效的利用系统资源</li><li>更快速的启动时间</li><li>一致的运行环境</li><li>更易于持续交付和部署(CI/CD)</li><li>更轻松的迁移</li><li>更轻松的维护和扩展</li></ul><h2 id="docker-核心组成" tabindex="-1">Docker 核心组成 <a class="header-anchor" href="#docker-核心组成" aria-label="Permalink to &quot;Docker 核心组成&quot;">​</a></h2><p>在 Docker 体系里，有四个对象是我们不得不进行介绍的，因为几乎所有 Docker 以及周边生态的功能，都是围绕着它们所展开的。它们分别是：</p><ul><li><strong>镜像 ( Image )</strong></li><li><strong>容器 ( Container )</strong></li><li><strong>网络 ( Network )</strong></li><li><strong>数据卷 ( Volume )</strong></li></ul><h3 id="镜像" tabindex="-1">镜像 <a class="header-anchor" href="#镜像" aria-label="Permalink to &quot;镜像&quot;">​</a></h3><p>Docker 是一个用于管理和运行软件应用的工具。<strong>在 Docker 中，镜像就像是一个软件应用的模板。它包含了运行一个应用所需要的所有文件，资源和设置等。</strong> 你可以把 Docker 镜像想象成一个已经打包好的盒子，里面有一份详细的说明书和所有需要的零件，让你能够轻松地组装和运行一个应用。这样，无论你在哪里使用这个镜像，都能保证应用的一致性和正确性。</p><p>Docker 的镜像与虚拟机中的镜像还是有一定区别的。首先，之前我们谈到了 Docker 中的一个创新是利用了 AUFS 作为底层文件系统实现，通过这种方式，Docker 实现了一种增量式的镜像结构。每次对镜像内容的修改，Docker 都会将这些修改铸造成一个镜像层，而一个镜像其实就是由其下层所有的镜像层所组成的。当然，每一个镜像层单独拿出来，与它之下的镜像层都可以组成一个镜像。由于这种结构，Docker 的镜像实质上是无法被修改的，因为所有对镜像的修改只会产生新的镜像，而不是更新原有的镜像。</p><h3 id="容器" tabindex="-1">容器 <a class="header-anchor" href="#容器" aria-label="Permalink to &quot;容器&quot;">​</a></h3><p><strong>Docker 中的容器可以看作是一个运行中的软件应用实例。</strong> 当你使用 Docker 镜像（就像一个软件应用的模板）创建一个容器时，它就像是从模板中复制出一个真正的应用，并开始运行它。容器包含了应用所需的所有文件、设置和环境，使得应用能够在不同的计算机和操作系统上一致地运行。</p><p>你可以把容器想象成一个运行在沙箱里的应用。沙箱是一个受限制的环境，可以确保应用不会影响到其他应用或系统。这样，你可以在同一台计算机上运行多个不同的容器，它们彼此之间互不干扰。</p><h3 id="网络" tabindex="-1">网络 <a class="header-anchor" href="#网络" aria-label="Permalink to &quot;网络&quot;">​</a></h3><p>在 Docker 中，实现了强大的网络功能，我们不但能够十分轻松的对每个容器的网络进行配置，还能在容器间建立虚拟网络，将数个容器包裹其中，同时与其他网络环境隔离。</p><p>另外，利用一些技术，Docker 能够在容器中营造独立的域名解析环境，这使得我们可以在不修改代码和配置的前提下直接迁移容器，Docker 会为我们完成新环境的网络适配。对于这个功能，我们甚至能够在不同的物理服务器间实现，让处在两台物理机上的两个 Docker 所提供的容器，加入到同一个虚拟网络中，形成完全屏蔽硬件的效果。</p><p><img src="'+n+`" alt=""></p><h3 id="数据卷" tabindex="-1">数据卷 <a class="header-anchor" href="#数据卷" aria-label="Permalink to &quot;数据卷&quot;">​</a></h3><p><strong>Docker 中的数据卷是一种用于在容器之间共享和持久化数据的方法。</strong> 你可以把它想象成一个可移动的存储盒子，这个盒子可以在不同的容器之间传递和共享数据。 当你运行一个 Docker 容器时，容器里的数据通常是暂时性的，这意味着当容器被删除时，其中的数据也会消失。而数据卷可以让你在容器之外存储和管理数据，这样即使容器被删除，数据依然可以保留下来。</p><p>数据卷还可以让你在多个容器之间共享数据。例如，你可以在一个容器中创建和修改数据，然后将数据卷连接到另一个容器，这样第二个容器就可以访问和使用这些数据了。这对于需要在不同容器之间共享配置文件、数据文件或其他资源的应用来说非常有用。</p><p>能够这么简单的实现挂载，主要还是得益于 Docker 底层的 Union File System 技术。在 UnionFS 的加持下，除了能够从宿主操作系统中挂载目录外，还能够建立独立的目录持久存放数据，或者在容器间共享。</p><p>在 Docker 中，通过这几种方式进行数据共享或持久化的文件或目录，我们都称为数据卷 ( Volume )。</p><h2 id="docker-的安装" tabindex="-1">Docker 的安装 <a class="header-anchor" href="#docker-的安装" aria-label="Permalink to &quot;Docker 的安装&quot;">​</a></h2><p>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版），企业版包含了一些收费服务，个人开发者一般用不到，我们用社区版就可以了。</p><blockquote><p>下面安装以 CentOS 为例：</p></blockquote><p>安装</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yum</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yum-utils</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">device-mapper-persistent-data</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lvm2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yum-config-manager</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--add-repo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://download.docker.com/linux/centos/docker-ce.repo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">yum</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker-ce</span></span></code></pre></div><p>启动 docker</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span></span></code></pre></div><p>为了实现 Docker 服务开机自启动，我们还可以运行这个命令：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">enable</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span></span></code></pre></div><p>测试 Docker 是否启动：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">version</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 或者 sudo docker info</span></span></code></pre></div><p>关闭 Docker：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">systemctl</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stop</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span></span></code></pre></div><p>如果提示：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">Warning: Stopping docker.service, but it can still be activated by:docker.socket</span></span></code></pre></div><p>这个警告通常表示，Docker 仍在通过 docker.socket 进程监听着你的系统，尽管 Docker 服务已被停止。这是因为 docker.socket 是一个用于 Docker 的 socket 实例，它可以让其他进程连接到 Docker 守护进程。当你启动 Docker Socket 后，即使 Docker 服务已经被关闭， docker.socket 仍然会保持激活状态。</p><p>如果你想完全停止 Docker，可以使用以下命令来禁用 docker.socket，这将停止 docker.socket 进程并阻止其他进程连接到 Docker 守护进程，从而确保 Docker 完全停止运行。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">sudo systemctl stop docker.socket</span></span></code></pre></div><p>删除镜像</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;"># 如果要强制删除正在运行的容器所使用的镜像，则需要加-f</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rmi</span><span style="color:#E1E4E8;"> [-f] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">IMAGE ID</span><span style="color:#F97583;">&gt;</span></span></code></pre></div><h3 id="配置国内镜像源" tabindex="-1">配置国内镜像源 <a class="header-anchor" href="#配置国内镜像源" aria-label="Permalink to &quot;配置国内镜像源&quot;">​</a></h3><p>编辑（新增）<code>/etc/docker/daemon.json</code>文件：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">&quot;registry-mirrors&quot;</span><span style="color:#79B8FF;">:</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">&quot;https://registry.docker-cn.com&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>重新启动 docker 来让配置生效。</p><p>然后通过 <code>docker info</code> 查看是否生效：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">## ......</span></span>
<span class="line"><span style="color:#B392F0;">Registry</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Mirrors:</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">https://registry.docker-cn.com/</span></span>
<span class="line"><span style="color:#6A737D;">## ......</span></span></code></pre></div><h2 id="docker-指令" tabindex="-1">Docker 指令 <a class="header-anchor" href="#docker-指令" aria-label="Permalink to &quot;Docker 指令&quot;">​</a></h2><h3 id="镜像仓库" tabindex="-1">镜像仓库 <a class="header-anchor" href="#镜像仓库" aria-label="Permalink to &quot;镜像仓库&quot;">​</a></h3><ul><li>官方镜像仓库</li></ul><p><a href="https://hub.docker.com/" title="Docker Hub" target="_blank" rel="noreferrer">Docker Hub</a> 是一个公共的 Docker 仓库，用户可以在其中搜索和共享 Docker 镜像。它提供了一个方便的方式来发现和使用 Docker 镜像，而不必担心安全性和管理。</p><ul><li>私有镜像仓库搭建：<a href="https://goharbor.io/" title="Harbor" target="_blank" rel="noreferrer">Harbor</a></li></ul><p>Harbor 是一个私有的 Docker 仓库，它允许用户在自己的环境中管理和部署 Docker 镜像。它提供了一个安全的仓库，用户可以使用它来存储和分发自己的 Docker 镜像。</p><h3 id="镜像指令" tabindex="-1">镜像指令 <a class="header-anchor" href="#镜像指令" aria-label="Permalink to &quot;镜像指令&quot;">​</a></h3><table><thead><tr><th>镜像指令</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><code>docker images</code></td><td>查看本地镜像列表</td><td></td></tr><tr><td><code>docker pull &lt;镜像名&gt;</code></td><td>获取镜像</td><td></td></tr><tr><td><code>docker search &lt;镜像名&gt;</code></td><td>搜索镜像</td><td></td></tr><tr><td><code>docker inspect &lt;镜像名&gt;</code></td><td>获取镜像更详细的信息</td><td></td></tr><tr><td><code>docker rmi &lt;镜像名&gt;</code></td><td>删除本地镜像</td><td></td></tr><tr><td><code>docker history &lt;镜像名&gt;</code></td><td>查看镜像的构建历史</td><td></td></tr></tbody></table><h3 id="容器指令" tabindex="-1">容器指令 <a class="header-anchor" href="#容器指令" aria-label="Permalink to &quot;容器指令&quot;">​</a></h3><table><thead><tr><th>容器指令</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td><code>docker create &lt;镜像名&gt; [--name &lt;容器名&gt;] </code></td><td>创建容器(指定了容器名)</td><td></td></tr><tr><td><code>docker start &lt;容器名&gt; </code></td><td>启动容器</td><td></td></tr><tr><td><code>docker run --name &lt;容器名&gt; -d &lt;镜像名&gt;</code></td><td>创建并启动容器</td><td>通过 <code>-d</code> 或 <code>--detach</code> 这个选项告诉 Docker 在启动后将程序与控制台分离，使其进入“后台”运行。</td></tr><tr><td><code>docker ps -a</code></td><td>查看容器状态</td><td><code>-a</code> 表示查看包括未运行的 docker 状态</td></tr><tr><td><code>docker stop &lt;容器名&gt;</code></td><td>停止容器</td><td>容器停止后，其维持的文件系统沙盒环境还是存在的，内部被修改的内容也都会保留，我们可以通过 docker start 命令将这个容器再次启动。</td></tr><tr><td><code>docker rm &lt;容器名&gt;</code></td><td>删除容器</td><td></td></tr><tr><td><code>sudo docker exec -it &lt;容器名&gt; bash</code></td><td>进入容器运行指令</td><td>在借助 <code>docker exec</code> 进入容器的时候，我们需要特别注意命令中的两个选项不可或缺，即 <code>-i</code> 和 <code>-t</code> ( 它们俩可以利用简写机制合并成 <code>-it</code> )。 其中 <code>-i</code> ( <code>--interactive</code> ) 表示保持我们的输入流，只有使用它才能保证控制台程序能够正确识别我们的命令。而 <code>-t</code> ( <code>--tty</code> ) 表示启用一个伪终端，形成我们与 bash 的交互，如果没有它，我们无法看到 bash 内部的执行结果。</td></tr></tbody></table><h3 id="dockerfile" tabindex="-1">Dockerfile <a class="header-anchor" href="#dockerfile" aria-label="Permalink to &quot;Dockerfile&quot;">​</a></h3><p>Dockerfile 是一个文本文件，它包含了一系列<strong>用于创建 Docker 镜像的指令。</strong> 通过这些指令，你可以定义应用程序的运行环境、安装所需的依赖、配置系统设置等。Dockerfile 的主要目的是让你能够自动化地创建和配置 Docker 镜像，从而确保应用程序在不同环境中的一致性。</p><p>举个日常生活中的例子，假设你要为一个聚会准备食物，你可能需要提前写一个菜单（Dockerfile），列出你打算做的菜肴以及每道菜所需的食材和烹饪步骤。这样，在聚会当天，你就可以按照菜单上的指示来准备食物，确保每道菜都能按照你的预期来制作。</p><p>在 Dockerfile 中，你需要使用一些特定的指令，例如：</p><ol><li><code>FROM</code>：指定基础镜像。这是构建新镜像的起点，通常是一个已经存在的镜像，例如：<code>FROM ubuntu:18.04</code>。</li><li><code>RUN</code>：执行命令。在镜像中安装软件或执行其他命令，例如：<code>RUN apt-get update &amp;&amp; apt-get install -y curl</code>。</li><li><code>COPY</code>：复制文件。从构建上下文（通常是与 Dockerfile 同一目录的文件）复制文件或目录到镜像中，例如：<code>COPY . /app</code>。</li><li><code>ADD</code>：添加文件。与 <code>COPY</code> 类似，但它还可以解压压缩文件，例如：<code>ADD app.tar.gz /app</code>。</li><li><code>WORKDIR</code>：设置工作目录。指定后续指令（如 <code>RUN</code>, <code>CMD</code>, <code>ENTRYPOINT</code> 等）的工作目录，例如：<code>WORKDIR /app</code>。</li><li><code>ENV</code>：设置环境变量。在镜像中定义环境变量，例如：<code>ENV NODE_ENV=production</code>。</li><li><code>EXPOSE</code>：暴露端口。告诉 Docker 该镜像将在指定端口上运行，例如：<code>EXPOSE 80</code>。</li><li><code>CMD</code>：指定容器启动时要运行的命令。如果没有提供命令，将使用基础镜像的默认命令，例如：<code>CMD [&quot;npm&quot;, &quot;start&quot;]</code>。</li><li><code>ENTRYPOINT</code>：指定容器启动时要运行的可执行文件。与 <code>CMD</code> 类似，但它允许在启动容器时提供参数，例如：<code>ENTRYPOINT [&quot;npm&quot;]</code>。</li></ol><p>当你编写好 Dockerfile 后，可以使用 <code>docker build</code>命令根据 Dockerfile 创建 Docker 镜像。</p><p><strong>根据 Dockerfile 构建镜像</strong></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">your_image_name:your_tag</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./webapp/a.Dockerfile</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">./webapp</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># -t 指定镜像名</span></span>
<span class="line"><span style="color:#6A737D;"># -f 指定dockerfile路径</span></span>
<span class="line"><span style="color:#6A737D;"># 最后的路径表示</span></span></code></pre></div><p>以下是一个完整的 <code>docker build</code> 指令示例：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_app:1.0</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-f</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Dockerfile.custom</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--build-arg</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">API_KEY=</span><span style="color:#79B8FF;">12345</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--no-cache</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rm=true</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span></code></pre></div><p>现在，让我们逐个解释这个指令中的每个部分：</p><ol><li><code>docker build</code>：这是 Docker 的基本命令，用于根据 Dockerfile 构建镜像。</li><li><code>-t my_app:1.0</code>：<code>-t</code> 选项用于为构建的镜像指定名称（<code>my_app</code>）和标签（<code>1.0</code>）。名称和标签用冒号分隔。</li><li><code>-f Dockerfile.custom</code>：<code>-f</code> 选项用于指定要用于构建过程的 Dockerfile。在这个例子中，我们使用名为 Dockerfile.custom 的文件。如果省略此选项，Docker 默认会在当前目录中查找名为 Dockerfile 的文件。</li><li><code>--build-arg API_KEY=12345</code>：<code>--build-arg</code> 选项用于设置构建时的变量。在这个例子中，我们设置了一个名为 API_KEY 的变量，其值为 12345。这些变量可以在 Dockerfile 的 ARG 指令中使用。</li><li><code>--no-cache</code>：此选项告诉 Docker 在构建过程中不使用缓存。这意味着 Docker 将重新执行 Dockerfile 中的所有指令，即使它们之前已经执行过。这有助于确保镜像包含最新的依赖项和更新。</li><li><code>--rm=true</code>：此选项告诉 Docker 在构建完成后删除所有中间容器。这有助于减少磁盘空间占用。默认情况下，此选项为 true，因此可以省略。</li><li><code>.</code>：最后，这个点表示 Docker 构建上下文的路径，通常是 Dockerfile 所在的路径。构建上下文包含了 Dockerfile 以及与之相关的所有文件和目录，这些文件和目录可能会在构建过程中被复制到镜像中。（请注意，这里的 <code>.</code> 并不表示生成的镜像所在的路径。生成的镜像会被存储在 Docker 镜像仓库中，而不是在本地文件系统的某个特定目录）</li></ol><div class="info custom-block"><p class="custom-block-title">什么是 Docker 构建上下文的路径？能否举个例子说明？</p><p>当然可以。Docker 构建上下文是指包含 Dockerfile 及其相关文件和目录的文件系统路径。在构建 Docker 镜像时，Docker 需要访问这些文件和目录，以便在镜像中复制文件、安装依赖项等。构建上下文就是将这些文件和目录打包到一起的一个概念。 举个例子，假设您有一个项目，目录结构如下：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">my_project/</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Dockerfile</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">app/</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">index.js</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">package.json</span></span>
<span class="line"><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">|</span><span style="color:#B392F0;">--</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">config.json</span></span></code></pre></div><p>在这个例子中，<code>my_project</code> 目录包含 Dockerfile、一个名为 <code>app</code> 的应用程序目录和一个名为 <code>config</code> 的配置目录。要构建一个 Docker 镜像，您需要将这些文件和目录作为构建上下文提供给 Docker。</p><p>在这种情况下，构建上下文的路径就是 <code>my_project</code> 目录。要构建镜像，您需要在终端中切换到 <code>my_project</code> 目录，然后运行 <code>docker build</code> 命令。例如：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_project</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my_image:latest</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span></code></pre></div><p>在这个 <code>docker build</code> 命令中，最后的 <code>.</code> 表示当前目录，即 <code>my_project</code> 目录。这告诉 Docker 使用 <code>my_project</code> 目录作为构建上下文，从中获取 Dockerfile 及其相关文件和目录。</p><p>简而言之，Docker 构建上下文的路径是包含 Dockerfile 和与之相关的所有文件和目录的文件系统路径。在构建镜像时，Docker 需要知道这个路径，以便正确访问和处理这些文件和目录。</p></div><p><strong>运行镜像（生成容器）</strong></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">容器</span><span style="color:#E1E4E8;">名</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">镜像</span><span style="color:#E1E4E8;">名</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">{local_port:image_port}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># --name : 容器运行时的名称，名称在当前机器上面是唯一的；</span></span>
<span class="line"><span style="color:#6A737D;"># -p : 本机的端口与容器端口的映射关系；</span></span>
<span class="line"><span style="color:#6A737D;"># -d : 容器在后台运行，并输出容器 ID；</span></span>
<span class="line"><span style="color:#6A737D;"># image_name:image_tag: 镜像tag，一般是完整的镜像 URL；</span></span></code></pre></div><h2 id="使用-docker-部署项目" tabindex="-1">使用 Docker 部署项目 <a class="header-anchor" href="#使用-docker-部署项目" aria-label="Permalink to &quot;使用 Docker 部署项目&quot;">​</a></h2><h3 id="demo-部署示例" tabindex="-1">Demo 部署示例 <a class="header-anchor" href="#demo-部署示例" aria-label="Permalink to &quot;Demo 部署示例&quot;">​</a></h3><p>当我们完成代码开发工作之后，该如何使用 <code>Docker</code> 来完成部署服务呢？</p><p>大体分为 3 步：</p><ol><li>编写 <code>Dockfile</code> 文件</li><li>通过 <code>Dockerfile</code> 文件构建镜像</li><li>运行镜像生成容器即可。</li></ol><p>我们以 nodejs 服务为例：</p><p>通过 <code>nodeJS</code> 的 <code>http</code> 模块监听 <code>8110</code> 端口，当我们访问 <code>http:localhost:8110</code>时， 就会输出“Hello World”。</p><p>1、准备代码文件 <code>server.js</code></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">http</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;http&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">http</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">createServer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">request</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 发送 HTTP 头部</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// HTTP 状态值: 200 : OK</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 内容类型: text/plain</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">writeHead</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, { </span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;text/plain&quot;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 发送响应数据 &quot;Hello World&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello World&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">8110</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 终端打印如下信息</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Server running at http://127.0.0.1:8110/&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>2、编写 Dockerfile</p><div class="language-docker"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;"># 选择基础镜像</span></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> node:16.19-slim</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设定服务工作路径</span></span>
<span class="line"><span style="color:#F97583;">WORKDIR</span><span style="color:#E1E4E8;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 从当前路径拷贝到容器中的 /app/ 目录下</span></span>
<span class="line"><span style="color:#F97583;">ADD</span><span style="color:#E1E4E8;"> server.js /app/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 指定容器监听端口</span></span>
<span class="line"><span style="color:#F97583;">EXPOSE</span><span style="color:#E1E4E8;"> 8110</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 在容器运行时执行</span></span>
<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;node&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;server.js&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre></div><p>3、构建镜像</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker-test:v0.0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 生成的镜像为docker-test:v0.0.1</span></span></code></pre></div><p>4、运行镜像（生成容器）</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker-test:v0.0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8080</span><span style="color:#9ECBFF;">:8110</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker-test-con</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 生成的容器为docker-test-con</span></span></code></pre></div><p>5、然后访问 <a href="http://127.0.0.1:8110/" title="http://127.0.0.1:8080/" target="_blank" rel="noreferrer">http://127.0.0.1:8080/</a> 即可看到界面出现“hello world”。</p><h3 id="vue-项目部署实战" tabindex="-1">Vue 项目部署实战 <a class="header-anchor" href="#vue-项目部署实战" aria-label="Permalink to &quot;Vue 项目部署实战&quot;">​</a></h3><p>下面是使用 Docker 和 Nginx 部署 Vue.js 前端项目的一步一步详细说明：</p><p><strong>1、构建前端项目</strong></p><p>首先，您需要构建 Vue.js 项目。假设您已经有了一个 Vue.js 应用程序，并且使用 <code>npm run build</code> 命令将其构建到 <code>dist/</code> 目录中。</p><p><strong>2、创建 Nginx 配置文件</strong></p><p>在前端项目的根目录中创建一个名为 <code>nginx.conf</code> 的文件，并添加以下内容：</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">worker_processes </span><span style="color:#E1E4E8;">1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">events</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;"> worker_connections </span><span style="color:#E1E4E8;">1024;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">http</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;"> include </span><span style="color:#E1E4E8;">mime.types;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">server</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;"> listen </span><span style="color:#E1E4E8;">80;</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;"> server_name </span><span style="color:#E1E4E8;">localhost;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 静态文件目录</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;"> root </span><span style="color:#E1E4E8;">/usr/share/nginx/html;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;"> index </span><span style="color:#E1E4E8;">index.html;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">location</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">/ </span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># 支持history路由模式</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;"> try_files </span><span style="color:#E1E4E8;">$uri $uri/ /index.html;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上述配置文件中定义了 Nginx 的基本配置，包括监听 80 端口、静态文件目录和路由配置。</p><p><strong>3、创建 Dockerfile</strong></p><p>在前端项目的根目录中创建一个名为 <code>Dockerfile</code> 的文件，并添加以下内容：</p><div class="language-docker"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;"># 使用 Node.js 12 作为基础镜像</span></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> node:16.18.1 </span><span style="color:#F97583;">AS</span><span style="color:#E1E4E8;"> builder</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将工作目录设置为 /app</span></span>
<span class="line"><span style="color:#F97583;">WORKDIR</span><span style="color:#E1E4E8;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将 package.json 和 package-lock.json 复制到镜像中</span></span>
<span class="line"><span style="color:#F97583;">COPY</span><span style="color:#E1E4E8;"> package*.json ./</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 安装依赖</span></span>
<span class="line"><span style="color:#F97583;">RUN</span><span style="color:#E1E4E8;"> npm install</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将整个应用程序复制到镜像中</span></span>
<span class="line"><span style="color:#F97583;">COPY</span><span style="color:#E1E4E8;"> . .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 构建应用程序</span></span>
<span class="line"><span style="color:#F97583;">RUN</span><span style="color:#E1E4E8;"> npm run build-only</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 使用 Nginx 作为基础镜像</span></span>
<span class="line"><span style="color:#F97583;">FROM</span><span style="color:#E1E4E8;"> nginx:latest</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将 Nginx 配置文件复制到镜像中</span></span>
<span class="line"><span style="color:#F97583;">COPY</span><span style="color:#E1E4E8;"> nginx.conf /etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 将构建好的应用程序复制到 Nginx 的默认站点目录中</span></span>
<span class="line"><span style="color:#F97583;">COPY</span><span style="color:#E1E4E8;"> --from=builder /app/dist /usr/share/nginx/html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 暴露 80 端口</span></span>
<span class="line"><span style="color:#F97583;">EXPOSE</span><span style="color:#E1E4E8;"> 80</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 启动 Nginx 服务</span></span>
<span class="line"><span style="color:#F97583;">CMD</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;nginx&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-g&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;daemon off;&quot;</span><span style="color:#E1E4E8;">]</span></span></code></pre></div><p>上述 Dockerfile 包含两个阶段：</p><ul><li>第一个阶段使用 Node.js 12 作为基础镜像，并将 Vue.js 项目的源代码复制到镜像中。然后，安装依赖并构建应用程序。</li><li>第二个阶段使用 Nginx 作为基础镜像，并将构建好的应用程序复制到 Nginx 的默认站点目录中。然后，将 Nginx 配置文件复制到镜像中，并暴露 80 端口并启动 Nginx 服务。</li></ul><div class="info custom-block"><p class="custom-block-title">💡 关于路径</p><p>All paths in a Dockerfile, except the first half of COPY and ADD instructions, refer to image filesystem paths。</p><p>Dockerfile 中的所有路径，除了 <code>COPY</code>和 <code>ADD</code>指令的前半部分，都是指镜像文件系统路径。</p></div><div class="info custom-block"><p class="custom-block-title">💡 关于 <code>daemon off</code>补充说明</p><p>对于正常生产（在服务器上），使用默认的 <code>daemon on;</code> 指令，以便 Nginx 服务器将在后台启动。 Nginx 和其他服务以这种方式运行并相互通信。一台服务器运行许多服务。 对于 Docker 容器（或调试）， <code>daemon off;</code> 指令告诉 Nginx 留在前台。对于容器，这很有用，因为最佳实践是一个容器 = 一个进程。一台服务器（容器）只有一项服务。</p></div><p><strong>4、构建 Docker 镜像</strong></p><p>在前端项目的根目录中，使用以下命令构建 Docker 镜像：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-t</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my-vue-app</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">.</span></span></code></pre></div><p>这将使用名为 <code>my-vue-app</code> 的标签构建 Docker 镜像。请注意，最后的 <code>.</code> 表示 Dockerfile 位于当前目录。</p><p><strong>5、运行 Docker</strong></p><p>使用以下命令运行 Docker 镜像：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my-vue-app-con</span><span style="color:#E1E4E8;"> [-d] -p 8080:80 my-vue-app</span></span></code></pre></div><p>这将启动 Docker 容器，并将容器内的 80 端口映射到主机上的 8080 端口。因此，您可以通过 <code>http://localhost:8080</code> 访问应用程序，并应该看到您的 Vue.js 应用程序已经成功部署。</p><h2 id="可视化-docker-管理" tabindex="-1">可视化 Docker 管理 <a class="header-anchor" href="#可视化-docker-管理" aria-label="Permalink to &quot;可视化 Docker 管理&quot;">​</a></h2><p><a href="https://podman-desktop.io/" title="Podman Desktop" target="_blank" rel="noreferrer">Podman Desktop</a>：一个跨平台桌面应用，可以使用图形界面进行 Docker 容器管理。</p><h2 id="docker-compose" tabindex="-1">Docker Compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;Docker Compose&quot;">​</a></h2><p>Docker Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。</p><p>通过使用 Docker Compose，您不需要使用 shell 脚本来启动容器，可以使用 YAML 文件来配置应用程序的服务、网络和卷。然后，通过一个简单的命令，您可以创建并启动所有配置中定义的服务。</p><p>我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p>Docker Compose 的主要作用包括：</p><ol><li>简化多容器应用程序的部署和管理：通过使用单个 YAML 文件，您可以定义整个应用程序的结构，包括服务、网络和存储卷。这使得部署和管理多容器应用程序变得更加简单和高效。</li><li>提高开发和测试的效率：Docker Compose 允许您在本地环境中轻松启动、停止和重建服务，从而加快开发和测试过程。</li><li>便于团队协作：通过共享 Docker Compose 文件，团队成员可以轻松地在各自的环境中运行相同的多容器应用程序，确保一致性和避免“在我机器上可以运行”的问题。</li></ol><h3 id="docker-compose-安装和使用" tabindex="-1">Docker Compose 安装和使用 <a class="header-anchor" href="#docker-compose-安装和使用" aria-label="Permalink to &quot;Docker Compose 安装和使用&quot;">​</a></h3><p><code>Compose</code> 支持 Linux、macOS、Windows 10 三大平台。</p><p>Window 安装</p><p><code>Docker Desktop for Mac/Windows</code> 自带 <code>docker-compose</code> 二进制文件，安装 Docker 之后可以直接使用。</p><p>Linux 安装</p><p>直接从 <a href="https://github.com/docker/compose/releases" target="_blank" rel="noreferrer">官方 GitHub Release</a> 处直接下载编译好的二进制文件即可。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">curl</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-L</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/docker/compose/releases/download/v2.17.1/docker-compose-\`</span><span style="color:#B392F0;">uname</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">-</span><span style="color:#9ECBFF;">\`</span><span style="color:#B392F0;">uname</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">-m</span><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">/usr/local/bin/docker-compose</span></span>
<span class="line"><span style="color:#6A737D;"># 或者另一种写法：sudo curl -L &quot;https://github.com/docker/compose/releases/download/v2.17.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 国内用户可以使用以下方式加快下载</span></span>
<span class="line"><span style="color:#6A737D;"># $ sudo curl -L https://get.daocloud.io/docker/compose/releases/download/v2.17.1/docker-compose-\`uname -s\`-\`uname -m\` &gt; /usr/local/bin/docker-compose</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 设置文件执行权限</span></span>
<span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">chmod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">+x</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/local/bin/docker-compose</span></span></code></pre></div><p>检测是否安装成功</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">docker-compose</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--version</span></span></code></pre></div><p>卸载</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/usr/local/bin/docker-compose</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如何安装不了，参考：<a href="https://www.cnblogs.com/goloving/p/16253880.html" target="_blank" rel="noreferrer">浅析 docker-compose 安装及解决遇到的问题</a></p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>PS：我在 linux 虚拟机测试，最新的 <code>v2.17.2</code>，在安装后执行 <code>docker-compose --version</code>，可能会报错：<code>Segmentation fault</code>。然后又试了 <code>v2.13.0</code>，是可以的。</p></div><h3 id="yml-模板文件" tabindex="-1">yml 模板文件 <a class="header-anchor" href="#yml-模板文件" aria-label="Permalink to &quot;yml 模板文件&quot;">​</a></h3><p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p><p>简单示例：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">webapp</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">examples/web</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;8080:80&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;/data&quot;</span></span></code></pre></div><blockquote><p>注意每个服务都必须通过 image 指令指定镜像或 build 指令（需要 Dockerfile）等来自动构建生成镜像。</p></blockquote><p>参数说明：</p><ul><li><code>image</code>: 指定为镜像名称或镜像 ID。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。</li><li><code>build</code>：指定 Dockerfile 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 Compose 将会利用它自动构建这个镜像，然后使用这个镜像。更多用法参考：<a href="https://yeasy.gitbook.io/docker_practice/compose/compose_file#build" target="_blank" rel="noreferrer">https://yeasy.gitbook.io/docker_practice/compose/compose_file#build</a></li><li><code>ports</code>：暴露端口信息。使用 <code>宿主端口：容器端口 (HOST:CONTAINER)</code> 格式</li><li><code>container_name</code>: 指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</li><li><code>volumes</code>: 数据卷所挂载路径设置。可以设置为 <code>宿主机路径(HOST:CONTAINER)</code>或者 <code>数据卷名称(VOLUME:CONTAINER)</code>。如果路径为数据卷名称，必须在文件中配置数据卷。</li><li><code>restart</code>: 指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 always 或者 unless-stopped。</li></ul><p>更多参数：<a href="https://yeasy.gitbook.io/docker_practice/compose/compose_file" target="_blank" rel="noreferrer">https://yeasy.gitbook.io/docker_practice/compose/compose_file</a></p><p><strong>读取变量</strong></p><p>Compose 模板文件支持动态读取主机的系统环境变量和当前目录下的 <code>.env</code> 文件中的变量。</p><p>例如，下面的 Compose 文件将从运行它的环境中读取变量 <code>\${MONGO_VERSION}</code> 的值，并写入执行的指令中。</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">db</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">image</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;mongo:\${MONGO_VERSION}&quot;</span></span></code></pre></div><h3 id="命令说明" tabindex="-1">命令说明 <a class="header-anchor" href="#命令说明" aria-label="Permalink to &quot;命令说明&quot;">​</a></h3><p><code>docker-compose</code> 命令的基本的使用格式是：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">docker-compose</span><span style="color:#E1E4E8;"> [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span></span></code></pre></div><ul><li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li><li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li><li><code>--verbose</code> 输出更多调试信息。</li><li><code>-v, --version</code> 打印版本并退出。</li></ul><p>COMMAND</p><blockquote><p>参考：<a href="https://yeasy.gitbook.io/docker_practice/compose/commands" target="_blank" rel="noreferrer">https://yeasy.gitbook.io/docker_practice/compose/commands</a></p></blockquote><ul><li><code>build</code>：构建（重新构建）项目中的服务容器。</li><li><code>up</code>：该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。 <ul><li><code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</li><li>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建。</li></ul></li><li><code>down</code>：停止 up 命令所启动的容器，并移除网络。</li><li><code>stop</code>：停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</li><li><code>rm</code>：删除所有（停止状态的）服务容器。</li><li><code>ps</code>：列出项目中目前的所有容器。</li><li><code>pull</code>：拉取服务依赖的镜像。</li></ul><p>参考文档：</p><ul><li><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="noreferrer">https://github.com/yeasy/docker_practice</a></li><li><a href="https://www.cnblogs.com/crazymakercircle/p/15505199.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/crazymakercircle/p/15505199.html</a></li></ul><h3 id="vue-项目部署实战-docker-compose-版" tabindex="-1">Vue 项目部署实战-docker compose 版 <a class="header-anchor" href="#vue-项目部署实战-docker-compose-版" aria-label="Permalink to &quot;Vue 项目部署实战-docker compose 版&quot;">​</a></h3><p>项目背景为<a href="#vue-项目部署实战">Vue 项目部署实战</a></p><p>项目中已经包含了 nginx.conf 和 Dockerfile 文件。</p><p>下面是一个基本的 <code>docker-compose.yml</code> 文件，用于部署您的 Vue 项目：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;3&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 指定了docker-compose文件的版本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#85E89D;">services</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">app</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">build</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">context</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">.</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">dockerfile</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">Dockerfile</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">ports</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">&quot;8081:80&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">volumes</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      - </span><span style="color:#9ECBFF;">./nginx.conf:/etc/nginx/nginx.conf:ro</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">restart</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">always</span></span></code></pre></div><p>我们定义一个名为“app”的服务。它包含以下几个子项：</p><ul><li><code>app</code>: 生成 docker 镜像名称为<code>项目名称_app</code></li><li><code>build</code>: 它指定了如何构建 Docker 镜像。在这个例子中，我们使用当前目录作为构建上下文，使用 Dockerfile 文件进行构建。</li><li><code>ports</code>: 它指定了容器的端口映射。在这个例子中，我们将容器的 80 端口映射到主机的 8080 端口上。</li><li><code>volumes</code>: 它指定了容器与主机之间的文件映射。在这个例子中，我们将主机的 <code>nginx.conf</code>文件挂载到容器的 <code>/etc/nginx/nginx.conf</code>路径上，并设置为只读模式。这样我们可以在不重新构建容器的情况下更改 Nginx 配置。</li><li><code>restart</code>: 它指定了容器的重启策略。在这个例子中，我们指定了容器始终重启。</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在上面的 Dockerfile 中，已经包含了使用 Nginx 作为基础镜像，并将构建好的应用程序复制到 Nginx 的默认站点目录中。因此，在 docker-compose.yml 中，您不需要再单独定义一个 nginx 服务。</p></div><p><strong>启动服务</strong></p><p>将 docker-compose.yml 文件放在 Vue 项目根目录中，然后执行 <code>docker-compose up -d</code>命令。</p><p>Docker 会按照 docker-compose.yml 文件中的定义，启动一个新的 Docker 容器并在后台运行。</p><p>具体的执行步骤如下：</p><ul><li>如果当前目录下不存在与 docker-compose.yml 文件同名的 Docker 容器，Docker 会先构建一个新的 Docker 镜像。该镜像是基于 Dockerfile 文件构建的，其中包含了 Vue 项目的应用程序和 Nginx 服务器。</li><li>Docker 会根据 docker-compose.yml 文件的定义，将容器的 80 端口映射到主机的 8080 端口上，这样我们可以通过浏览器访问应用程序。</li><li>Docker 会将主机上的 nginx.conf 文件挂载到容器内的/etc/nginx/nginx.conf 路径上，这样我们可以在不重新构建容器的情况下更改 Nginx 配置。</li><li>最后，Docker 会启动一个新的容器，并将其设置为在后台运行。</li></ul><p><img src="`+l+'" alt="1681393533878"></p><p>可以看到已经执行成功，然后使用<code>docker ps</code>看一下容器已经执行了：</p><p><img src="'+p+'" alt=""></p><p>然后打开 <code>http://localhost:8081</code> ，发现已经可以正常访问了。</p><p>如果您需要停止服务，可以运行 <code>docker-compose down</code>。</p><h2 id="相关文章" tabindex="-1">相关文章 <a class="header-anchor" href="#相关文章" aria-label="Permalink to &quot;相关文章&quot;">​</a></h2><ul><li><a href="https://mp.weixin.qq.com/s/v9kznJ1OezUxA49-nd_r_Q" target="_blank" rel="noreferrer">掌握这 5 个技巧，让你的 Dockerfile 像个大师！</a></li></ul><h2 id="进阶学习资料" tabindex="-1">进阶学习资料 <a class="header-anchor" href="#进阶学习资料" aria-label="Permalink to &quot;进阶学习资料&quot;">​</a></h2><ul><li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" title="Docker 入门教程-阮一峰" target="_blank" rel="noreferrer">Docker 入门教程-阮一峰</a></li><li><a href="https://jspang.com/article/75" title="跟胖哥一起学Docker" target="_blank" rel="noreferrer">跟胖哥一起学 Docker</a></li><li><a href="https://cavalheiro.cn/frontend/Docker_build_Nginx.html" target="_blank" rel="noreferrer">https://cavalheiro.cn/frontend/Docker_build_Nginx.html</a></li><li><a href="https://juejin.cn/book/6844733746462064654" target="_blank" rel="noreferrer">开发者必备的 Docker 实践指南</a></li><li><a href="https://yeasy.gitbook.io/docker_practice/" target="_blank" rel="noreferrer">Docker — 从入门到实践</a></li></ul>',200),r=[t];function i(d,E,y,k,u,h){return o(),a("div",null,r)}const b=s(c,[["render",i]]);export{g as __pageData,b as default};
