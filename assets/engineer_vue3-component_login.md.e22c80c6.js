import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ff44d2fd.js";const d=JSON.parse('{"title":"登录注册","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/vue3-component/login.md","filePath":"engineer/vue3-component/login.md","lastUpdated":1689052576000}'),o={name:"engineer/vue3-component/login.md"},p=l(`<h1 id="登录注册" tabindex="-1">登录注册 <a class="header-anchor" href="#登录注册" aria-label="Permalink to &quot;登录注册&quot;">​</a></h1><p>目的：只有登录的用户才可以进入页面。</p><blockquote><p>如何判断用户是否已登录？</p></blockquote><p>答：每次用户登录后，都会把 token 保存在 locakStorage 中，然后设置<code>router.beforeEach</code>在进入某个页面时，检查本地 token 是否存在，不存在就跳转到登录页面。</p><h2 id="用户登录" tabindex="-1">用户登录 <a class="header-anchor" href="#用户登录" aria-label="Permalink to &quot;用户登录&quot;">​</a></h2><p>当用户点击登录按钮的时候，</p><ol><li>首先校验表单;</li><li>调用 stores 中的登录方法.</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useAppStore } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/stores&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">appStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useAppStore</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 登录</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleLogin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> formRef.value?.</span><span style="color:#B392F0;">validate</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    submitLoading.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> appStore.</span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(formData.value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    window.$message.</span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;登录成功&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 失败的话，需要输入验证码</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">loadCaptcha</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    submitLoading.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>验证码功能需要后端生成，而不应该是前端生成。 参考：<a href="https://v2ex.com/t/729665" target="_blank" rel="noreferrer">https://v2ex.com/t/729665</a></p></div><p>在 stores 中登录会调用登录接口，登陆完后：</p><ol><li>设置请求 header，每次都携带 token 信息</li><li>获取个人信息，存储在 store（此时也可以获取菜单 menuList）</li><li>跳转到首页。</li></ol><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// stores中的登录</span></span>
<span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(data) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">token</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> window.$apis.common.</span><span style="color:#B392F0;">login</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.token </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> token;</span></span>
<span class="line"><span style="color:#E1E4E8;">  localMng.</span><span style="color:#B392F0;">setItem</span><span style="color:#E1E4E8;">(TokenName, token);</span></span>
<span class="line"><span style="color:#E1E4E8;">  request.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    Authorization: token,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getUserInfo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  router.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/home&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre></div><h2 id="用户退出" tabindex="-1">用户退出 <a class="header-anchor" href="#用户退出" aria-label="Permalink to &quot;用户退出&quot;">​</a></h2><p>在用户退出后，需要清理 session，清除 token，清除请求头，然后还原 store。</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">//  退出</span></span>
<span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">logout</span><span style="color:#E1E4E8;">(isRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (isRequest) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> window.$apis.common.</span><span style="color:#B392F0;">logout</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;logout&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  router.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/login&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  sessionMng.</span><span style="color:#B392F0;">clear</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  localMng.</span><span style="color:#B392F0;">removeItem</span><span style="color:#E1E4E8;">(TokenName);</span></span>
<span class="line"><span style="color:#E1E4E8;">  request.</span><span style="color:#B392F0;">setHeader</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    Authorization: </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 还原store</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$reset</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre></div>`,15),e=[p];function t(E,c,r,y,i,F){return n(),a("div",null,e)}const h=s(o,[["render",t]]);export{d as __pageData,h as default};
