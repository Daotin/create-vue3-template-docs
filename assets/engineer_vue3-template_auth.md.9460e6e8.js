import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ff44d2fd.js";const p="/fe-series-notes/assets/auth-1.c6856dd4.png",h=JSON.parse('{"title":"权限控制","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/vue3-template/auth.md","filePath":"engineer/vue3-template/auth.md","lastUpdated":1689052576000}'),o={name:"engineer/vue3-template/auth.md"},e=l(`<h1 id="权限控制" tabindex="-1">权限控制 <a class="header-anchor" href="#权限控制" aria-label="Permalink to &quot;权限控制&quot;">​</a></h1><p>权限管理分为<code>系统权限</code>，<code>菜单管理</code>和<code>功能管理</code></p><h2 id="系统权限" tabindex="-1">系统权限 <a class="header-anchor" href="#系统权限" aria-label="Permalink to &quot;系统权限&quot;">​</a></h2><p>系统权限也叫鉴权，也就是登录功能，不登录的话无法使用系统。</p><p>前端鉴权一般有两种方式，一种是 Session-Cookie 认证，一种是 Token 认证。</p><p>具体见这篇文章：<a href="https://daotin.github.io/posts/2022/07/09/%E5%89%8D%E7%AB%AF%E9%89%B4%E6%9D%83%E6%96%B9%E6%A1%88.html" target="_blank" rel="noreferrer">前端鉴权方案</a></p><h2 id="菜单管理" tabindex="-1">菜单管理 <a class="header-anchor" href="#菜单管理" aria-label="Permalink to &quot;菜单管理&quot;">​</a></h2><p>菜单的管理一般会由后端返回，然后前端进行展示。</p><p>在<code>stores/app.ts</code>中会有获取菜单列表的方法：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// 获取菜单和权限</span></span>
<span class="line"><span style="color:#E1E4E8;">async </span><span style="color:#B392F0;">getMenuList</span><span style="color:#E1E4E8;">(isreload </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.menuList.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> isreload </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">data</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> window.$apis.common.</span><span style="color:#B392F0;">getSysMenuNav</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">menuList</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">filterMenus</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 功能权限列表</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">permissions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getPermissions</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// 菜单列表</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.menuList </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> menuList;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.menuIdUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getMenuIdUrl</span><span style="color:#E1E4E8;">(_.</span><span style="color:#B392F0;">cloneDeep</span><span style="color:#E1E4E8;">(menuList));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.menuUrlId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _.</span><span style="color:#B392F0;">invert</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.menuIdUrl);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.permissions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> permissions;</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre></div><p>关于前端的路由配置有两种方式：</p><h3 id="方式一" tabindex="-1">方式一 <a class="header-anchor" href="#方式一" aria-label="Permalink to &quot;方式一&quot;">​</a></h3><p><strong>全量路由，但是菜单是后端给的（推荐）。</strong></p><p>相当于我们菜单是配置的路由的子集。所以普通用户通过菜单访问是 ok 的，并且通过在地址栏输入菜单之外，但是在全量路由中的地址时，也是可以进入页面的。</p><ul><li>进入该页面，如果有接口请求，这时候有两种方式进行拦截操作： <ul><li>前端设置 permission 列表（不如下面的<code>路由守卫</code>好使），请求的接口不在该列表的，直接在请求拦截器中拦截，跳转到 error 页面</li><li>后端接口校验，该用户没有该接口的权限，直接在响应拦截器进入<code>401</code>，会跳转到登录页。</li></ul></li><li>如果没有接口请求 <ul><li>其实可以使用<code>路由守卫</code>来判断，该路由是否在后端返回的路由里面，来进行拦截跳转到 error 页面。<div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">routes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: </span><span style="color:#9ECBFF;">&quot;/users/:id&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    component: UserDetails,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">beforeEnter</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">to</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">from</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// reject the navigation</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div></li><li>其实也可以不管，如果是一个没有接口调用的静态页面，也不需要权限管理。</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>这个 permission 列表，一般也是由后端，跟菜单列表一起返回的。</p></div><h3 id="方式二" tabindex="-1">方式二 <a class="header-anchor" href="#方式二" aria-label="Permalink to &quot;方式二&quot;">​</a></h3><p><strong>通过后端返回菜单，前端使用动态路由<code>addRoute</code>的方式，添加路由。</strong></p><h2 id="功能管理" tabindex="-1">功能管理 <a class="header-anchor" href="#功能管理" aria-label="Permalink to &quot;功能管理&quot;">​</a></h2><p>主要分为<code>接口查询</code>功能和<code>增删改操作</code>功能。</p><ul><li>接口查询：主要是进入页面后，主动调用的接口，比如查询列表等</li><li>增删改操作：主要为用户点击按钮，提交表单，删除数据等主动操作导致的接口请求。</li></ul><blockquote><p>如何分别对<code>接口查询</code>和<code>增删改操作</code>进行权限控制呢？</p></blockquote><p>接口的查询，后端会进行权限校验的，我们不用操心。</p><p>如果后端没有权限校验，我们就要使用上面 permission 列表的方式，前端进行请求拦截。</p><p>功能权限才是我们需要设置的，比如增删改操作。</p><blockquote><p>那么，如何设置某个按钮的权限呢？</p></blockquote><p>解答：使用自定义指令<code>v-auth</code>来设置。</p><p>首先，在后端下发菜单的时候，也会一并下发所有功能（一般是增删改）对应的权限 code 列表，前端会写一个自定义指令，如果某个功能按钮对应的 code，不在 code 列表中，则把该按钮移除。</p><h3 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">├── derectives</span></span>
<span class="line"><span style="color:#e1e4e8;">│   ├── modules/</span></span>
<span class="line"><span style="color:#e1e4e8;">│   │   └── auth.ts        // 按钮权限控制文件</span></span>
<span class="line"><span style="color:#e1e4e8;">│   └── index.ts           // 入口文件</span></span></code></pre></div><p>1、auth.ts 代码</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { Directive } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { checkPermission } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@/utils&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">auth</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Directive</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HTMLElement</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">mounted</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">checkPermission</span><span style="color:#E1E4E8;">(binding.value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      el.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> auth;</span></span></code></pre></div><p>checkPermission 就是比对 v-auth 后面跟着的 code 是否在 code 列表中，如果没有则将该 dom 移除，也就不再显示该按钮了。</p><p>v-auth 的实现也可以采用隐藏 dom 的方式：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">auth</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Directive</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#B392F0;">HTMLElement</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">el</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">binding</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">binding.expression) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> isShow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (Array.</span><span style="color:#B392F0;">isArray</span><span style="color:#E1E4E8;">(binding.value)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      isShow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> binding.value.</span><span style="color:#B392F0;">every</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">v</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkPermission</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(v)));</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      isShow </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">checkPermission</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">String</span><span style="color:#E1E4E8;">(binding.value));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">isShow) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      el.style.display </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;none&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>2、然后在 index.ts 中，注册所有的自定义指令：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { App, Directive } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;vue&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> auth </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./modules/auth&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">directives</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { auth: auth };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">install</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">app</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(directives).</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      app.</span><span style="color:#B392F0;">directive</span><span style="color:#E1E4E8;">(key, directives[key]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;==directive install==&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>遍历所有的自定义指令，然后使用 app 注册。</p><p>3、最后在 main.ts 中注册。</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> directives </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./directives&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(directives);</span></span></code></pre></div><p>4、具体在页面使用方式：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">el-button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;primary&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-auth</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;&#39;sys:users:new&#39;&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">el-button</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><code>sys:users:new</code> 是后端接口文档中，在每个接口中，都会描述该接口的 authCode，只需要按照接口文档，在页面添加即可。</p><p><img src="`+p+'" alt=""></p>',44),t=[e];function c(E,r,y,i,F,d){return n(),a("div",null,t)}const B=s(o,[["render",c]]);export{h as __pageData,B as default};
