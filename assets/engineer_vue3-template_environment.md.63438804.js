import{_ as e,o as s,c as o,V as n}from"./chunks/framework.0e2b001c.js";const a="/fe-series-notes/assets/env-1.a6eb673e.png",y=JSON.parse('{"title":"配置环境变量","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/vue3-template/environment.md","filePath":"engineer/vue3-template/environment.md","lastUpdated":1689300880000}'),p={name:"engineer/vue3-template/environment.md"},c=n(`<h1 id="配置环境变量" tabindex="-1">配置环境变量 <a class="header-anchor" href="#配置环境变量" aria-label="Permalink to &quot;配置环境变量&quot;">​</a></h1><h2 id="开发环境和生产环境的区别" tabindex="-1">开发环境和生产环境的区别 <a class="header-anchor" href="#开发环境和生产环境的区别" aria-label="Permalink to &quot;开发环境和生产环境的区别&quot;">​</a></h2><p>开发环境下，Vue 会提供很多警告来帮你对付常见的错误与陷阱。而在生产环境下，这些警告语句却没有用，反而会增加应用的体积。此外，有些警告检查还有一些小的运行时开销，这在生产环境模式下是可以避免的。</p><p>开发环境(development)和生产环境(production)的构建目标差异很大。</p><p>在开发环境中，我们需要具有强大的、具有实时重新加载(live reloading)或热模块替换(hot module replacement)能力的 source map 和 localhost server。</p><p>而在生产环境中，我们的目标则转向于关注更小的 bundle，更轻量的 source map，以及更优化的资源，以改善加载时间。</p><h2 id="process-env" tabindex="-1"><code>process. env</code> <a class="header-anchor" href="#process-env" aria-label="Permalink to &quot;\`process. env\`&quot;">​</a></h2><p><code>process</code> 对象是全局变量，它提供当前 node.js 的有关信息，以及控制当前 node.js 的有关进程。因为是全局变量，它对于 node 应用程序是始终可用的，无需 <code>require()</code>。</p><p><code>process</code> 对象用于处理与当前进程相关的事情，它是一个全局对象，可以在任何地方直接访问到它而无需引入额外模块。</p><p><code>process. env</code> 获取当前系统环境信息的对象，常规可以用来进一步获取环境变量、用户名等系统信息：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(process. env);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;username: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> process. env.</span><span style="color:#79B8FF;">USERNAME</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;PATH: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> process. env.</span><span style="color:#79B8FF;">PATH</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h3 id="process-env-node-env" tabindex="-1"><code>process. env. NODE_ENV</code> <a class="header-anchor" href="#process-env-node-env" aria-label="Permalink to &quot;\`process. env. NODE_ENV\`&quot;">​</a></h3><p>首先要明白一点：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>process. env</code>对象上本来是不存在 <code>NODE_ENV</code> 这个属性的。</p></div><p>然而<code>process. env. NODE_ENV</code>可用，是前端工程化过程中大家约定俗成的做法，尤其是 webpack 构建前端工程时，会经常使用。</p><blockquote><p>那这个属性是什么时候赋值给<code>process. env</code>的呢？</p></blockquote><p>其实是 webpack 或者 vite 等工具，在构建时，将 <code>NODE_ENV</code> 赋值给<code>process. env</code>对象的。至于为什么叫<code>NODE_ENV</code>，应该是约定成俗的吧。</p><p>NODE_ENV 通常为“production”（生产环境）和“development”（开发环境），或者“prod”和“dev”，以此来区分不同环境下的逻辑行为。</p><p>我们可以通过在运行脚本时，手工对 NODE_ENV 赋值。例如 <code>package.json</code> 中的脚本：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;dev&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;NODE_ENV=development webpack --watch &quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;NODE_ENV=development webpack --mode=production&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>说明：<code>NODE_ENV=development</code> 在 windows 环境下会报错，需要改为 <code>set NODE_ENV=production</code> ，为了解决这个差异，可以使用 <code>cross-env</code> 跨平台的设置和使用环境变量。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;serve&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_ENV=development vite&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;cross-env NODE_ENV=prod vite build --mode prod&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre></div></div><h2 id="在-vite-中的配置" tabindex="-1">在 vite 中的配置 <a class="header-anchor" href="#在-vite-中的配置" aria-label="Permalink to &quot;在 vite 中的配置&quot;">​</a></h2><p>在 vite 启动后，会在 vite 内部来设置 <code>NODE_ENV</code>，所以我们才能在项目中使用。</p><p>之前，我们在 <code>scripts</code> 命令中使用 <code>cross-env</code> 来设置 <code>NODE_ENV</code>，但是如果需要配置的环境变量太多，全部设置在 <code>scripts</code> 命令中既不美观也不容易维护，所以我们可以将环境变量配置在 <code>.env</code> 文件中。</p><h3 id="import-meta-env" tabindex="-1"><code>import. meta. env</code> <a class="header-anchor" href="#import-meta-env" aria-label="Permalink to &quot;\`import. meta. env\`&quot;">​</a></h3><p>Vite 在一个特殊的 <code>import. meta. env</code> 对象上暴露环境变量。比如<code>import. meta. env.MODE</code>表示应用运行的模式。但是只有几个内置变量可用：</p><ul><li><code>import. meta. env.MODE</code>: string 应用运行的模式。</li><li><code>import. meta. env.BASE_URL</code>: string 部署应用时的基本 URL。他由 base 配置项决定。</li><li><code>import. meta. env.PROD</code>: boolean 应用是否运行在生产环境。</li><li><code>import. meta. env.DEV</code>: boolean 应用是否运行在开发环境 (永远与 <code>import. meta. env.PROD</code> 相反)。</li><li><code>import. meta. env.SSR</code>: boolean 应用是否运行在 server 上。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当我们设定 <code>.env</code> 环境变量文件后，<code>VITE_</code>开头的变量就会出现在 <code>import. meta. env</code> 中，我们就可以在项目中使用。</p></div><h3 id="env文件" tabindex="-1"><code>.env</code>文件 <a class="header-anchor" href="#env文件" aria-label="Permalink to &quot;\`.env\`文件&quot;">​</a></h3><p>Vite 使用 <code>dotenv</code> 从你的 环境目录 中的下列文件加载额外的环境变量：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">.env                # 所有情况下都会加载</span></span>
<span class="line"><span style="color:#e1e4e8;">.env.local          # 所有情况下都会加载，但会被 git 忽略</span></span>
<span class="line"><span style="color:#e1e4e8;">.env.[mode]         # 只在指定模式下加载</span></span>
<span class="line"><span style="color:#e1e4e8;">.env.[mode].local   # 只在指定模式下加载，但会被 git 忽略</span></span></code></pre></div><p>加载的环境变量也会通过 <code>import. meta. env</code> 以字符串形式暴露给客户端源码。</p><p>为了防止意外地将一些环境变量泄漏到客户端，只有以 <code>VITE_</code> 为前缀的变量才会暴露给经过 vite 处理的代码（<strong>也就是说只有 <code>VITE_</code>开头的自定义变量会出现在 <code>import. meta. env</code> 中</strong>）。</p><p>例如下面这些环境变量：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">VITE_SOME_KEY=123</span></span>
<span class="line"><span style="color:#e1e4e8;">DB_PASSWORD=foobar</span></span></code></pre></div><p>只有 <code>VITE_SOME_KEY</code> 会被暴露为 <code>import. meta. env.VITE_SOME_KEY</code> 提供给客户端源码，而 <code>DB_PASSWORD</code> 则不会。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">. </span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">. env.</span><span style="color:#79B8FF;">VITE_SOME_KEY</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 123</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">. </span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">. env.</span><span style="color:#79B8FF;">DB_PASSWORD</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// undefined</span></span></code></pre></div><p>当然，我们可以自定义 env 变量的前缀，请参阅 <a href="https://cn.vitejs.dev/config/shared-options.html#envprefix" target="_blank" rel="noreferrer">envPrefix</a>（不过，也没必要修改）。</p><h2 id="实际测试和配置" tabindex="-1">实际测试和配置 <a class="header-anchor" href="#实际测试和配置" aria-label="Permalink to &quot;实际测试和配置&quot;">​</a></h2><h3 id="测试结果" tabindex="-1">测试结果 <a class="header-anchor" href="#测试结果" aria-label="Permalink to &quot;测试结果&quot;">​</a></h3><p><strong>vite.config.ts 会先于 main.ts 运行</strong></p><p>1、在 vite.config.ts 中：</p><ul><li>在 vite 中打印 <code>process. env</code> 只有一些内置的变量，是没有任何 <code>NODE_ENV</code> 的，也没有任何 <code>VITE_</code>开头的环境变量</li><li>在 vite 中打印 <code>import. meta. env</code> 为 undefined</li></ul><p>当 vite 执行完成后（大约 2s，会执行 main.ts 文件）：</p><p>2、在 main.ts 中：</p><ul><li>在 main.ts 中打印 <code>process. env</code> 会报错，提示 process is not defined (因为 vite3 移除了这个变量：<a href="https://github.com/vitejs/vite/issues/1973" target="_blank" rel="noreferrer">https://github.com/vitejs/vite/issues/1973</a>)</li><li>在 main.ts 中打印 <code>import. meta. env</code> 会有除了内建变量外，还有自定义 <code>VITE_</code>开头的环境变量</li></ul><p><img src="`+a+`" alt=""></p><p>3、在 main.ts 执行完成后，再到 vue 组件中看看：</p><ul><li>在 login.vue 中打印 <code>process. env</code> 会报错，提示 process is not defined</li><li>在 login.vue 中打印 <code>import. meta. env</code> 会有除了内建变量外，还有自定义 <code>VITE_</code>开头的环境变量</li></ul><p>跟 main.ts 中是一致的。</p><p>4、再到其他 js 文件中看看，比如 <code>tailwind.config.js</code> 文件：</p><ul><li>打印 <code>process. env</code>，除了内置的变量，还多出了<code>VITE_USER_NODE_ENV</code>和<code>NODE_ENV</code>，是在 vite 中添加的（参考文章：<a href="https://daotin.github.io/posts/2022/11/16/vite%E9%A1%B9%E7%9B%AE%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8NODE_ENV.html" target="_blank" rel="noreferrer">vite 项目为什么可以直接使用 NODE_ENV</a>），但是其他的<code>VITE_</code>开头的变量（比如 <code>VITE_BASE_URL</code>）不在里面。</li><li>打印 <code>import. meta. env</code> 会报错</li></ul><h3 id="如何配置" tabindex="-1">如何配置 <a class="header-anchor" href="#如何配置" aria-label="Permalink to &quot;如何配置&quot;">​</a></h3><p>那么，如何得到一个完整的对象，包含 <code>process. env</code> 内置变量，<code>import. meta. env</code> 内置变量（一般用处不大），还有自定义的环境变量呢？</p><p>答案：就是使用<a href="https://cn.vitejs.dev/config/shared-options.html#define" target="_blank" rel="noreferrer">define</a></p><p>具体设置如下，我们设置了<code>process. env</code>对象，又单独设置了<code>NODE_ENV</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">define</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;process. env&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">process. env,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span><span style="color:#B392F0;">loadEnv</span><span style="color:#E1E4E8;">(mode, process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">()),</span></span>
<span class="line"><span style="color:#E1E4E8;">    NODE_ENV: </span><span style="color:#B392F0;">loadEnv</span><span style="color:#E1E4E8;">(mode, process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">())?.</span><span style="color:#79B8FF;">VITE_USER_NODE_ENV</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre></div><p>此时，除了 <code>vite.config.ts</code> 和 <code>tailwind.config.js</code> 外，其他的 ts 文件，vue 文件都可以在 <code>process. env</code> 拿到完整的 <strong><code>process. env</code> 内置变量</strong> 和 <strong><code>VITE_</code>开头的自定义的环境变量</strong> 。</p><ul><li><code>vite.config.ts</code> 因为是入口，所以还是只能拿到 <code>process. env</code> 内置变量</li><li><code>tailwind.config.js</code> 能拿到 <code>process. env</code> 内置变量，外加 <code>VITE_USER_NODE_ENV</code>，也够用了。</li><li>其他地方，一律使用<code>process. env.VITE_USER_NODE_ENV</code> 或者 <code>process. env.NODE_ENV</code> 即可。</li></ul><h3 id="vite-config-ts-怎么使用-env-文件定义的环境变量" tabindex="-1">vite.config.ts 怎么使用 env 文件定义的环境变量？ <a class="header-anchor" href="#vite-config-ts-怎么使用-env-文件定义的环境变量" aria-label="Permalink to &quot;vite.config.ts 怎么使用 env 文件定义的环境变量？&quot;">​</a></h3><p>首先，它好像也用不上 env 中自定义的环境变量，实在想用，可以使用 Vite 导出的 <code>loadEnv</code> 函数来加载指定的 <code>.env</code> 文件，或者使用骚操作，<a href="https://github.com/vitejs/vite/issues/1930#issuecomment-778595832" target="_blank" rel="noreferrer">通过 node 文件读取的方式</a>进行。</p><p>毕竟尤雨溪也说过，这是个“<a href="https://github.com/vitejs/vite/issues/1930" target="_blank" rel="noreferrer">鸡生蛋，蛋生鸡</a>”的问题。</p>`,62),l=[c];function t(r,d,i,E,v,u){return s(),o("div",null,l)}const h=e(p,[["render",t]]);export{y as __pageData,h as default};
