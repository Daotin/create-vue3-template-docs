import{_ as s,o as a,c as n,V as l}from"./chunks/framework.0e2b001c.js";const m=JSON.parse('{"title":"配置 mock","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/vue3-template/mock.md","filePath":"engineer/vue3-template/mock.md","lastUpdated":1689052576000}'),p={name:"engineer/vue3-template/mock.md"},o=l(`<h1 id="配置-mock" tabindex="-1">配置 mock <a class="header-anchor" href="#配置-mock" aria-label="Permalink to &quot;配置 mock&quot;">​</a></h1><h2 id="配置步骤" tabindex="-1">配置步骤 <a class="header-anchor" href="#配置步骤" aria-label="Permalink to &quot;配置步骤&quot;">​</a></h2><p>1、安装依赖</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">npm i mockjs</span></span></code></pre></div><p>2、新增 mocks/index.ts 文件</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Mock </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mockjs&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./modules/common&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">//延时数据返回</span></span>
<span class="line"><span style="color:#E1E4E8;">Mock.</span><span style="color:#B392F0;">setup</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  timeout: </span><span style="color:#9ECBFF;">&quot;100-1000&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>以及每个模块的 mock 文件，以 common 为例，新增文件 <code>src/mocks/modules/common.ts</code>：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Mock </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mockjs&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 定义通用的成功返回值</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">basicSuccess</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    code: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getUserInfo</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Mock.</span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    code: </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    body: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      userName: </span><span style="color:#9ECBFF;">&quot;@email&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      email: </span><span style="color:#9ECBFF;">&quot;@email&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      mobile:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">^</span><span style="color:#DBEDFF;">1</span><span style="color:#79B8FF;">[345789]\\d</span><span style="color:#F97583;">{9}$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      createdTime: </span><span style="color:#9ECBFF;">&#39;@datetime(&quot;yyyy-MM-dd HH:mm:ss&quot;)&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 拦截 Ajax 请求，返回模拟的响应数据。</span></span>
<span class="line"><span style="color:#E1E4E8;">Mock.</span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">sys</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">users</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">info</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;post&quot;</span><span style="color:#E1E4E8;">, getUserInfo);</span></span>
<span class="line"><span style="color:#E1E4E8;">Mock.</span><span style="color:#B392F0;">mock</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">sys</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">login</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;post&quot;</span><span style="color:#E1E4E8;">, basicSuccess);</span></span></code></pre></div><p>3、最后在 main.ts 中引入即可：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./mocks&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p>4、也可以在 vite.config.ts 中配置，在开发环境下自动引入，生产环境不引入</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark has-highlighted-lines"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;dev-auto-import&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(code, id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (mode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">src</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">main</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">ts</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(id)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        code: code.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">\`app.mount(&quot;#app&quot;)\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">\`import ElementPlus from &#39;element-plus&#39;;</span></span>
<span class="line"><span style="color:#9ECBFF;">            import &#39;element-plus/dist/index.css&#39;;</span></span>
<span class="line highlighted"><span style="color:#9ECBFF;">            import &#39;./mocks&#39;;</span></span>
<span class="line"><span style="color:#9ECBFF;">            app.use(ElementPlus);</span></span>
<span class="line"><span style="color:#9ECBFF;">            app.mount(&quot;#app&quot;)\`</span></span>
<span class="line"><span style="color:#E1E4E8;">        ),</span></span>
<span class="line"><span style="color:#E1E4E8;">        map: </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="配置说明" tabindex="-1">配置说明 <a class="header-anchor" href="#配置说明" aria-label="Permalink to &quot;配置说明&quot;">​</a></h2><p>在项目开发前期，后端接口还没好的时候，前端需要根据接口文档，自己 mock 数据来进行业务开发。</p><p>最后的效果就是在联调的时候，只需要很小的改动（屏蔽掉 mock）就可以使用后端数据。</p><h3 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">├── mocks</span></span>
<span class="line"><span style="color:#E1E4E8;">│   ├── modules           </span><span style="color:#6A737D;">// 各模块mock</span></span>
<span class="line"><span style="color:#E1E4E8;">│   │   ├── common.ts        </span><span style="color:#6A737D;">// 全局共用的mock</span></span>
<span class="line"><span style="color:#E1E4E8;">│   </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">   └── xxx.ts        </span><span style="color:#6A737D;">// 其他模块的mock</span></span>
<span class="line"><span style="color:#E1E4E8;">│   └── index.ts</span></span></code></pre></div><p>目录说明：</p><ul><li><code>index.ts</code>：引入 mock 和其他模块的 mock</li><li><code>common.ts</code>：可以放一些登录，注册，获取用户信息等的 mock</li></ul><h2 id="工具推荐" tabindex="-1">工具推荐 <a class="header-anchor" href="#工具推荐" aria-label="Permalink to &quot;工具推荐&quot;">​</a></h2><p><a href="https://just-mock.vercel.app/" target="_blank" rel="noreferrer">just mock</a> 是一个浏览器插件，在代码中什么都不需要更改，只需要添加相应的接口和数据即可实现拦截。</p><p>插件安装好后添加相应的域名就可以拦截到相应的请求。接着进行相应的编辑添加对应的 mock 数据就好。</p><p>浏览器插件原理和 Better-mock 是一样的，但会更加轻便，无需融入到代码中。两者的原理是一样的，都是在网络请求前重写了全局的 xhr 和 fetch ，具体可以参考 油猴脚本重写fetch和xhr请求。</p>`,23),e=[o];function t(c,E,r,y,i,F){return a(),n("div",null,e)}const u=s(p,[["render",t]]);export{m as __pageData,u as default};
