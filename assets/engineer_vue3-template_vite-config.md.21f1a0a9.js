import{_ as s,o as a,c as n,V as l}from"./chunks/framework.0e2b001c.js";const _=JSON.parse('{"title":"vite 工程化配置","description":"","frontmatter":{},"headers":[],"relativePath":"engineer/vue3-template/vite-config.md","filePath":"engineer/vue3-template/vite-config.md","lastUpdated":1689052576000}'),e={name:"engineer/vue3-template/vite-config.md"},o=l(`<h1 id="vite-工程化配置" tabindex="-1">vite 工程化配置 <a class="header-anchor" href="#vite-工程化配置" aria-label="Permalink to &quot;vite 工程化配置&quot;">​</a></h1><h2 id="设置-指向-src-目录" tabindex="-1">设置 @ 指向 src 目录 <a class="header-anchor" href="#设置-指向-src-目录" aria-label="Permalink to &quot;设置 @ 指向 src 目录&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolve } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;path&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  resolve: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    alias: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;@&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&quot;src&quot;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 设置 \`@\` 指向 \`src\` 目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果编辑器提示 path 模块找不到，则可以安装一下 <code>@types/node</code> -&gt; <code>npm i @types/node -D</code></p></div><p>或者使用创建项目时，默认配置的写法：</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">alias</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// fileURLToPath:函数确保百分比编码字符的正确解码，并确保跨平台的有效绝对路径字符串。</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// URL:如果url参数是相对 URL，则构造函数将使用url参数和可选的base参数作为基础</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;@&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#B392F0;">fileURLToPath</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">URL</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./src&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.url)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre></div>`,6),p=[o];function t(c,r,E,i,y,d){return a(),n("div",null,p)}const h=s(e,[["render",t]]);export{_ as __pageData,h as default};
