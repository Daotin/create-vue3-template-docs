import{_ as a,o as e,c as n,S as o}from"./chunks/framework.d5a27ec8.js";const y=JSON.parse('{"title":"异步更新策略和 nextTick 原理","description":"","frontmatter":{},"headers":[],"relativePath":"vue2原理剖析/异步更新策略/异步更新策略和nextTick原理.md","filePath":"vue2原理剖析/异步更新策略/异步更新策略和nextTick原理.md","lastUpdated":1718873813000}'),l={name:"vue2原理剖析/异步更新策略/异步更新策略和nextTick原理.md"};function p(t,s,c,r,i,d){return e(),n("div",null,s[0]||(s[0]=[o(`<h1 id="异步更新策略和-nexttick-原理" tabindex="-1">异步更新策略和 nextTick 原理 <a class="header-anchor" href="#异步更新策略和-nexttick-原理" aria-label="Permalink to &quot;异步更新策略和 nextTick 原理&quot;">​</a></h1><p>从之前的章节中，我们知道了从 template 到视图更新经过的过程如下：</p><div class="language-mermaid"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LR</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">A</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">template</span><span style="color:#F97583;">]--&gt;</span><span style="color:#FFAB70;">B</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">render function</span><span style="color:#F97583;">]--&gt;</span><span style="color:#FFAB70;">C</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">VNode</span><span style="color:#F97583;">]--&gt;</span><span style="color:#FFAB70;">D</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">Patch</span><span style="color:#F97583;">]--&gt;</span><span style="color:#FFAB70;">E</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">视图更新</span><span style="color:#F97583;">]</span></span></code></pre></div><p>但是，在 Patch 之后，并不是直接更新视图的，而是在异步队列中更新视图的。</p><h2 id="nexttick" tabindex="-1">nextTick <a class="header-anchor" href="#nexttick" aria-label="Permalink to &quot;nextTick&quot;">​</a></h2><p><code>nextTick</code> 是 Vue.js 中的一个非常重要的 API。要理解 <code>nextTick</code> 的作用，我们首先需要了解 Vue.js 的异步更新队列。</p><p>Vue.js 使用异步队列来批量更新 DOM。也就是说，当你修改一个数据时，Vue.js 不会立即更新 DOM，而是将所有的依赖这个数据的 Watcher 对象放入一个队列中。这个过程被称为依赖收集。</p><p>然后，Vue.js 会等待当前同步代码执行完毕以后，在当前的宏任务（macrotask）或者同步任务完成后，即将开始的微任务阶段，开始批量执行队列中的 Watcher 对象。</p><p>这样做的好处是可以避免不必要的 DOM 更新，从而提高性能。</p><p>这就是 <code>nextTick</code> 的作用所在。<code>nextTick</code> 函数允许你在下一次 DOM 更新循环结束之后延迟执行一段代码。换句话说，<code>nextTick</code> 可以让你在数据改变之后，DOM 更新之后，执行一些操作。</p><p>下面是详细的步骤：</p><ol><li>当你修改一个响应式数据时，Vue.js 会触发这个数据的 setter 函数。</li><li>Setter 函数会通知所有依赖这个数据的 Watcher 对象，告诉它们数据已经改变。</li><li>每个 Watcher 对象在接收到通知后，在 Watcher 的 update 中不会立即更新视图，而是将自己添加到一个全局的队列中。</li><li>Vue.js 有一个异步任务队列，并且使用 Promise 或者 MutationObserver 的微任务队列来延迟执行这个队列中的 Watcher 对象。</li><li>当所有同步任务执行完毕，微任务队列开始执行，Vue.js 就会开始遍历这个 Watcher 队列，并且为每个 Watcher 对象执行其 run 方法，从而更新视图。在这个过程中，如果有多个 相同属性的 Watcher 对象，Vue.js 也只会更新一次视图，避免了不必要的计算和渲染，提高了性能。</li><li>然后，nextTick 的回调函数会在 DOM 更新后（即所有的 Watcher 都已经执行，视图已经更新）被调用。因此，我们可以通过 nextTick 在 DOM 更新后执行一些任务，比如操作更新后的 DOM 元素。</li><li>再然后，当所有的 nextTick 回调执行完后，Vue.js 就会开始执行后续的同步代码。这个过程就是 JavaScript 的事件循环（Event Loop）。</li></ol><p>下面举个例子来帮助理解：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Vue</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  el: </span><span style="color:#9ECBFF;">&quot;#app&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    message: </span><span style="color:#9ECBFF;">&quot;Hello Vue!&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">updateMessage</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.message </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello Vue3!&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">$nextTick</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.$el.textContent);</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>在这个例子中，我们首先更改了 <code>message</code> 的值，然后使用 <code>nextTick</code> 来确保 <code>console.log</code> 语句在 DOM 更新之后执行。如果我们没有使用 <code>nextTick</code>，那么 <code>console.log</code> 语句可能会在 DOM 更新之前执行，此时它仍然会输出原来的内容 &quot;Hello Vue!&quot;。</p><h2 id="疑问" tabindex="-1">疑问 <a class="header-anchor" href="#疑问" aria-label="Permalink to &quot;疑问&quot;">​</a></h2><h3 id="watcher-和-nexttick-的回调都是在微任务执行的" tabindex="-1">Watcher 和 nextTick 的回调都是在微任务执行的 <a class="header-anchor" href="#watcher-和-nexttick-的回调都是在微任务执行的" aria-label="Permalink to &quot;Watcher 和 nextTick 的回调都是在微任务执行的&quot;">​</a></h3><p><code>Watcher</code> 的执行和 <code>nextTick</code> 的回调都是在微任务阶段执行的。</p><p><code>Watcher</code> 对象是响应 Vue.js 数据变动的观察者，当数据变动时，<code>Watcher</code> 对象会被添加到异步任务队列中，等待下一个微任务阶段执行。</p><p>而 <code>nextTick</code> 的回调则是在 DOM 更新后（即所有的 <code>Watcher</code> 对象执行后）在同一个微任务阶段执行。</p><p>Vue.js 的异步任务队列利用了 JavaScript 的微任务（microtask）机制。微任务是在当前宏任务（macrotask）执行结束后，下一个宏任务开始前，执行的任务。因此，异步任务队列的执行时机刚好可以确保在 DOM 更新后立即执行。</p><p>至于实现这个异步任务队列，Vue.js 会优先尝试使用原生的 <code>Promise</code> 对象。如果环境中支持 <code>Promise</code>，那么 Vue.js 就会使用 <code>Promise.then</code> 来实现异步队列。如果环境中不支持 <code>Promise</code>，那么 Vue.js 会尝试使用 <code>MutationObserver</code>。如果环境中连 <code>MutationObserver</code> 都不支持，那么 Vue.js 会退而求其次，使用 <code>setImmediate</code> 或者 <code>setTimeout</code>。</p><p>因此，<code>Watcher</code> 的异步任务队列和 <code>nextTick</code> 的异步任务队列，它们的实现方式是基本一致的。都会优先使用 <code>Promise</code>，然后是 <code>MutationObserver</code>，最后是 <code>setImmediate</code> 或者 <code>setTimeout</code>。</p><h3 id="watcher-队列-dom-更新-nexttick-的回调都在微任务队列执行" tabindex="-1">Watcher 队列，dom 更新，nextTick 的回调都在微任务队列执行 <a class="header-anchor" href="#watcher-队列-dom-更新-nexttick-的回调都在微任务队列执行" aria-label="Permalink to &quot;Watcher 队列，dom 更新，nextTick 的回调都在微任务队列执行&quot;">​</a></h3><p>在一个事件循环中，先执行同步代码，如果有修改数据，则将其添加到异步队列，当所有的同步代码执行完成后，开始执行微任务队列，这时候就会执行所有的 Watcher 队列，执行完成后，执行 dom 更新，dom 更新完成后，执行 nextTick 的回调。按照这个顺序完成后，开始下一轮事件循环，对吗？</p><p>你的理解是正确的，再次总结一下你的描述：</p><ol><li><p><strong>执行同步代码</strong>：在当前的事件循环（Event Loop）中，首先执行所有的同步代码。</p></li><li><p><strong>修改数据</strong>：如果在同步代码中有数据被修改，对应的 <code>Watcher</code> 会被添加到异步队列中。</p></li><li><p><strong>同步代码完成</strong>：当所有的同步代码都执行完后，事件循环将检查微任务队列。</p></li><li><p><strong>执行微任务队列</strong>：此时，所有标记为“脏”的 <code>Watcher</code> 会执行，触发组件的重新渲染。</p></li><li><p><strong>DOM 更新</strong>：随着 <code>Watcher</code> 的执行，DOM 更新会发生。</p></li><li><p><strong>执行 nextTick 的回调</strong>：在所有 DOM 更新后，所有注册到 <code>nextTick</code> 的回调会被执行。</p></li><li><p><strong>开始下一轮事件循环</strong>：当前的事件循环完成后，如果有其他的宏任务（例如：setTimeout、setInterval、I/O 操作等）在队列中，那么下一个事件循环会开始，并处理这些宏任务。</p></li></ol><h3 id="为什么要在微任务中更新视图" tabindex="-1">为什么要在微任务中更新视图？ <a class="header-anchor" href="#为什么要在微任务中更新视图" aria-label="Permalink to &quot;为什么要在微任务中更新视图？&quot;">​</a></h3><ol><li>保证在同一事件循环中完成数据更新与视图更新。数据更新和视图更新放在同一个宏任务中,可以确保在同一事件循环中完成,避免数据和视图不同步的情况。</li><li>批量更新,提高性能。使用微任务队列,可以将同一事件循环内的多次数据变更缓冲起来,只刷新一次视图,避免不必要的重绘和重排。</li><li>遵循 DOM 渲染时机。微任务的执行时机是在 DOM 渲染之前,这确保了 DOM 状态不会在一个事件循环中被多次更新。</li><li>保证合理的执行顺序。微任务会在宏任务之后、UI 渲染之前执行,可以保证在渲染视图之前执行完所有数据更新逻辑。</li></ol><h3 id="怎么样才叫一个事件循环" tabindex="-1">怎么样才叫一个事件循环？ <a class="header-anchor" href="#怎么样才叫一个事件循环" aria-label="Permalink to &quot;怎么样才叫一个事件循环？&quot;">​</a></h3><p>一个事件循环就是宏任务+微任务。</p><p>如何定义一个宏任务？</p><p>宏任务（Macro Task）和微任务（Micro Task）是 JavaScript 事件循环中的两种不同类型的任务。宏任务是事件循环中的主要任务，每个宏任务都会引发一次完整的事件循环。</p><p>以下是一些常见的宏任务：</p><ol><li><strong>主脚本</strong>：浏览器加载页面时首次执行的 JavaScript 脚本。</li><li><strong>定时器</strong>：通过 <code>setTimeout</code> 和 <code>setInterval</code> 设置的回调函数。</li><li><strong>UI 渲染</strong>：浏览器的渲染和重绘任务（注意，不是所有的 UI 更新都是宏任务，例如 Vue 的异步更新是微任务）。</li><li><strong>I/O</strong>：例如网络请求的回调（如 <code>XMLHttpRequest</code>）。</li><li><strong>事件</strong>：例如鼠标点击、键盘输入等浏览器事件的回调。</li></ol><p>定义宏任务的核心是：它们在事件循环的每个迭代中被单独处理，并在处理完毕后，事件循环会处理微任务队列中的所有任务。</p><p>从技术上讲，当 JavaScript 运行时环境（如浏览器或 Node.js）检测到一个宏任务需要执行时，它会将这个任务添加到宏任务队列。事件循环会依次从这个队列中取出任务并执行。每执行完一个宏任务，事件循环都会检查并处理微任务队列中的任务，直到微任务队列为空，然后再回到宏任务队列取出下一个宏任务。</p><p>这样的机制确保了 JavaScript 代码的同步执行性质，同时也允许异步事件和操作得以插入和处理。</p><h2 id="如何保证-nexttick-的回调会在-watcher-队列执行完-dom-更新后执行呢" tabindex="-1">如何保证 nextTick 的回调会在 watcher 队列执行完，dom 更新后执行呢？ <a class="header-anchor" href="#如何保证-nexttick-的回调会在-watcher-队列执行完-dom-更新后执行呢" aria-label="Permalink to &quot;如何保证 nextTick 的回调会在 watcher 队列执行完，dom 更新后执行呢？&quot;">​</a></h2><p>其实 vue 并没有处理 nextTick 的回调一定会在 Watcher 队列之后执行，因为它们都是在微任务中执行的，所以我们需要手动的把 nextTick 代码写在最后，来保证代码逻辑的正常。我的理解对吧？</p><p>你的理解是正确的。Vue 确实没有强制保证<code>$nextTick</code>的回调一定会在 Watcher 队列之后执行，因为它们都是在微任务队列中执行，没有明确的先后顺序。</p><p>所以，为了确保代码逻辑的正常执行，通常需要手动将<code>$nextTick</code>的调用放在 Watcher 队列之后，以确保在 DOM 更新后执行相关操作。</p><p>这是一种常见的做法，特别是当你依赖于 DOM 更新后的状态来执行特定的操作。通过将<code>$nextTick</code>的回调放在数据变化之后，你可以更好地控制执行顺序，以满足你的需求。</p><h2 id="现在" tabindex="-1">现在 <a class="header-anchor" href="#现在" aria-label="Permalink to &quot;现在&quot;">​</a></h2><p>现在，template 到视图更新经过的过程如下：</p><div class="language-mermaid"><button title="Copy Code" class="copy"></button><span class="lang">mermaid</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">graph</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TB</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">A</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">template</span><span style="color:#F97583;">]--&gt;</span><span style="color:#FFAB70;">B</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">数据变化,Watcher收集依赖</span><span style="color:#F97583;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">B</span><span style="color:#F97583;">--&gt;</span><span style="color:#FFAB70;">C</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">异步任务队列</span><span style="color:#E1E4E8;">-</span><span style="color:#9ECBFF;">微任务</span><span style="color:#F97583;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">C</span><span style="color:#F97583;">--&gt;</span><span style="color:#FFAB70;">D</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">Watcher批量更新</span><span style="color:#F97583;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">D</span><span style="color:#F97583;">--&gt;</span><span style="color:#FFAB70;">E</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">Patch</span><span style="color:#F97583;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">E</span><span style="color:#F97583;">--&gt;</span><span style="color:#FFAB70;">F</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">视图更新</span><span style="color:#F97583;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">F</span><span style="color:#F97583;">--&gt;</span><span style="color:#FFAB70;">G</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">nextTick 回调</span><span style="color:#F97583;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">G</span><span style="color:#F97583;">--&gt;</span><span style="color:#FFAB70;">H</span><span style="color:#F97583;">[</span><span style="color:#9ECBFF;">下一个Event loop</span><span style="color:#F97583;">]</span></span></code></pre></div>`,46)]))}const F=a(l,[["render",p]]);export{y as __pageData,F as default};
