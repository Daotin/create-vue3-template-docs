import{_ as s,o as a,c as n,V as l}from"./chunks/framework.ff44d2fd.js";const u=JSON.parse('{"title":"渲染函数如何转换成 VNode 节点？","description":"","frontmatter":{},"headers":[],"relativePath":"vue2原理剖析/模版渲染/渲染函数如何转换成VNode节点？.md","filePath":"vue2原理剖析/模版渲染/渲染函数如何转换成VNode节点？.md","lastUpdated":1712818751000}'),p={name:"vue2原理剖析/模版渲染/渲染函数如何转换成VNode节点？.md"},o=l(`<h1 id="渲染函数如何转换成-vnode-节点" tabindex="-1">渲染函数如何转换成 VNode 节点？ <a class="header-anchor" href="#渲染函数如何转换成-vnode-节点" aria-label="Permalink to &quot;渲染函数如何转换成 VNode 节点？&quot;">​</a></h1><p>VNode 也叫做 Virtual DOM，其实就是一棵以 JavaScript 对象（VNode 节点）作为基础的树，用对象属性来描述节点，实际上它只是一层对真实 DOM 的抽象。最终可以通过一系列操作使这棵树映射到真实环境上。</p><h2 id="如何生成-vnode" tabindex="-1">如何生成 VNode？ <a class="header-anchor" href="#如何生成-vnode" aria-label="Permalink to &quot;如何生成 VNode？&quot;">​</a></h2><p>比如我目前有这么一个 Vue 组件：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;demo&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-show</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;isShow&quot;</span><span style="color:#E1E4E8;">&gt; This is a span. &lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">template</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>转换成 VNode 后的情况：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">tag</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 指令集合数组 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">directives</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#6A737D;">/* v-show指令 */</span></span>
<span class="line"><span style="color:#E1E4E8;">                rawName: </span><span style="color:#9ECBFF;">&#39;v-show&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                expression: </span><span style="color:#9ECBFF;">&#39;isShow&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                name: </span><span style="color:#9ECBFF;">&#39;show&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                value: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 静态class */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">staticClass</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;demo&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">children</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 子节点是一个文本VNode节点 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            tag: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            data: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            text: </span><span style="color:#9ECBFF;">&#39;This is a span.&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            children: </span><span style="color:#79B8FF;">undefined</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>那么如何生成的呢？</p><h2 id="实现一个-vnode" tabindex="-1">实现一个 VNode <a class="header-anchor" href="#实现一个-vnode" aria-label="Permalink to &quot;实现一个 VNode&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">tag</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">children</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">text</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">elm</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*当前节点的标签名*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.tag </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> tag;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*当前节点的一些数据信息，比如props、attrs等数据*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*当前节点的子节点，是一个数组*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.children </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> children;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*当前节点的文本*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> text;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*当前虚拟节点对应的真实dom节点*/</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.elm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> elm;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面的 html 就可以使用下面 render 方法生产 VNode：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;span&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/* 指令集合数组 */</span></span>
<span class="line"><span style="color:#E1E4E8;">      directives: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">/* v-show指令 */</span></span>
<span class="line"><span style="color:#E1E4E8;">          rawName: </span><span style="color:#9ECBFF;">&quot;v-show&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          expression: </span><span style="color:#9ECBFF;">&quot;isShow&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&quot;show&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          value: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/* 静态class */</span></span>
<span class="line"><span style="color:#E1E4E8;">      staticClass: </span><span style="color:#9ECBFF;">&quot;demo&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;This is a span.&quot;</span><span style="color:#E1E4E8;">)]</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>渲染函数如何生成 VNode 节点的？</p><p>渲染函数主要就是调用 VNode 类来生成 VNode 的，所以主要是要<strong>实现 VNode 类</strong>。</p><p>实现 VNode 类后，可以将 VNode 进一步封装一下，可以实现一些产生常用 VNode 的方法。比如<code>createEmptyVNode</code> ，<code>createTextVNode</code> 等等。</p><h2 id="疑问" tabindex="-1">疑问 <a class="header-anchor" href="#疑问" aria-label="Permalink to &quot;疑问&quot;">​</a></h2><h3 id="_1、我们知道在-vue-中-在更新视图的时候会将-dom-映射成-vdom-然后通过-diff-算法得出一些需要修改的最小单位-再将这些小单位的视图进行更新。那么-diff-是对-vdom-进行操作还是对-dom-进行操作" tabindex="-1">1、我们知道在 Vue 中，在更新视图的时候会将 DOM 映射成 VDOM，然后通过 diff 算法得出一些需要修改的最小单位，再将这些小单位的视图进行更新。那么，diff 是对 VDOM 进行操作还是对 DOM 进行操作？ <a class="header-anchor" href="#_1、我们知道在-vue-中-在更新视图的时候会将-dom-映射成-vdom-然后通过-diff-算法得出一些需要修改的最小单位-再将这些小单位的视图进行更新。那么-diff-是对-vdom-进行操作还是对-dom-进行操作" aria-label="Permalink to &quot;1、我们知道在 Vue 中，在更新视图的时候会将 DOM 映射成 VDOM，然后通过 diff 算法得出一些需要修改的最小单位，再将这些小单位的视图进行更新。那么，diff 是对 VDOM 进行操作还是对 DOM 进行操作？&quot;">​</a></h3><p>在 Vue 中,diff 算法是对虚拟 DOM(VDOM)进行操作,不是对真实 DOM 进行操作。</p><p>更新视图的过程是:</p><ol><li><p>将组件的数据渲染成一个虚拟 DOM 对象(VNode)</p></li><li><p>用新的 VNode 和 旧的 VNode 进行 diff,比较两者的差异</p></li><li><p>将需要更新的部分按照 diff 结果进行最小单位地更新到真实 DOM 中</p></li></ol><p>所以 diff 算法是在内存中对虚拟 DOM 进行比较和 patch,只有必要的部分才会更新到真实 DOM,避免了重复渲染和无效渲染,提高了性能。</p><p>diff 算法不会直接操作真实 DOM,它只会告诉渲染系统如何效率地更新真实 DOM。这种虚拟 DOM 的机制是 Vue 提高性能的关键所在。</p><h3 id="_2、vdom-是一个-js-对象吗-为什么我看-vue-源码中-是使用-vnode-类来创建的-最后返回的这个类不是实例吗-就不是个对象了啊。" tabindex="-1">2、VDOM 是一个 js 对象吗？为什么我看 Vue 源码中， 是使用 VNode 类来创建的，最后返回的这个类不是实例吗？就不是个对象了啊。 <a class="header-anchor" href="#_2、vdom-是一个-js-对象吗-为什么我看-vue-源码中-是使用-vnode-类来创建的-最后返回的这个类不是实例吗-就不是个对象了啊。" aria-label="Permalink to &quot;2、VDOM 是一个 js 对象吗？为什么我看 Vue 源码中， 是使用 VNode 类来创建的，最后返回的这个类不是实例吗？就不是个对象了啊。&quot;">​</a></h3><p>是的,VDOM 在 Vue 中的实现是通过 VNode 这个类来创建的,它是一个类的实例对象。</p><p>VNode 是一个实现了一些属性和方法的类,通过 new VNode()来创建一个 VNode 的实例对象。所以 VDOM 其实是一个 VNode 的实例对象,可以看作是一个 JavaScript 对象。</p><p>之所以使用类来构造,是因为一个类可以清晰地包含 VNode 的各种属性和方法,如 tag、data、children 等属性,以及实现一些更新逻辑的方法。直接使用普通 JS 对象会比较杂乱。</p><p>另外使用 Class 而不是普通对象还有一些好处:</p><ul><li>可以避免每次创建虚拟 DOM 时都要重新定义对象属性和方法,有利于性能优化</li><li>可以基于 VNode 扩展子类如 ComponentVNode 等,提高代码的复用性和扩展性</li><li>有利于类型系统进行类型检查,比如 Vue 中的 Flow 静态类型检查</li></ul><p>所以综合来说,Vue 选择通过 Class 来实现 VDOM 是一个比较好的设计,但本质上一个 VNode 实例是一个 JavaScript 对象,可以被渲染系统识别和更新。</p><h3 id="_3、类的实例是-js-对象" tabindex="-1">3、类的实例是 js 对象？ <a class="header-anchor" href="#_3、类的实例是-js-对象" aria-label="Permalink to &quot;3、类的实例是 js 对象？&quot;">​</a></h3><p>是的,在 JavaScript 中,类的实例是对象。</p><p>当通过 new 关键字实例化一个类时,会执行以下操作:</p><ol><li>创建一个空的 JavaScript 对象</li><li>将这个空对象链接到类的原型</li><li>绑定 this</li><li>执行构造函数,将属性和方法添加到这个对象上</li><li>返回这个对象</li></ol><p>所以类的实例本质上是一个普通的 JavaScript 对象,只是这个对象通过 new 关键字创建,并绑定了这个类的原型原型链。</p><p>我们可以验证:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;John&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> p); </span><span style="color:#6A737D;">// &#39;object&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">instanceof</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>上面代码中,p 是一个 Person 的实例对象,它的类型是 object,既是 Person 的实例,也是 Object 的实例。</p><p>所以我们可以认为,类的实例就是一个普通的 JavaScript 对象,它通过原型链拥有了类的属性和方法。</p><h3 id="_4、在-createelement-方法中-如果传入的-data-的-ob-已经定义-则创建一个空节点。为什么" tabindex="-1">4、在 createElement 方法中，如果传入的 data 的<code>__ob__</code>已经定义，则创建一个空节点。为什么？ <a class="header-anchor" href="#_4、在-createelement-方法中-如果传入的-data-的-ob-已经定义-则创建一个空节点。为什么" aria-label="Permalink to &quot;4、在 createElement 方法中，如果传入的 data 的\`__ob__\`已经定义，则创建一个空节点。为什么？&quot;">​</a></h3><p>在 Vue 的 createElement 方法中,会检查传入的 data 对象是否已经定义了<strong>ob</strong>属性,如果定义了就会创建一个空节点,这是一种避免重复观测(observe)的优化。</p><p>原因是在 Vue 中,一个对象被 observer 的时候,会给这个对象定义一个<strong>ob</strong>属性,用来标记这个对象已经被观测过了。</p><p>那么如果 createElement 的时候发现 data 有<strong>ob</strong>属性,就说明这个 data 对象已经被观测过了,就没有必要再次观测。</p><p>直接返回一个空节点,可以避免重复执行 Object.defineProperty 给 data 添加 getter/setter 的过程,优化了性能。</p><p>这样做有以下好处:</p><ul><li>避免重复观测同一个对象,减少不必要的计算开销</li><li>防止因重复观测而导致的错误和警告</li><li>由于存在缓存,重复使用同一个 data 对象不会有副作用</li></ul><p>所以检查 <strong>ob</strong> 属性是一个简单有效的优化手段,可以避免 Vue 多次观测同一个对象,提高系统性能。</p><h3 id="_5、createelement-不是创建-vdom-吗-跟观测有啥关系" tabindex="-1">5、createElement 不是创建 vdom 吗，跟观测有啥关系？ <a class="header-anchor" href="#_5、createelement-不是创建-vdom-吗-跟观测有啥关系" aria-label="Permalink to &quot;5、createElement 不是创建 vdom 吗，跟观测有啥关系？&quot;">​</a></h3><p>您提出了一个好问题,我来详细解释一下 createElement 和观测的关系:</p><p>createElement 函数主要工作是创建 VNode,也就是我们说的虚拟 DOM。但在其内部会对 data 做一些处理:</p><ol><li><p>如果 data 没有<strong>ob</strong>属性,会通过 observe 方法进行观测,给 data 加上响应式的 getter/setter。</p></li><li><p>如果 data 有<strong>ob</strong>属性,说明已经被观测过了,就直接返回空 VNode。</p></li></ol><p>之所以要在 createElement 做观测,是因为 data 会被合并到 VNode 上,参与后续的 patch 和 diff 过程。为了使视图响应式,data 必须是可观测的。</p><p>可以通过下面的流程总结 createElement 和观测的关系:</p><ol><li><p>调用 createElement 时,传入 data。</p></li><li><p>检查 data 是否被观测过,如果没有,调用 observe 进行观测。</p></li><li><p>使用数据创建 VNode,VNode 上会包含可观测的 data。</p></li><li><p>VNode 作为虚拟 DOM,进行 diff 和 patch,实现视图响应。</p></li></ol><p>所以 createElement 之所以要与观测系统结合,是通过观测保证生成的 VNode 中包含的 data 是可响应的,实现整体的响应式。</p><p>可以说观测是响应式的基础,而 createElement 负责在 VNode 创建时将其集成,两者关系密不可分。</p>`,56),e=[o];function t(E,c,r,i,y,d){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
