import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ff44d2fd.js";const V=JSON.parse('{"title":"VNode 的 Patch 过程","description":"","frontmatter":{},"headers":[],"relativePath":"vue2原理剖析/模版编译渲染原理/VNode的Patch过程.md","filePath":"vue2原理剖析/模版编译渲染原理/VNode的Patch过程.md","lastUpdated":1718873813000}'),p={name:"vue2原理剖析/模版编译渲染原理/VNode的Patch过程.md"},o=l(`<h1 id="vnode-的-patch-过程" tabindex="-1">VNode 的 Patch 过程 <a class="header-anchor" href="#vnode-的-patch-过程" aria-label="Permalink to &quot;VNode 的 Patch 过程&quot;">​</a></h1><p>通过 render function 产生的新的 VNode 会和老 VNode 进行一个 patch 的过程，比对得出「差异」，最终将这些「差异」更新到视图上。</p><h2 id="diff-算法" tabindex="-1">diff 算法 <a class="header-anchor" href="#diff-算法" aria-label="Permalink to &quot;diff 算法&quot;">​</a></h2><p><strong>diff 算法是通过同层的树节点进行比较而非对树进行逐层搜索遍历的方式，所以时间复杂度只有 O(n)，是一种相当高效的算法。</strong></p><h3 id="patch-的简单逻辑" tabindex="-1">patch 的简单逻辑： <a class="header-anchor" href="#patch-的简单逻辑" aria-label="Permalink to &quot;patch 的简单逻辑：&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">patch</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">oldVnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">parentElm</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">oldVnode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addVnodes</span><span style="color:#E1E4E8;">(parentElm, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, vnode, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, vnode.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">vnode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeVnodes</span><span style="color:#E1E4E8;">(parentElm, oldVnode, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, oldVnode.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldVNode, vnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldVNode, vnode);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">removeVnodes</span><span style="color:#E1E4E8;">(parentElm, oldVnode, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, oldVnode.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addVnodes</span><span style="color:#E1E4E8;">(parentElm, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, vnode, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, vnode.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>其中关键是，当是相同的 VNode 的时候，才会进行 patch 过程。</p><h3 id="samevnode-判断" tabindex="-1">sameVnode 判断 <a class="header-anchor" href="#samevnode-判断" aria-label="Permalink to &quot;sameVnode 判断&quot;">​</a></h3><p>sameVnode 其实很简单，只有当 key、 tag、 isComment（是否为注释节点）、 data 同时定义（或不定义），同时满足当标签类型为 input 的时候 type 相同（某些浏览器不支持动态修改<code>&lt;input&gt;</code>类型，所以他们被视为不同类型）即可。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    a.key </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> b.key </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    a.tag </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> b.tag </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    a.isComment </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> b.isComment </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">!!</span><span style="color:#E1E4E8;">a.data </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!!</span><span style="color:#E1E4E8;">b.data </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">sameInputType</span><span style="color:#E1E4E8;">(a, b)</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sameInputType</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (a.tag </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;input&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">typeA</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> a.data) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i.attrs) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> i.type;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">typeB</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> b.data) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i.attrs) </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> i.type;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> typeA </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> typeB;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="patchvnode-过程" tabindex="-1">patchVnode 过程 <a class="header-anchor" href="#patchvnode-过程" aria-label="Permalink to &quot;patchVnode 过程&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">oldVnode</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">vnode</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果新老VNode相同，直接返回</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldVnode </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> vnode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果都是静态node，并且key也相同，只要将 componentInstance 与 elm 从老 VNode 节点“拿过来”即可</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vnode.isStatic </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> oldVnode.isStatic </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> vnode.key </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> oldVnode.key) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    vnode.elm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldVnode.elm;</span></span>
<span class="line"><span style="color:#E1E4E8;">    vnode.componentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldVnode.componentInstance;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">elm</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (vnode.elm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldVnode.elm);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">oldCh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldVnode.children;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ch</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.children;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 新 VNode 节点是文本节点的时候，直接用 setTextContent 来设置 text</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// nodeOps是适配器，根据不同平台提供不同的操作平台 DOM 的方法，实现跨平台</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (vnode.text) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    nodeOps.</span><span style="color:#B392F0;">setTextContent</span><span style="color:#E1E4E8;">(elm, vnode.text);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// oldCh 与 ch 都存在且不相同时，使用 updateChildren 函数来更新子节点</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldCh </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> ch) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldCh </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> ch) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">updateChildren</span><span style="color:#E1E4E8;">(elm, oldCh, ch);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (ch) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 如果只有 ch 存在的时候，如果老节点是文本节点则先将节点的文本清除，然后将 ch 批量插入插入到节点elm下</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldVnode.text) nodeOps.</span><span style="color:#B392F0;">setTextContent</span><span style="color:#E1E4E8;">(elm, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">addVnodes</span><span style="color:#E1E4E8;">(elm, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, ch, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, ch.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldCh) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 同理当只有 oldch 存在时，说明需要将老节点通过 removeVnodes 全部清除</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">removeVnodes</span><span style="color:#E1E4E8;">(elm, oldCh, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, oldCh.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldVnode.text) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 当只有老节点是文本节点的时候，清除其节点文本内容。</span></span>
<span class="line"><span style="color:#E1E4E8;">      nodeOps.</span><span style="color:#B392F0;">setTextContent</span><span style="color:#E1E4E8;">(elm, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="updatechildren-逻辑" tabindex="-1">updateChildren 逻辑 <a class="header-anchor" href="#updatechildren-逻辑" aria-label="Permalink to &quot;updateChildren 逻辑&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateChildren</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">parentElm</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">oldCh</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">newCh</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 首先我们定义 oldStartIdx、newStartIdx、oldEndIdx 以及 newEndIdx 分别是新老两个 VNode 的两边的索引，同时 oldStartVnode、newStartVnode、oldEndVnode 以及 newEndVnode 分别指向这几个索引对应的 VNode 节点。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldStartIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldEndIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[oldEndIdx];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newStartIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newEndIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[newEndIdx];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> oldKeyToIdx, idxInOld, elmToMove, refElm;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">   * 接下来是一个 while 循环，在这过程中，oldStartIdx、newStartIdx、oldEndIdx 以及 newEndIdx 会逐渐向中间靠拢。</span></span>
<span class="line"><span style="color:#6A737D;">   */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (oldStartIdx </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> oldEndIdx </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> newStartIdx </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 当 oldStartVnode 或者 oldEndVnode 不存在的时候，oldStartIdx 与 oldEndIdx 继续向中间靠拢</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">oldStartVnode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">oldEndVnode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 首先是 oldStartVnode 与 newStartVnode 符合 sameVnode 时，说明老 VNode 节点的头部与新 VNode 节点的头部是相同的 VNode 节点，直接进行 patchVnode，同时 oldStartIdx 与 newStartIdx 向后移动一位。</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newStartVnode);</span></span>
<span class="line"><span style="color:#E1E4E8;">      oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">      newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 同样，两个 VNode 的结尾是相同的 VNode，同样进行 patchVnode 操作并将 oldEndVnode 与 newEndVnode 向前移动一位</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newEndVnode);</span></span>
<span class="line"><span style="color:#E1E4E8;">      oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">      newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">newEndIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newEndVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 当老 VNode 节点的头部与新 VNode 节点的尾部是同一节点的时候，将老VNode头部节点直接移动到老VNode尾部节点的后面即可。然后 oldStartIdx 向后移动一位，newEndIdx 向前移动一位。</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldStartVnode, newEndVnode);</span></span>
<span class="line"><span style="color:#E1E4E8;">      nodeOps.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        parentElm,</span></span>
<span class="line"><span style="color:#E1E4E8;">        oldStartVnode.elm,</span></span>
<span class="line"><span style="color:#E1E4E8;">        nodeOps.</span><span style="color:#B392F0;">nextSibling</span><span style="color:#E1E4E8;">(oldEndVnode.elm)</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">      oldStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">oldStartIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">      newEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">newEndIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 同理，当老VNode尾部节点与新 VNode头部节点是同一节点的时候，将老VNode尾部节点插入到老VNode头部节点前面。同样的，oldEndIdx 向前移动一位，newStartIdx 向后移动一位。</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(oldEndVnode, newStartVnode);</span></span>
<span class="line"><span style="color:#E1E4E8;">      nodeOps.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(parentElm, oldEndVnode.elm, oldStartVnode.elm);</span></span>
<span class="line"><span style="color:#E1E4E8;">      oldEndVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">oldEndIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">      newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">       * 最后是当以上情况都不符合的时候</span></span>
<span class="line"><span style="color:#6A737D;">       */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> elmToMove </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[idxInOld];</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">oldKeyToIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        oldKeyToIdx </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createKeyToOldIdx</span><span style="color:#E1E4E8;">(oldCh, oldStartIdx, oldEndIdx);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      idxInOld </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newStartVnode.key </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> oldKeyToIdx[newStartVnode.key] </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">idxInOld) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">createElm</span><span style="color:#E1E4E8;">(newStartVnode, parentElm);</span></span>
<span class="line"><span style="color:#E1E4E8;">        newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">      } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        elmToMove </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> oldCh[idxInOld];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">sameVnode</span><span style="color:#E1E4E8;">(elmToMove, newStartVnode)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">patchVnode</span><span style="color:#E1E4E8;">(elmToMove, newStartVnode);</span></span>
<span class="line"><span style="color:#E1E4E8;">          oldCh[idxInOld] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          nodeOps.</span><span style="color:#B392F0;">insertBefore</span><span style="color:#E1E4E8;">(parentElm, newStartVnode.elm, oldStartVnode.elm);</span></span>
<span class="line"><span style="color:#E1E4E8;">          newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">createElm</span><span style="color:#E1E4E8;">(newStartVnode, parentElm);</span></span>
<span class="line"><span style="color:#E1E4E8;">          newStartVnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">newStartIdx];</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (oldStartIdx </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> oldEndIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    refElm </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newCh[newEndIdx </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> newCh[newEndIdx </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">].elm </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">addVnodes</span><span style="color:#E1E4E8;">(parentElm, refElm, newCh, newStartIdx, newEndIdx);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (newStartIdx </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> newEndIdx) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">removeVnodes</span><span style="color:#E1E4E8;">(parentElm, oldCh, oldStartIdx, oldEndIdx);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * 产生 key 与 index 索引对应的一个 map 表</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createKeyToOldIdx</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">children</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">beginIdx</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">endIdx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i, key;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">map</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> beginIdx; i </span><span style="color:#F97583;">&lt;=</span><span style="color:#E1E4E8;"> endIdx; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> children[i].key;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isDef</span><span style="color:#E1E4E8;">(key)) map[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> map;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>patch 主要是在更新视图的时候，通过对比两个 VNode 来计算重新渲染的视图。</p><p>VNode 比较过程如下：</p><ol><li>如果旧的 VNode 不存在，则直接添加新的 VNode</li><li>如果新的 VNode 不存在，则删除旧的 VNode</li><li>如果都存在 <ol><li>如果是相同的 VNode，这进行 patch</li><li>如果是不同的 VNode，这删除旧的 VNode，再添加新的 VNode</li></ol></li></ol><p>patch 的过程如下：</p><ol><li>如果新旧 VNode 相同，直接返回</li><li>如果都是 static Node，则直接使用旧的 VNode</li><li>如果新 VNode 节点是文本节点的时候，直接用 setTextContent 来设置 text</li><li>当新 VNode 节点是非文本节点当时候，需要分几种情况： <ol><li>oldCh 与 ch 都存在且不相同时，使用 updateChildren 函数来更新子节点</li><li>如果只有 ch 存在的时候 <ol><li>如果老节点是文本节点，则先将节点的文本清除，然后将 ch 批量插入插入到节点 elm 下</li><li>如果老节点不是文本节点，oldCh 也不存在，这为空节点，直接将 ch 批量插入插入到节点 elm 下</li></ol></li><li>同理当只有 oldch 存在时，说明需要将老节点通过 removeVnodes 全部清除。</li><li>当只有老节点是文本节点的时候，清除其节点文本内容。</li></ol></li></ol><p>updateChildren 的逻辑如下：</p><ol><li>首先我们定义 oldStartIdx、newStartIdx、oldEndIdx 以及 newEndIdx 分别是新老两个 VNode 的两边的索引，同时 oldStartVnode、newStartVnode、oldEndVnode 以及 newEndVnode 分别指向这几个索引对应的 VNode 节点。</li><li>接下来是一个 while 循环，在这过程中，oldStartIdx、newStartIdx、oldEndIdx 以及 newEndIdx 会逐渐向中间靠拢。 <ol><li>当 oldStartVnode 或者 oldEndVnode 不存在的时候，oldStartIdx 与 oldEndIdx 继续向中间靠拢</li><li>首先是 oldStartVnode 与 newStartVnode 符合 sameVnode 时，说明老 VNode 节点的头部与新 VNode 节点的头部是相同的 VNode 节点，直接进行 patchVnode，同时 oldStartIdx 与 newStartIdx 向后移动一位。</li><li>同样，两个 VNode 的结尾是相同的 VNode，同样进行 patchVnode 操作并将 oldEndVnode 与 newEndVnode 向前移动一位</li><li>如果当老 VNode 节点的头部与新 VNode 节点的尾部是同一节点的时候，将老 VNode 头部节点直接移动到老 VNode 尾部节点的后面即可。然后 oldStartIdx 向后移动一位，newEndIdx 向前移动一位。</li><li>同理，当老 VNode 尾部节点与新 VNode 头部节点是同一节点的时候，将老 VNode 尾部节点插入到老 VNode 头部节点前面。同样的，oldEndIdx 向前移动一位，newStartIdx 向后移动一位。</li><li>最后是当以上情况都不符合的时候 <ol><li>根据 newStartVnode 的 key 获取到 idxInOld <ol><li>如果没有找到相同的节点（也就是旧的 node 里面不存在新的 node），则通过 createElm 创建一个新节点，并将 newStartIdx 向后移动一位。</li><li>如果找到了， <ol><li>如果符合 sameVnode，则将这两个节点进行 patchVnode，将该位置的老节点赋值 undefined，同时将 newStartVnode.elm 插入到 oldStartVnode.elm 的前面</li><li>如果不符合 sameVnode，只能创建一个新节点插入到 parentElm 的子节点中，newStartIdx 往后移动一位。</li></ol></li></ol></li><li>如果没有找到相同的节点，则通过 createElm 创建一个新节点，并将 newStartIdx 向后移动一位。</li></ol></li></ol></li></ol><p>过程对比查看：</p><ul><li><a href="https://github.com/aooy/blog/issues/2" target="_blank" rel="noreferrer">https://github.com/aooy/blog/issues/2</a></li><li><a href="https://www.cnblogs.com/wind-lanyan/p/9061684.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/wind-lanyan/p/9061684.html</a></li></ul><p><strong>最好用纸和笔画图，更易理解！</strong></p>`,25),e=[o];function E(t,c,r,y,d,i){return n(),a("div",null,e)}const h=s(p,[["render",E]]);export{V as __pageData,h as default};
