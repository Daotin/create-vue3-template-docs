import{_ as p,o,c as e,S as n,k as a,t}from"./chunks/framework.d5a27ec8.js";const u=JSON.parse('{"title":"template 如何转换成渲染函数的？","description":"","frontmatter":{},"headers":[],"relativePath":"vue2原理剖析/模版编译渲染原理/template如何转换成渲染函数的？.md","filePath":"vue2原理剖析/模版编译渲染原理/template如何转换成渲染函数的？.md","lastUpdated":1718873813000}'),E={name:"vue2原理剖析/模版编译渲染原理/template如何转换成渲染函数的？.md"};function c(l,s,r,i,y,d){return o(),e("div",null,[s[1]||(s[1]=n(`<h1 id="template-如何转换成渲染函数的" tabindex="-1">template 如何转换成渲染函数的？ <a class="header-anchor" href="#template-如何转换成渲染函数的" aria-label="Permalink to &quot;template 如何转换成渲染函数的？&quot;">​</a></h1><p>compile 编译可以分成 <code>parse</code>、<code>optimize</code> 与 <code>generate</code> 三个阶段，最终需要得到渲染函数 render function。</p><p>示例 template：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">:class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;c&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;demo&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-if</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;isShow&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">v-for</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;item in sz&quot;</span><span style="color:#E1E4E8;">&gt;{{item}}&lt;/</span><span style="color:#85E89D;">span</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="parse" tabindex="-1">parse <a class="header-anchor" href="#parse" aria-label="Permalink to &quot;parse&quot;">​</a></h2><p>parse 会用正则等方式将 template 模板中进行字符串解析，得到指令、class、style 等数据，形成 AST.</p><blockquote><p>AST 是抽象语法树（Abstract Syntax Tree）的缩写。它是在计算机科学中用于表示源代码语法结构的一种数据结构。在编译器和解释器中，AST 通常是从源代码生成的中间表示形式，用于进行后续的分析、优化和执行。</p></blockquote><p>这个过程比较复杂，会涉及到比较多的正则进行字符串解析，我们来看一下得到的 AST 的样子。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 标签属性的map，记录了标签上属性 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;attrsMap&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;:class&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;class&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;demo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&#39;v-if&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;isShow&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 解析得到的:class */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;classBinding&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;c&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 标签属性v-if */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;if&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;isShow&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* v-if的条件 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;ifConditions&#39;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;exp&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;isShow&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 标签属性class */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;staticClass&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;demo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 标签的tag */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 子标签数组 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;children&#39;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;attrsMap&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">&#39;v-for&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;item in sz&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">/* for循环的参数 */</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;alias&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;item&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">/* for循环的对象 */</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;for&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;sz&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">/* for循环是否已经被处理的标记位 */</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;forProcessed&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&#39;children&#39;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">                {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">/* 表达式，_s是一个转字符串的函数 */</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&#39;expression&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;_s(item)&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#9ECBFF;">&#39;text&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;{{item}}&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>正则的写法非常麻烦，这里略过。</p><p>然后继续。</p><h2 id="转化过程简单总结" tabindex="-1">转化过程简单总结 <a class="header-anchor" href="#转化过程简单总结" aria-label="Permalink to &quot;转化过程简单总结&quot;">​</a></h2><p>上面的 template 就是一个字符串：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> html </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&#39;&lt;div :class=&quot;c&quot; class=&quot;demo&quot; v-if=&quot;isShow&quot;&gt;&lt;span v-for=&quot;item in sz&quot;&gt;{{item}}&lt;/span&gt;&lt;/div&gt;&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><h3 id="parse-阶段" tabindex="-1">parse 阶段 <a class="header-anchor" href="#parse-阶段" aria-label="Permalink to &quot;parse 阶段&quot;">​</a></h3><ul><li>parse 阶段会定义很多复杂的正则，来匹配标签名，属性啊，标签开始，标签结束等等</li><li>还有一个 advance 函数，当匹配到字符串后，继续往下匹配的时候，会将上一个匹配的内容去掉</li></ul><p>开始循环遍历 template 字符串:</p><p>1、匹配开始标签：比如<code>&lt;div :class=&quot;c&quot; class=&quot;demo&quot; v-if=&quot;isShow&quot;&gt;</code>部分的内容</p><ul><li>如果匹配到开始标签，则获取 tagName，attrs 数组，和位置 start</li><li>然后一直匹配到第一个&quot;&gt;&quot;</li><li>还要维护一个 stack，来保存已经解析好的标签头，这样我们可以根据在解析尾部标签的时候得到所属的层级关系以及父标签。</li><li>在处理<code>v-if</code>和<code>v-for</code>是需要单独的 processIf 函数和 processFor 函数</li></ul><p>2、匹配结束标签：比如<code>&lt;/div&gt;</code>部分</p><ul><li>更新 stack：从 stack 栈中取出最近的跟自己标签名一致的那个元素</li></ul><p>3、解析标签中间的文本</p>`,22)),a("ul",null,[s[0]||(s[0]=a("li",null,"一种是普通的文本，直接构建一个节点 push 进",-1)),a("li",null,"还有一种情况是文本是如“"+t(l.item)+"”这样的 Vue.js 的表达式，需要用 parseText 来将表达式转化成代码",1)]),s[2]||(s[2]=n(`<h3 id="optimize" tabindex="-1">optimize <a class="header-anchor" href="#optimize" aria-label="Permalink to &quot;optimize&quot;">​</a></h3><p>optimize 就是为静态的节点做上一些「标记」，在 patch 的时候我们就可以直接跳过这些被标记的节点的比对，从而达到「优化」的目的。</p><ul><li><code>isStatic</code> 函数：判断该 node 是否是静态节点</li><li><code>markStatic</code>：为所有的节点标记上 static，遍历所有节点通过 isStatic 来判断当前节点是否是静态节点</li><li><code>markStaticRoots</code>：对特定的情况进行标记（如果当前节点是静态节点，同时满足该节点并不是只有一个文本节点（作者认为这种情况的优化消耗会大于收益），会标记 staticRoot 为 true）</li></ul><h3 id="generate" tabindex="-1">generate <a class="header-anchor" href="#generate" aria-label="Permalink to &quot;generate&quot;">​</a></h3><p>上面的 parse 和 optimize 后，我们会得到一个 js 类型的 AST，generate 会将 AST 转化成 render funtion 字符串。</p><ul><li><code>genIf</code>：处理 if 语法</li><li><code>genFor</code>： 处理 for 语法</li><li><code>genElement</code>：根据当前节点是否有 if 或者 for 标记然后判断是否要用 genIf 或者 genFor 处理，否则通过 genChildren 处理子节点</li><li><code>genChildren</code>：比较简单，遍历所有子节点，通过 genNode 处理后用“，”隔开拼接成字符串。</li><li><code>genNode</code>：则是根据 type 来判断该节点是用文本节点 genText 还是标签节点 genElement 来处理。</li></ul><p>经过 generate 处理后，就能生成 render function：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> isShow </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;div&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;staticClass&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;demo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;class&#39;</span><span style="color:#E1E4E8;">: c</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* begin */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">renderList</span><span style="color:#E1E4E8;">(sz, (</span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">VNode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;span&#39;</span><span style="color:#E1E4E8;">, {}, [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">createTextVNode</span><span style="color:#E1E4E8;">(item);</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]);</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* end */</span></span>
<span class="line"><span style="color:#E1E4E8;">  )) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createEmptyVNode</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>而 render function，这会进一步转换成 VNode。</p><h2 id="补充" tabindex="-1">补充 <a class="header-anchor" href="#补充" aria-label="Permalink to &quot;补充&quot;">​</a></h2><ul><li>vue-loader 是解析<code>.vue</code>文件，拆分出 template js css，template 由 <code>vue-template-compile</code> 编译。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>template 转换成渲染函数的过程如下：</p><ol><li>template 通过正则等手段生成 AST</li><li>优化 AST，对 AST 进行 static 静态打标，方便之后的 patch</li><li>根据优化后的 AST，调用各种处理函数生成 render function 渲染函数</li></ol>`,14))])}const m=p(E,[["render",c]]);export{u as __pageData,m as default};
