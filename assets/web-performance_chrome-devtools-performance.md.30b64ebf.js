import{_ as s,o as a,c as n,V as o}from"./chunks/framework.0e2b001c.js";const l="/fe-series-notes/assets/2023-08-17-11-10-34.fc4578ba.png",p="/fe-series-notes/assets/2023-08-17-13-38-18.bd5287fd.png",e="/fe-series-notes/assets/2023-08-17-13-41-57.d1f2b7ab.png",t="/fe-series-notes/assets/2023-08-17-13-49-11.0d6ba770.png",E="/fe-series-notes/assets/2023-08-17-14-45-04.dd0f397a.png",r="/fe-series-notes/assets/2023-08-18-10-08-00.89f2e004.png",c="/fe-series-notes/assets/2023-08-18-10-19-01.867ea482.png",y="/fe-series-notes/assets/2023-08-26-15-09-56.689a8812.png",q=JSON.parse('{"title":"Chrome DevTools Performance 分析运行时性能","description":"","frontmatter":{},"headers":[],"relativePath":"web-performance/chrome-devtools-performance.md","filePath":"web-performance/chrome-devtools-performance.md","lastUpdated":1694590771000}'),i={name:"web-performance/chrome-devtools-performance.md"},F=o('<h1 id="chrome-devtools-performance-分析运行时性能" tabindex="-1">Chrome DevTools Performance 分析运行时性能 <a class="header-anchor" href="#chrome-devtools-performance-分析运行时性能" aria-label="Permalink to &quot;Chrome DevTools Performance 分析运行时性能&quot;">​</a></h1><h2 id="面板介绍" tabindex="-1">面板介绍 <a class="header-anchor" href="#面板介绍" aria-label="Permalink to &quot;面板介绍&quot;">​</a></h2><p>chrome devtools 的 performance 面板，查看的是网页运行时（而不是加载时）的性能。</p><p>参考：<a href="https://juejin.cn/post/7204715616284082233" target="_blank" rel="noreferrer">https://juejin.cn/post/7204715616284082233</a></p><h2 id="分析结果" tabindex="-1">分析结果 <a class="header-anchor" href="#分析结果" aria-label="Permalink to &quot;分析结果&quot;">​</a></h2><h3 id="分析每秒帧数" tabindex="-1">分析每秒帧数 <a class="header-anchor" href="#分析每秒帧数" aria-label="Permalink to &quot;分析每秒帧数&quot;">​</a></h3><p>衡量任何动画性能的主要指标是每秒帧数 (FPS)。查看 FPS 图表。每当您看到 FPS 上方出现红色条时，就意味着帧速率下降得太低，可能会损害用户体验。一般来说，绿条越高，FPS 越高。</p><p>在 FPS 图表下方，您可以看到 CPU 图表。 CPU 图表中的颜色与“性能”面板底部的“摘要”选项卡中的颜色相对应。事实上，CPU 图表充满了颜色，这意味着 CPU 在录制过程中已达到极限。每当您看到 CPU 长时间处于最大负载时，就表明您需要寻找减少工作量的方法。</p><p><img src="'+l+'" alt=""></p><h2 id="找到瓶颈" tabindex="-1">找到瓶颈 <a class="header-anchor" href="#找到瓶颈" aria-label="Permalink to &quot;找到瓶颈&quot;">​</a></h2><p>1、先查看摘要选项卡。当未选择任何事件时，此选项卡将显示活动的详细信息。可以看到页面大部分时间都花在渲染上。因此目标是减少渲染工作所花费的时间。</p><p>2、展开主要（main）部分。DevTools 会显示主线程上随时间推移的活动火焰图。X 轴代表随时间推移的记录。每个条形图代表一个事件。较宽的条形图意味着该事件所需的时间更长。Y 轴代表调用堆栈。当您看到事件堆叠在一起时，意味着上层事件导致了下层事件发生。</p><blockquote><p>颜色区分：<a href="https://juejin.cn/post/7155350299295612941" target="_blank" rel="noreferrer">https://juejin.cn/post/7155350299295612941</a></p><p><code>灰色</code>就代表宏任务 task；<code>蓝色</code>的是 html 的 parse；<code>橙色</code>的是浏览器内部的 JS；<code>紫色</code>是样式的 reflow、repaint；<code>绿色</code>的部分就是渲染。其余的颜色都是用户 JS 的执行了，那些可以不用区分。</p></blockquote><blockquote><p>一些浏览器内部的函数，比如 parseHtml、evaluateScript 等，这些可以忽略</p></blockquote><p><img src="'+p+'" alt=""></p><blockquote><p>注意这个三角形，每当您看到红色三角形时，都表示警告可能存在与此事件相关的问题。</p></blockquote><p><img src="'+e+'" alt=""></p><p>3、单击该事件。摘要选项卡现在显示有关该事件的信息。请注意显示链接，单击该按钮会将您跳转到源代码中的相关行。</p><p><img src="'+t+'" alt=""></p><p>4、我们看到下面会导致<code>强制布局</code>的代码。我们在 requestAnimationFrame 方法的回调函数中，改变了样式，然后获取值。这会导致浏览器必须首先应用样式更改，然后运行布局，只有这样它才能返回正确的值。</p><blockquote><p>参考文章：<a href="https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/?utm_source=devtools#avoid-forced-synchronous-layouts" target="_blank" rel="noreferrer">https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/?utm_source=devtools#avoid-forced-synchronous-layouts</a></p></blockquote><p><img src="'+E+`" alt=""></p><h2 id="一个真实的优化案例" tabindex="-1">一个真实的优化案例 <a class="header-anchor" href="#一个真实的优化案例" aria-label="Permalink to &quot;一个真实的优化案例&quot;">​</a></h2><p>首先，我们准备这样一段代码：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;worker performance optimization&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">b</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          total </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b:&quot;</span><span style="color:#E1E4E8;">, total);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">c</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">d</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          total </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;c:&quot;</span><span style="color:#E1E4E8;">, total);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">c</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p>很明显，两个 script 标签是两个宏任务，第一个宏任务的调用栈是 a、b，第二个宏任务的调用栈是 c、d。</p><p>首先用无痕模式打开 chrome，无痕模式下没有插件，分析性能不会受插件影响。</p><p>打开 chrome devtools 的 Performance 面板，点击 reload 按钮，会重新加载页面并开始记录耗时：</p><p>主线程是不断执行 Event Loop 的，可以看到有两个 Task（宏任务），调用栈分别是 a、b 和 c、d，和我们分析的对上了。（当然，还有一些浏览器内部的函数，比如 parseHtml、evaluateScript 等，这些可以忽略）</p><p><strong>Performance 工具最重要的是分析主线程的 Event Loop，分析每个 Task 的耗时、调用栈等信息。</strong></p><p>每个函数的耗时也都显示在左侧，右侧有源码地址，点击就可以跳到 Sources 对应的代码。</p><p><img src="`+r+`" alt=""></p><p>点击查看代码后，很明显， b 和 d 两个函数的循环累加耗时太高了。</p><p>在 Performance 中也可以看到 Task 被标红了，下面的 summary 面板也显示了 long task 的警告。</p><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h3><p>我们优化的目标是把两个 long task 中的耗时逻辑（循环累加）给去掉或者拆分成多个 task。浏览器的 web worker 好像就是做耗时计算的性能优化的。</p><p>下面是改造后的代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// worker.js</span></span>
<span class="line"><span style="color:#B392F0;">onmessage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">num</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.data </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;runB&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> num; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      total </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">({ from: </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">, result: total });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.data </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;runD&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> total </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> num; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      total </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> i;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">({ from: </span><span style="color:#9ECBFF;">&quot;d&quot;</span><span style="color:#E1E4E8;">, result: total });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;worker performance optimization&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 创建一个 worker 实例</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> worker </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Worker</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./worker.js&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      worker.</span><span style="color:#B392F0;">onmessage</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.data.from </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;b&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;b:&quot;</span><span style="color:#E1E4E8;">, e.data.result);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (e.data.from </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;d&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;c:&quot;</span><span style="color:#E1E4E8;">, e.data.result);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        worker.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;runB&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">c</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        worker.</span><span style="color:#B392F0;">postMessage</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;runD&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">c</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="`+c+'" alt=""></p><p>完美，一个 long task 都没了。</p><p>就这样，我们一起完成了一次网页的性能优化，通过 Peformance 分析出 long task，定位到耗时代码，然后通过 worker 拆分计算量进行优化，成功消除了主线程的 long task。</p><p>参考：<a href="https://www.bmabk.com/index.php/post/110488.html" target="_blank" rel="noreferrer">https://www.bmabk.com/index.php/post/110488.html</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Performance 工具最重要的是分析主线程的 Event Loop，分析每个 Task 的耗时、调用栈等信息。</p><p><strong>性能优化的目标就是找到 Task 中的 long task，然后消除它。</strong></p><p>有同学可能会问：为什么要优化 long task 呢？</p><p>因为<a href="https://juejin.cn/post/7037839989018722340" target="_blank" rel="noreferrer">网页的渲染是一个宏任务</a>，和 JS 的宏任务在同一个 Event Loop 中，是相互阻塞的。如果 JS 有长时间执行的 Task，就会阻塞渲染，导致页面卡顿。所以，性能分析主要的目的是找到 long task，之后消除它。</p><p>其实会分析主线程的 Event Loop，会分析 Task 和 Task 的调用栈，找出 long task，并能定位到耗时的代码，Performance 工具就算是掌握了大部分了，常用的功能也就是这些。</p><h3 id="步骤" tabindex="-1">步骤 <a class="header-anchor" href="#步骤" aria-label="Permalink to &quot;步骤&quot;">​</a></h3><p>1、先找到 FPS 上方出现红色条的部分，就是我们要优化的地方</p><p>2、红色条的地方，也会对应下方的 long task</p><p>2、点击这个 long task，通过 Summary 选项卡或者 long task 调用栈宽度，找到耗时长的部分（是 JS 还是 Render 等）</p><p>3、结合 Summary 中提供的链接，定位到具体的问题代码。</p><blockquote><p>PS：如果是压缩的代码，可能还需要结合 sourcemap 进行查看。</p></blockquote><h3 id="个人理解" tabindex="-1">个人理解 <a class="header-anchor" href="#个人理解" aria-label="Permalink to &quot;个人理解&quot;">​</a></h3><blockquote><p>只适合页面操作时候卡顿的检测，不适合像首屏加载，页面加载卡顿的检测。</p></blockquote><p>我：chrome 有个 perfomance 的工具适合分析页面操作运行时候的性能问题，因为它需要录制一段时间，在这段时间进行页面操作，如果操作的过程中页面卡顿，这种就适合 perfomance 进行分析，但是对于首屏加载来说，不适合用 perfomance 来分析，不知道我的理解对不对？</p><p>GPT：你的理解是对的。Chrome 的 <code>Performance</code> 工具确实是为了分析页面在运行时的性能问题而设计的。它可以帮助开发者捕获页面在一段时间内的所有活动，包括渲染、脚本执行、网络请求等，从而找出可能导致页面卡顿或延迟的原因。</p><p>当你提到“首屏加载”，你可能是指页面从开始加载到首次内容绘制（First Contentful Paint，FCP）或者到首次有意义绘制（First Meaningful Paint，FMP）的时间。对于这种性能分析，<code>Performance</code> 工具也可以提供一些信息，但可能不如其他工具详细。例如，Chrome 的 <code>Lighthouse</code> 工具就是专门为了分析页面加载性能、可访问性、最佳实践等而设计的。</p><p>简而言之：</p><ul><li>如果你想分析页面在运行时的性能问题（例如滚动、动画、交互等导致的卡顿），那么 <code>Performance</code> 工具是很合适的。</li><li>如果你想分析页面的加载性能，尤其是首屏加载时间，那么 <code>Lighthouse</code> 可能会更有帮助。</li></ul><p>但是，这并不意味着你不能使用 <code>Performance</code> 工具来分析首屏加载。你可以在页面开始加载时立即开始录制，然后在首屏内容完全加载后停止录制，这样也可以得到首屏加载的性能数据。但 <code>Lighthouse</code> 为这种分析提供了更多的上下文和建议。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://developer.chrome.com/docs/devtools/performance" target="_blank" rel="noreferrer">https://developer.chrome.com/docs/devtools/performance</a></li><li><a href="https://developer.chrome.com/docs/devtools/performance-insights/" target="_blank" rel="noreferrer">https://developer.chrome.com/docs/devtools/performance-insights/</a></li><li><a href="https://cloud.tencent.com/developer/article/1878703" target="_blank" rel="noreferrer">Vue Devtools 界面说明</a></li><li><a href="https://juejin.cn/post/7149093181244571678" target="_blank" rel="noreferrer">https://juejin.cn/post/7149093181244571678</a></li></ul><h2 id="附加" tabindex="-1">附加 <a class="header-anchor" href="#附加" aria-label="Permalink to &quot;附加&quot;">​</a></h2><p>可以通过 Performance 更好的理清楚 Event Loop、宏微任务以及它们执行顺序问题。</p><p><img src="'+y+'" alt=""></p><p>参考文章：<a href="https://juejin.cn/book/7070324244772716556/section/7195729315693068299" target="_blank" rel="noreferrer">https://juejin.cn/book/7070324244772716556/section/7195729315693068299</a></p>',69),d=[F];function h(u,m,f,g,b,k){return a(),n("div",null,d)}const _=s(i,[["render",h]]);export{q as __pageData,_ as default};
