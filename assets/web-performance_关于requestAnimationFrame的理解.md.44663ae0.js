import{_ as s,o as e,c as a,V as n}from"./chunks/framework.ff44d2fd.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"web-performance/关于requestAnimationFrame的理解.md","filePath":"web-performance/关于requestAnimationFrame的理解.md","lastUpdated":1694590771000}'),o={name:"web-performance/关于requestAnimationFrame的理解.md"},l=n(`<p>Person:</p><ul><li>requestAnimationFrame() 方法是什么？作用是什么？</li></ul><p>ChatGPT:</p><p><code>requestAnimationFrame()</code> 是一个 JavaScript 的 API，用于请求浏览器在下一个重绘之前调用指定的函数来更新动画。其主要用途是为制作动画和游戏提供一个平滑、高效、节能的方法。</p><h3 id="为什么-requestanimationframe-是特别的" tabindex="-1">为什么 <code>requestAnimationFrame()</code> 是特别的？ <a class="header-anchor" href="#为什么-requestanimationframe-是特别的" aria-label="Permalink to &quot;为什么 \`requestAnimationFrame()\` 是特别的？&quot;">​</a></h3><ol><li><strong>性能优化</strong> ：传统的 JavaScript 动画经常使用 <code>setTimeout</code> 或 <code>setInterval</code> 进行控制，但这种方式不考虑浏览器的绘制机制，可能会导致动画卡顿或不流畅。<code>requestAnimationFrame()</code> 会将动画帧率限制为 60fps，与大多数现代显示器的刷新率相匹配，从而使动画更加平滑。</li><li><strong>节能</strong> ：如果用户标签页不在前台，<code>requestAnimationFrame()</code> 会自动暂停，从而降低 CPU 和 GPU 的使用，节省电池寿命。</li><li><strong>自动化帧率</strong> ：<code>requestAnimationFrame()</code> 会根据设备的性能和屏幕刷新率自动调整帧率，保证每一帧的时间间隔是最优的。</li></ol><h3 id="示例" tabindex="-1">示例： <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例：&quot;">​</a></h3><p>假设你想制作一个简单的动画，让一个元素在屏幕上从左到右移动：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">element</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;animatedElement&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">element.style.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;0px&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">step</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">timestamp</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">start) start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timestamp;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">progress</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> timestamp </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start;</span></span>
<span class="line"><span style="color:#E1E4E8;">  element.style.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">min</span><span style="color:#E1E4E8;">(progress </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;px&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (progress </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 动画持续2秒</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">requestAnimationFrame</span><span style="color:#E1E4E8;">(step);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">requestAnimationFrame</span><span style="color:#E1E4E8;">(step);</span></span></code></pre></div><p>在上述代码中，元素会在 2 秒内从左到右移动 200 像素。我们使用 <code>requestAnimationFrame()</code> 重复调用 <code>step</code> 函数直到动画结束。</p><p>总的来说，<code>requestAnimationFrame()</code> 是制作网页动画和游戏的强大工具，它提供了与浏览器绘制机制同步的方式来更新动画，使得动画更加平滑且性能更优。希望这个解释有助于你理解其概念和用途！如果你还有其他问题，欢迎随时提问。</p><p>Person:</p><ul><li>为什么重绘之前更新动画会使动画更加平滑？</li></ul><p>ChatGPT:</p><ul><li>为了更好地解释这一点，我们首先需要理解浏览器的渲染机制以及与动画相关的两个关键术语：“帧率”和“重绘”。</li></ul><ol><li><strong>帧率 (Frame Rate)</strong> ：帧率通常以“FPS”（每秒帧数）为单位表示。例如，60 FPS 表示每秒显示 60 帧。一般来说，当 FPS 达到或超过 60 时，大多数人的眼睛会认为动画是平滑的。</li><li><strong>重绘 (Repaint)</strong> ：当某些元素的外观（如颜色、大小等）发生变化但没有改变其布局时，浏览器需要更新或重新渲染这部分内容。这个过程叫做“重绘”。</li></ol><p>现在，考虑到大多数屏幕的刷新率是 60Hz，这意味着屏幕每秒刷新 60 次。为了使动画看起来平滑，最好确保每次屏幕刷新时，都有新的动画帧准备好显示。这就是为什么我们要在重绘之前更新动画帧的原因。</p><p>使用 <code>requestAnimationFrame()</code> 的好处是它与浏览器的重绘机制同步。这意味着：</p><ul><li>你的动画更新将与屏幕的刷新率对齐，从而最大程度地减少卡顿和跳帧现象。</li><li>如果你的动画或游戏的逻辑不能在 16.67 毫秒（即 1 秒/60）内完成，浏览器可以选择跳过某些帧来保持动画的平滑性。</li></ul><p>如果不使用 <code>requestAnimationFrame()</code>，并依赖 <code>setTimeout</code> 或 <code>setInterval</code> 来控制动画，那么你的动画更新可能与屏幕刷新不同步。这可能导致：</p><ul><li>动画出现卡顿。</li><li>浏览器进行额外的重绘，消耗更多的 CPU 和 GPU 资源。</li><li>动画的节奏可能不均匀，因为 <code>setTimeout</code> 或 <code>setInterval</code> 的实际回调时间可能会受到其他任务的影响。</li></ul><p>所以，为了使动画更加平滑，最佳的方法是在每次屏幕重绘之前更新动画帧，这正是 <code>requestAnimationFrame()</code> 所做的。希望这解释了你的疑问！</p><p>Person:</p><ul><li>也就是说使用 requestAnimationFrame 的时候，因为每次屏幕刷新时，动画有执行，并且都已经完成，这样就会很平滑。如果使用 setTimeout 或 setInterval ，可能屏幕刷新很多次，动画都没有执行，所以导致卡顿。这样理解对吗？</li></ul><p>ChatGPT:</p><ul><li>你的理解是基本正确的，但我想进一步澄清一些点。</li></ul><p>当你使用<code>requestAnimationFrame()</code>时：</p><ol><li>你是在告诉浏览器：“在下次重绘前，请执行这个动画帧的代码。”</li><li>这确保了每次屏幕刷新时，你的动画都已经准备好，与浏览器的重绘机制同步。</li></ol><p>而当你使用<code>setTimeout</code>或<code>setInterval</code>时：</p><ol><li>这些方法只是告诉浏览器：“在指定的延迟后，请执行这个函数。”但这与屏幕的实际刷新率无关。</li><li>你可能会遇到两种情况：</li></ol><ul><li>如果你设定的间隔太长，浏览器可能会在两次动画更新之间完成多次重绘，导致动画跳帧，看起来就像卡顿。</li><li>如果你设定的间隔太短，你可能会向浏览器请求比它能处理的更多的动画帧，导致浏览器工作过度，消耗更多资源，但实际效果并不会因为这样而更好。</li></ul><p>所以，总结一下，使用<code>requestAnimationFrame()</code>确保了动画与浏览器的重绘机制同步，使动画更加平滑。而使用<code>setTimeout</code>或<code>setInterval</code>来控制动画可能会导致与浏览器的重绘不同步，从而影响动画的平滑性。</p><p>你的理解是正确的，我只是尝试提供一个更完整的视角。希望这能帮助你更好地理解这个问题！</p><p>Person:</p><ul><li>哦我明白了，requestAnimationFrame 主要是解决 setTimeout 或者 setInterval 导致跳帧或者消耗更多资源的问题对吧？</li></ul><p>ChatGPT:</p><ul><li>是的，你说得对！</li></ul><p><code>requestAnimationFrame()</code> 主要是为了解决以下问题：</p><ol><li><strong>跳帧</strong> ：当使用 <code>setTimeout</code> 或 <code>setInterval</code> 时，你可能无法精确控制动画的节奏。这可能导致某些帧被跳过，从而使动画显得不平滑。但 <code>requestAnimationFrame()</code> 会与浏览器的重绘机制同步，确保动画的每一帧都在合适的时间被渲染。</li><li><strong>资源消耗</strong> ：如果你设定的时间间隔太短，使用 <code>setTimeout</code> 或 <code>setInterval</code> 可能会导致浏览器频繁地进行计算和渲染，即使这并不总是必要的，从而导致不必要的资源消耗。而 <code>requestAnimationFrame()</code> 只在浏览器准备好绘制新帧时调用函数，这样可以确保最佳的性能。</li><li><strong>节能</strong> ：当网页或标签不在前台时，<code>requestAnimationFrame()</code> 会自动暂停，从而减少 CPU 和 GPU 的负载并节省电池。</li></ol><p>所以，<code>requestAnimationFrame()</code> 不仅为开发者提供了一个更简单、更一致的方法来创建流畅的动画，而且还提高了性能和效率。</p><p>Person:</p><ul><li>我明白了，感谢您的解答。</li></ul><p>ChatGPT:</p><ul><li>不用谢，很高兴能帮助到你！如果你将来还有任何问题或需要进一步的澄清，请随时询问。祝你学习愉快！</li></ul>`,44),t=[l];function p(r,c,i,E,m,d){return e(),a("div",null,t)}const F=s(o,[["render",p]]);export{y as __pageData,F as default};
