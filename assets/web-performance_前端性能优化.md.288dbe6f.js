import{_ as e,o as l,c as o,V as i}from"./chunks/framework.ff44d2fd.js";const r="/fe-series-notes/assets/2023-08-19-10-04-27.a5f0cb7f.png",t="/fe-series-notes/assets/2023-08-19-10-25-30.9e75f169.png",a="/fe-series-notes/assets/2023-08-18-16-12-37.3ad8d240.png",_=JSON.parse('{"title":"前端性能优化","description":"","frontmatter":{},"headers":[],"relativePath":"web-performance/前端性能优化.md","filePath":"web-performance/前端性能优化.md","lastUpdated":1694590771000}'),n={name:"web-performance/前端性能优化.md"},s=i('<h1 id="前端性能优化" tabindex="-1">前端性能优化 <a class="header-anchor" href="#前端性能优化" aria-label="Permalink to &quot;前端性能优化&quot;">​</a></h1><blockquote><p>Update: 2023-08-18</p></blockquote><p>前端性能优化主要分下面几种场景：</p><ul><li><strong>页面加载性能</strong><ul><li><code>首屏加载优化</code>。减少首屏的加载时间。</li><li><code>单个页面加载优化</code>。减少单个界面的加载时间，这与首屏加载优化有些重叠，但更多地关注于页面内的所有资源和内容的加载，而不仅仅是首屏。</li></ul></li><li><strong>更新性能</strong><ul><li><code>页面运行时性能优化</code>。如果页面有一些操作，动画效果，跳转页面等有明显卡顿的需要优化。</li></ul></li></ul><h2 id="衡量指标" tabindex="-1">衡量指标 <a class="header-anchor" href="#衡量指标" aria-label="Permalink to &quot;衡量指标&quot;">​</a></h2><p>对于<code>页面加载性能</code>的衡量指标通常会用 Google 所定义的一系列 Web 指标 (Web Vitals) 来进行衡量，如最大内容绘制 (Largest Contentful Paint，缩写为 LCP) 和首次输入延迟 (First Input Delay，缩写为 FID)。</p><p>下面是比较推荐的指标数值：</p><p><img src="'+r+'" alt=""></p><blockquote><p><a href="https://juejin.cn/book/7070324244772716556/section/7071919962620690470" target="_blank" rel="noreferrer">详细 Web Vitals 如何计算？如何衡量网页性能？</a></p></blockquote><h2 id="如何分析" tabindex="-1">如何分析？ <a class="header-anchor" href="#如何分析" aria-label="Permalink to &quot;如何分析？&quot;">​</a></h2><p>为了提高性能，我们首先需要知道如何衡量它。在这方面，有一些很棒的工具可以提供帮助：</p><p><strong>一、用于本地开发期间的性能分析：</strong></p><p>1、打开浏览器的开发者工具，查看 <code>Network</code> 标签，优化首屏加载的资源。</p><ul><li>统计接口耗时，看是否是接口慢的原因？</li><li>哪些资源加载时间长？是不是有某些资源特别大或者加载时间特别长？</li><li>查看是否有不必要的大型库或资源被加载。例如，有没有加载整个库但只使用其中一小部分的情况？</li><li>图片、视频等媒体资源是否经过了优化？是否可以进一步压缩？</li></ul><p>2、用 <code>Vue Devtool</code> 记录组件耗时，看是否是组件耗时过长</p><p>3、Chrome 开发者工具“performance”面板</p><p>4、开启 <code>app.config.performance = true</code> 将会开启 Vue 特有的性能标记，标记在 Chrome 开发者工具的性能时间线上。</p><p><img src="'+t+'" alt=""></p><p><strong>二、用于生产部署的负载性能分析：</strong></p><ul><li><a href="https://pagespeed.web.dev/" target="_blank" rel="noreferrer">PageSpeed Insights</a></li><li><a href="https://www.webpagetest.org/" target="_blank" rel="noreferrer">WebPageTest</a></li><li>Lighthouse 性能分析工具</li></ul><h2 id="首屏加载优化" tabindex="-1">首屏加载优化 <a class="header-anchor" href="#首屏加载优化" aria-label="Permalink to &quot;首屏加载优化&quot;">​</a></h2><h3 id="通用前端优化" tabindex="-1">通用前端优化 <a class="header-anchor" href="#通用前端优化" aria-label="Permalink to &quot;通用前端优化&quot;">​</a></h3><blockquote><p>其他与 Vue 无关的通用优化手段，可以参考这份 <a href="https://web.dev/fast/" target="_blank" rel="noreferrer">web.dev 指南</a>提供了一个全面的总结。</p></blockquote><p><strong>1、文件压缩</strong></p><ul><li>JavaScript/CSS/HTML 文件 <ul><li>Gzip 压缩</li><li>代码分割</li><li>移除未使用的代码 Tree-shaking</li></ul></li><li>图片压缩 <ul><li>压缩 TinyPNG</li><li>格式优化 webp/svg</li><li>雪碧图</li><li>懒加载</li></ul></li></ul><p><strong>2、优化 HTTP 请求</strong></p><ul><li>图片懒加载</li><li>浏览器缓存</li><li>使用 CDN</li><li>DNS 缓存</li><li>使用 HTTP2/3</li><li>合并请求（雪碧图）</li><li>并发请求</li><li>本地存储（localStorage）</li><li>防抖和节流</li></ul><p><strong>3、代码执行效率</strong></p><ul><li>使用 Performance 标签，记录页面加载的性能时间线。查看哪些任务执行时间长，是否有可以优化的地方？</li><li>是否有不必要的计算或渲染在首屏加载时执行？</li><li>使用 Web Worker</li></ul><p><strong>4、渲染过程优化：</strong></p><ul><li>预加载 (Preload)：使用 <code>&lt;link rel=&quot;preload&quot; as=&quot;...&quot; href=&quot;...&quot;&gt;</code> 预加载关键资源。</li><li>预获取 (Prefetch)：预获取可能在未来需要的资源，但优先级较低。</li><li>减少 DOM 数量</li></ul><p><strong>5、对于一些第三方库，考虑使用更轻量级的替代方案。</strong></p><p><img src="'+a+'" alt=""></p><h3 id="vue-相关优化" tabindex="-1">Vue 相关优化 <a class="header-anchor" href="#vue-相关优化" aria-label="Permalink to &quot;Vue 相关优化&quot;">​</a></h3><p>1、包体积与 Tree-shaking 优化</p><ul><li>安装<code>rollup-plugin-visualizer</code>插件，该插件用于分析依赖大小占比。</li><li>使用按需引入的依赖（比如使用 lodash-es 替代 lodash）</li></ul><p>2、代码分割</p><blockquote><p>代码分割是指构建工具将构建后的 JavaScript 包拆分为多个较小的，可以按需或并行加载的文件。通过适当的代码分割，页面加载时需要的功能可以立即下载，而额外的块只在需要时才加载，从而提高性能。</p></blockquote><ul><li><p>Vue3 的异步组件</p><ul><li>路由懒加载：虽然没有使用 defineAsyncComponent，但是 vue-router 内部会为您处理这个懒加载部分，并使用 defineAsyncComponent 或相似的方法来确保组件在需要时才加载。</li><li>条件渲染的组件（侧边栏，弹框等）：不是始终在页面上显示的组件，而是基于某些条件才会显示的组件。这可能是由于用户的某些操作，或者基于应用的某些状态。</li></ul></li></ul><p>3、vite 配置优化</p><ul><li>optimizeDeps 预构建依赖</li><li><code>assetsInlineLimit: 4096</code>：静态资源配置，低于配置阈值内联成 base64 编码</li><li>对 manualChunks 进行了拆分优化</li><li>使用 terserOptions 去除 console 和 debugger</li><li><code>cssCodeSplit: true</code>：启用 css 动态拆分</li><li><code>chunkSizeWarningLimit: 500</code>：chunk 大小警告限制，避免打出过大的 chunk 包，影响请求速度。</li><li><code>vite-plugin-compression</code>：开启 gzip 或者 brotli 压缩。</li><li><code>vite-plugin-imagemin</code>：图片压缩工具，支持多种图片格式，配置压缩级别。</li><li>清除无用的 CSS：您可以考虑使用工具像 PurgeCSS 来清除未使用的 CSS，进一步减少文件大小。</li></ul><p>4、<a href="https://www.wolai.com/daotin/jLguSrAjNciqpWn9b4tj8n" target="_blank" rel="noreferrer">BlueLink 项目打包体积优化</a></p><h2 id="单个页面加载优化" tabindex="-1">单个页面加载优化 <a class="header-anchor" href="#单个页面加载优化" aria-label="Permalink to &quot;单个页面加载优化&quot;">​</a></h2><p>单个页面加载优化与首屏加载优化有许多相似之处，但也有一些特定的考虑因素。当我们谈论单个页面的优化时，我们通常关注的是<code>页面内部的交互</code>、<code>动态内容加载</code>、<code>动画效果</code>等。</p><p>先进行<a href="#首屏加载优化">首屏加载优化</a>，然后针对单个页面加载优化的一些建议和补充：</p><ol><li><p><strong>组件级优化</strong>：</p><ul><li>通过用可视化工具 vueDevtool 分析出耗性能的组件，然后带着目的去优化</li><li><strong>避免不必要的重新渲染</strong>：使用 Vue 的 <code>v-memo</code>、<code>computed</code> 属性或其他缓存策略。</li></ul></li><li><p><strong>动画和过渡效果</strong>：</p><ul><li><strong>使用 <code>requestAnimationFrame</code></strong>：确保动画的流畅性。</li><li><strong>避免强制同步布局</strong>：避免在动画中触发重排。</li><li><strong>使用 GPU 加速</strong>：使用 <code>transform</code> 和 <code>opacity</code> 进行动画，而不是 <code>margin</code>、<code>top</code> 等属性。</li></ul></li><li><p><strong>优化滚动性能</strong>：</p><ul><li><strong>使用虚拟列表</strong>：对于长列表，只渲染当前视口中的项。</li><li><strong>避免滚动时的复杂操作</strong>：如滚动监听中的高开销计算。</li></ul></li><li><p><strong>优化数据加载</strong>：</p><ul><li><strong>分页和无限滚动</strong>：不要一次加载过多数据，使用分页或无限滚动加载更多内容。</li><li><strong>骨架屏或占位符</strong>：在数据加载时显示，提供更好的用户体验。</li></ul></li><li><p><strong>优化图表和可视化</strong>：</p><ul><li><strong>按需渲染</strong>：只渲染视口中的图表或数据。</li><li><strong>使用轻量级库</strong>：如 Chart.js 替代 D3.js（如果不需要 D3 的高级功能）。</li></ul></li><li><p><strong>Web Workers</strong>：</p><ul><li>对于计算密集型任务，考虑在后台线程中执行，避免阻塞主线程。</li></ul></li><li><p><strong>优化嵌入的第三方内容</strong>：</p><ul><li><strong>延迟加载</strong>：如社交媒体插件、广告、地图等。</li><li><strong>使用轻量级替代方案</strong>：如使用静态地图图片替代完整的嵌入式地图。</li></ul></li><li><p><strong>监听事件优化</strong>：</p><ul><li><strong>事件委托</strong>：在父元素上监听事件，而不是每个子元素。</li><li><strong>避免不必要的事件监听</strong>：确保移除不再需要的事件监听器。</li></ul></li><li><p><strong>优化 DOM 操作</strong>：</p></li></ol><ul><li><strong>减少 DOM 查询</strong>：缓存 DOM 元素引用，避免频繁查询。</li><li><strong>批量 DOM 操作</strong>：一次性进行多个操作，避免触发多次重排或重绘。</li></ul><ol start="10"><li>多学习学习 vue 和 react 的设计思路，在我们的开发过程中如果遇到了同样的问题，可以参考这些开源组件的思想解决</li></ol><h2 id="页面运行时性能优化" tabindex="-1">页面运行时性能优化 <a class="header-anchor" href="#页面运行时性能优化" aria-label="Permalink to &quot;页面运行时性能优化&quot;">​</a></h2><p>通过<a href="./chrome-devtools-performance.html">chrome-devtools-performance</a> 录制一段操作过程进行分析和优化。</p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><ul><li><a href="https://www.wolai.com/daotin/jLguSrAjNciqpWn9b4tj8n" target="_blank" rel="noreferrer">BlueLink 项目打包体积优化</a></li><li><a href="https://www.yuque.com/lipengzhou/web-performance" target="_blank" rel="noreferrer">前端性能优化专栏</a> 密码：xa3i</li></ul>',52),p=[s];function c(u,d,g,h,m,f){return l(),o("div",null,p)}const k=e(n,[["render",c]]);export{_ as __pageData,k as default};
