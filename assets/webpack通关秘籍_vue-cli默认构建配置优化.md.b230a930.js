import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ff44d2fd.js";const p="/fe-series-notes/assets/img-20240529190535.f99de8d2.png",g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webpack通关秘籍/vue-cli默认构建配置优化.md","filePath":"webpack通关秘籍/vue-cli默认构建配置优化.md","lastUpdated":1717729889000}'),o={name:"webpack通关秘籍/vue-cli默认构建配置优化.md"},e=l(`<h2 id="通用前置操作" tabindex="-1">通用前置操作 <a class="header-anchor" href="#通用前置操作" aria-label="Permalink to &quot;通用前置操作&quot;">​</a></h2><blockquote><p>vue-cli5 和 vue-cli4 区别：</p><ul><li>都是使用的 vue2.6+</li><li>vue-cli4 使用的是 webpack4，vue-cli5 使用的是 webpack5</li></ul></blockquote><p>对于优化主要是两个方面</p><ul><li>构建速度</li><li>打包体积</li></ul><p>所以不管是分析问题还是解决问题有围绕这连个方面进行处理。</p><p><strong>Vue-Cli 自带</strong></p><ul><li><strong>cache-loader</strong> 会默认为 <code>Vue/Babel/TypeScript</code> 编译开启。文件会缓存在 <code>node_modules/.cache</code> 中。 如果你遇到了编译方面的问题，记得先清缓存目录之后再试试看。</li><li><strong>thread-loader</strong> 会在多核 CPU 的机器上为 <code>Babel/TypeScript</code> 转译开启。</li></ul><h3 id="查看-vue-cli-默认配置" tabindex="-1">查看 Vue-Cli 默认配置 <a class="header-anchor" href="#查看-vue-cli-默认配置" aria-label="Permalink to &quot;查看 Vue-Cli 默认配置&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">vue inspect --mode production &gt; output-prod.js</span></span>
<span class="line"><span style="color:#e1e4e8;">vue inspect --mode development &gt; output-dev.js</span></span></code></pre></div><p>然后通过 chatgpt 还原成 webpack 的配置：</p><blockquote><p>下面是通过 vue-cli 搭建的前端项目，通过 vue inspect 输出的被序列化的格式，请将其还原成原本的 webpack 配置文件，我的目的是了解 vue-cli 默认对 webpack 做了什么配置：</p></blockquote><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">{</span></span>
<span class="line"><span style="color:#e1e4e8;">  mode: &#39;production&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">  context: &#39;D:\\\\code\\\\hello-world-v4&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">  devtool: &#39;source-map&#39;,</span></span>
<span class="line"><span style="color:#e1e4e8;">  node: {</span></span>
<span class="line"><span style="color:#e1e4e8;">  ...</span></span>
<span class="line"><span style="color:#e1e4e8;">  }</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre></div><h3 id="分析构建时间" tabindex="-1">分析构建时间 <a class="header-anchor" href="#分析构建时间" aria-label="Permalink to &quot;分析构建时间&quot;">​</a></h3><p>安装：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install --save-dev speed-measure-webpack-plugin</span></span></code></pre></div><p>配置：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">SpeedMeasurePlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;speed-measure-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">chainWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;speed-measure-webpack-plugin&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(SpeedMeasurePlugin).</span><span style="color:#B392F0;">end</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h3 id="查看打包大小" tabindex="-1">查看打包大小 <a class="header-anchor" href="#查看打包大小" aria-label="Permalink to &quot;查看打包大小&quot;">​</a></h3><p>vue-cli 内置工具</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">vue-cli-service build --report</span></span></code></pre></div><p>成功后就会在项目目录下找到<code>/dist/report.html</code></p><p>和之前的 webpack-bundle-analyzer 效果一样，就没必要使用了。</p><h2 id="vue-cli4" tabindex="-1">vue-cli4 <a class="header-anchor" href="#vue-cli4" aria-label="Permalink to &quot;vue-cli4&quot;">​</a></h2><p>下面是还原的 production 下的 webpack 配置：<a href="./file/webpack-prod.js">webpack-prod.js</a></p><p>提升构建速度</p><blockquote><p>如果分析构建时间短，则不需要优化。</p></blockquote><h3 id="构建速度优化" tabindex="-1">构建速度优化 <a class="header-anchor" href="#构建速度优化" aria-label="Permalink to &quot;构建速度优化&quot;">​</a></h3><p><strong>1、并行构建</strong>：<a href="https://github.com/vuejs/vue-cli/tree/v4.5.19/docs/config#parallel" target="_blank" rel="noreferrer">已默认配置</a>（是否为 Babel 或 TypeScript 使用  <code>thread-loader</code>）</p><p><strong>2、并行压缩</strong>：从转换的代码可以看到 TerserPlugin 已默认配置 parallel</p><p><strong>3、开启缓存</strong>： - TerserPlugin 已默认配置 cache - loader 缓存：已经默认开启 vue-loader，babel-loader, eslint-loader，ts-loader 等缓存 - 使用 hard-source-webpack-plugin 配置持久化缓存功能 安装：<code>npm install hard-source-webpack-plugin -D</code> 配置：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HardSourceWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hard-source-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">configureWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 开启 HardSourceWebpackPlugin 构建缓存</span></span>
<span class="line"><span style="color:#6A737D;">     * HardSourceWebpackPlugin 的缓存机制依赖于文件系统中的缓存数据。</span></span>
<span class="line"><span style="color:#6A737D;">     * 如果在开发环境中生成的缓存数据由于某些原因被损坏或者不完整，可能会导致生产环境中的构建出现问题。所以在生产环境中不建议使用 HardSourceWebpackPlugin。</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config.plugins.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HardSourceWebpackPlugin</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">\`\`\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">缓存的默认路径为：\`</span><span style="color:#E1E4E8;">node_modules</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">.cache</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">hard</span><span style="color:#F97583;">-</span><span style="color:#B392F0;">source</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">开启前后使用npm run dev对比，速度明显减小（工程为vue-cli4默认构建的hello-word项目）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">| 项目/次数                     | 1     | 2     | 3     | 4     |</span></span>
<span class="line"><span style="color:#9ECBFF;">| ------------------------- | ----- | ----- | ----- | ----- |</span></span>
<span class="line"><span style="color:#9ECBFF;">| 不加HardSourceWebpackPlugin | 3.49s | 1.12s | 1.08s | 1.13s |</span></span>
<span class="line"><span style="color:#9ECBFF;">| 加HardSourceWebpackPlugin  | 2.46s | 0.27s | 0.29s | 0.77s |</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">&gt; vue-cli4默认没用生成vue.config.js，需要自己手动添加：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">模板：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9ECBFF;">\`\`\`</span><span style="color:#E1E4E8;">js</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">defineConfig</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@vue/cli-service&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// options...</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>会报错，因为<code>defineConfig</code> is used by Vue CLI 5 not by Vue CLI 4, the right syntax for vue cli 4:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// vue.config.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// options...</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><blockquote><p>[!warning] 关于<code>DllPlugin</code>，DllPlugin 是通过预编译特定的模块（通常是第三方库），将这些模块打包成独立的动态链接库 (DLL)，在主构建中只需要引用这些预编译的模块，从而大幅减少构建时间。</p><p>但是，如果已经使用 HardSourceWebpackPlugin 并且不考虑缓存失效的情况下，会将第三方依赖（如 React、Lodash 等）缓存到文件系统中。这样在后续的构建中，这些依赖的编译结果会直接从缓存中读取，因此无需重新编译这些依赖。在这种情况下，<code>DllPlugin</code> 的作用会有所减弱，因为 <code>HardSourceWebpackPlugin</code> 已经提供了类似的缓存功能。确实不再需要 DllPlugin。</p><p>而且，vue-cli 引入 webpack4 之后，移除了该包，&quot;因为 Webpack 4 的打包性能足够好的，dll 没有在 Vue ClI 里继续维护的必要了。&quot;</p><p><a href="https://github.com/vuejs/vue-cli/issues/1205" target="_blank" rel="noreferrer">dll option will be removed. Webpack 4 should provide good enough perf and the cost of maintaining DLL mode inside Vue CLI is no longer justified.</a></p></blockquote><blockquote><p>关于 thread-loader，并不是所有的 loader 都要使用：</p></blockquote><p>仅在耗时的操作中使用 thread-loader，否则使用 thread-loader 会后可能会导致项目构建时间变得更长，因为每个 worker 都是一个独立的 node.js 进程，其开销大约为 600ms 左右，同时还会限制跨进程的数据交换等。所以一般只在 babel-loader 中使用。</p><h3 id="减小打包体积" tabindex="-1">减小打包体积 <a class="header-anchor" href="#减小打包体积" aria-label="Permalink to &quot;减小打包体积&quot;">​</a></h3><p><strong>1、css tree shaking</strong></p><p>可以使用 purgecss 插件，但区别于 webpack 的配置，可以使用<a href="https://purgecss.com/guides/vue.html" target="_blank" rel="noreferrer">vue add 的方式</a>进行添加：</p><p>安装：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">vue add @fullhuman</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">purgecss@</span><span style="color:#F97583;">^</span><span style="color:#79B8FF;">3</span></span></code></pre></div><blockquote><p>[!warning] 注意 这里要添加版本 3，否则会报错：<code>Error: PostCSS plugin postcss-purgecss requires PostCSS 8.</code></p></blockquote><p>然后会自动生成并配置好 postcss.config.js，无需其他额外配置。</p><p><strong>2、gzip 压缩</strong></p><p>安装：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install compression-webpack-plugin@^6 --save-dev</span></span></code></pre></div><p>配置： 我 bulid 的时候报了<code>Cannot read property &#39;tapPromise&#39; of undefined</code>的错，其实就是版本和 vue-cli 的某些包不兼容，把 compression-webpack-plugin 的版本降低到<code>6</code>就可以了。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CompressionWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;compression-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">configureWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 在生产环境中使用 gzip 压缩</span></span>
<span class="line"><span style="color:#E1E4E8;">      config.plugins.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CompressionWebpackPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">          filename: </span><span style="color:#9ECBFF;">&#39;[path][base].gz&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 压缩后的文件名，默认值是 [path][base].gz</span></span>
<span class="line"><span style="color:#E1E4E8;">          algorithm: </span><span style="color:#9ECBFF;">&#39;gzip&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">(js</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">json</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">html</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">svg)</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          threshold: </span><span style="color:#79B8FF;">10240</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 对超过10k的数据压缩</span></span>
<span class="line"><span style="color:#E1E4E8;">          minRatio: </span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 压缩比</span></span>
<span class="line"><span style="color:#E1E4E8;">          deleteOriginalAssets: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否删除原始文件</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>nginx 中配置：</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">server</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">location</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;"> </span><span style="color:#DBEDFF;">.*\\.(js|json|css)$ </span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;"> gzip </span><span style="color:#E1E4E8;">on;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;"> gzip_static </span><span style="color:#E1E4E8;">on; </span><span style="color:#6A737D;"># 启用 gzip_static 选项</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;"> gzip_min_length </span><span style="color:#E1E4E8;">1k;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;"> gzip_http_version </span><span style="color:#E1E4E8;">1.1;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;"> gzip_comp_level </span><span style="color:#E1E4E8;">9;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;"> gzip_types </span><span style="color:#E1E4E8;"> text/css application/javascript application/json;</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#F97583;"> root </span><span style="color:#E1E4E8;">/home/tsgz/dist_hlj/; </span><span style="color:#6A737D;"># 修改为项目前端目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>查看效果： <img src="`+p+`" alt=""></p><p><strong>3、图片压缩</strong></p><p>安装：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">cnpm install image-webpack-loader -D</span></span></code></pre></div><blockquote><p><code>image-webpack-loader</code>  是需要配合  <code>file-loader</code>  来使用的。不过，Vue Cli 搭建的项目中已经内置了  <code>file-loader</code>  就不需要我们进行额外安装配置了！</p></blockquote><p>配置：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">chainWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 找到图片加载器并对其进行配置</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.module</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">rule</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;images&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;image-webpack-loader&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">loader</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;image-webpack-loader&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      .</span><span style="color:#B392F0;">options</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        mozjpeg: { progressive: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, quality: </span><span style="color:#79B8FF;">65</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        optipng: { enabled: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        pngquant: { quality: [</span><span style="color:#79B8FF;">0.65</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.9</span><span style="color:#E1E4E8;">], speed: </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        gifsicle: { interlaced: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        webp: { quality: </span><span style="color:#79B8FF;">75</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span></code></pre></div><blockquote><p>如果打包报错：Syntax Error: Error: Cannot find module &#39;imagemin-gifsicle&#39; 则使用 cnpm 安装。</p></blockquote><blockquote><p>[!danger] 目前只能压缩 jpg，如果引入了 png 则打包出错，原因未知。。。</p></blockquote><p><strong>4、动态 polyfill</strong></p><p>vue-cli 已经基于你的浏览器目标自动决定要运用的语法转换和 polyfill，无需我们配置： <a href="https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-babel-preset-app/README.md" target="_blank" rel="noreferrer">https://github.com/vuejs/vue-docs-zh-cn/blob/master/vue-babel-preset-app/README.md</a></p><p><strong>5、production 环境不生成 SourceMap</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  productionSourceMap: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p><strong>6、分离基础库使用 cdn</strong></p><blockquote><p>慎用，除非公司有稳定的 cdn 服务。</p></blockquote><p>不需要安装 html-webpack-externals-plugin，Vue CLI 自带的 <code>html-webpack-plugin</code> 已经足够用于我们的需求。</p><p>配置：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">configureWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.externals </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      vue: </span><span style="color:#9ECBFF;">&#39;Vue&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;vue-router&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;VueRouter&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      axios: </span><span style="color:#9ECBFF;">&#39;axios&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">chainWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.</span><span style="color:#B392F0;">plugin</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;html&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">tap</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      args[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].cdn </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        js: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.min.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;https://cdn.jsdelivr.net/npm/vue-router@3.5.1/dist/vue-router.min.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;https://cdn.jsdelivr.net/npm/axios@0.21.1/dist/axios.min.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">        css: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">      };</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> args;</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>修改 public/index.html,以便在生成的 HTML 文件中自动插入 CDN 链接：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;!</span><span style="color:#85E89D;">DOCTYPE</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">lang</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;en&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">charset</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">meta</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;viewport&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">content</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;width=device-width,initial-scale=1.0&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">%= htmlWebpackPlugin.options.title %&gt;&lt;/</span><span style="color:#85E89D;">title</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">% if (htmlWebpackPlugin.options.cdn &amp;&amp; htmlWebpackPlugin.options.cdn.css) { %&gt; </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">% for (var css of htmlWebpackPlugin.options.cdn.css) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    %&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">link</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rel</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;stylesheet&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#9ECBFF;">%= css %&gt;&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">% } %&gt; </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">% } %&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">head</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">noscript</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">strong</span></span>
<span class="line"><span style="color:#E1E4E8;">        &gt;We&#39;re sorry but </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">%= htmlWebpackPlugin.options.title %&gt; doesn&#39;t work properly without JavaScript enabled. Please enable it to</span></span>
<span class="line"><span style="color:#E1E4E8;">        continue.&lt;/</span><span style="color:#85E89D;">strong</span></span>
<span class="line"><span style="color:#E1E4E8;">      &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">noscript</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">% if (htmlWebpackPlugin.options.cdn &amp;&amp; htmlWebpackPlugin.options.cdn.js) { %&gt; </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">% for (var js of htmlWebpackPlugin.options.cdn.js) { %&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">src</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;&lt;%= js %&gt;&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">% } %&gt; </span><span style="color:#FDAEB7;font-style:italic;">&lt;</span><span style="color:#E1E4E8;">% } %&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">html</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>7、删除 console.log</strong></p><p>安装：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install terser-webpack-plugin@^4 --save-dev</span></span></code></pre></div><p>配置：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">TerserPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;terser-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">configureWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config.optimization.minimizer </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> config.optimization.minimizer </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">      config.optimization.minimizer.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TerserPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">          terserOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            compress: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              drop_console: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 移除生产环境的 console.log</span></span>
<span class="line"><span style="color:#E1E4E8;">              drop_debugger: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 移除生产环境的 debugger</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">            output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              comments: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 删除所有注释</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        })</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h3 id="其他友好配置" tabindex="-1">其他友好配置 <a class="header-anchor" href="#其他友好配置" aria-label="Permalink to &quot;其他友好配置&quot;">​</a></h3><p><strong>1、chunk-vendors 分包</strong></p><p>配置：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">chainWebpack</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.optimization.</span><span style="color:#B392F0;">splitChunks</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunks: </span><span style="color:#9ECBFF;">&#39;all&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 表明选择哪些 chunk 进行优化。通用设置，可选值：all/async/initial。设置为 all 意味着 chunk 可以在异步和非异步 chunk 之间共享。</span></span>
<span class="line"><span style="color:#E1E4E8;">      minSize: </span><span style="color:#79B8FF;">20000</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 允许新拆出 chunk 的最小体积</span></span>
<span class="line"><span style="color:#E1E4E8;">      maxAsyncRequests: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 每个异步加载模块最多能被拆分的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">      maxInitialRequests: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 每个入口和它的同步依赖最多能被拆分的数量</span></span>
<span class="line"><span style="color:#E1E4E8;">      enforceSizeThreshold: </span><span style="color:#79B8FF;">50000</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 强制执行拆分的体积阈值并忽略其他限制</span></span>
<span class="line"><span style="color:#E1E4E8;">      cacheGroups: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        libs: { </span><span style="color:#6A737D;">// 第三方库</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&#39;chunk-libs&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 请注意&#39;[\\\\/]&#39;的用法，是具有跨平台兼容性的路径分隔符</span></span>
<span class="line"><span style="color:#E1E4E8;">          priority: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 优先级，执行顺序就是权重从高到低</span></span>
<span class="line"><span style="color:#E1E4E8;">          chunks: </span><span style="color:#9ECBFF;">&#39;initial&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 只打包最初依赖的第三方</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        elementUI: { </span><span style="color:#6A737D;">// 把 elementUI 单独分包</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&#39;chunk-elementUI&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#DBEDFF;">element-ui</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          priority: </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 权重必须比 libs 大，不然会被打包进 libs 里</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        commons: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&#39;chunk-commons&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          minChunks: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 拆分前，这个模块至少被不同 chunk 引用的次数</span></span>
<span class="line"><span style="color:#E1E4E8;">          priority: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          reuseExistingChunk: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        svgIcon: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&#39;chunk-svgIcon&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 函数匹配示例，把 svg 单独拆出来</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// \`module.resource\` 是文件的绝对路径</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 用\`path.sep\` 代替 / or \\，以便跨平台兼容</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// const path = require(&#39;path&#39;) // path 一般会在配置文件引入，此处只是说明 path 的来源，实际并不用加上</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.resource </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.resource.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;.svg&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.resource.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">path</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">sep</span><span style="color:#9ECBFF;">}icons\${</span><span style="color:#E1E4E8;">path</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">sep</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            )</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">          priority: </span><span style="color:#79B8FF;">30</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p><strong>2、IgnorePlugin</strong>：忽略指定的模块或文件，通常用于如果引入了 moment.js，则忽略其他的语言包，另外我通常会在项目中新建 demo 模板，也可以使用<code>IgnorePlugin</code>忽略测试文件。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">webpack</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;webpack&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">configureWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.plugins.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> webpack.</span><span style="color:#B392F0;">IgnorePlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        resourceRegExp:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">src</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">views</span><span style="color:#85E89D;font-weight:bold;">\\/</span><span style="color:#DBEDFF;">demo</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 匹配要忽略的资源路径</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p><strong>3、resolve.alias</strong> resolve.alias 是用于创建 import 或 require 的别名，来确保模块引入变得更简单：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">chainWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 配置别名</span></span>
<span class="line"><span style="color:#E1E4E8;">  config.resolve.alias</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@build&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">pathResolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../build&#39;</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// 构建目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">pathResolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../src&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@api&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">pathResolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../src/api&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@utils&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">pathResolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../src/utils&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;@views&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">pathResolve</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;../src/views&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p><strong>4、去掉 preload 和 prefetch</strong></p><p>preload：在页面加载时立即下载，优先级高。 prefetch：在浏览器空闲时下载，优先级低。</p><p>但是如果引入的资源过多，会占用大量带宽，导致其他关键资源（如 CSS 和主 JavaScript 文件）的下载速度变慢，prefetch 虽然在空闲时间下载，但是依然会有影响。</p><p>所以，尽管 <code>preload</code> 在某些情况下可以显著提升页面性能，但如果没有精细管理和选择性使用，全部加入 <code>preload</code> 可能会适得其反。因此，综合考虑性能和简化配置，全部去掉 <code>preload</code> 会是更安全和更通用的选择。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">chainWebpack</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.plugins.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;prefetch&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    config.plugins.</span><span style="color:#B392F0;">delete</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;preload&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h4 id="全量配置" tabindex="-1">全量配置 <a class="header-anchor" href="#全量配置" aria-label="Permalink to &quot;全量配置&quot;">​</a></h4><p>参考：<a href="https://github.com/staven630/vue-cli4-config" target="_blank" rel="noreferrer">https://github.com/staven630/vue-cli4-config</a></p><h2 id="vue-cli5" tabindex="-1">vue-cli5 <a class="header-anchor" href="#vue-cli5" aria-label="Permalink to &quot;vue-cli5&quot;">​</a></h2><p>在处理之前，先比较下，vue-cli4 生成的 webpack 配置和 vue-cli5 生成的 webpack 配置的区别：</p><p>在提升打包速度和减小打包体积上，Vue CLI 4 和 Vue CLI 5 的配置文件有一些明显的区别。以下是详细的列举：</p><p>一、构建速度方面</p><ol><li><strong>TerserPlugin 的配置差异</strong>: <ul><li><strong>Vue CLI 4</strong>:<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TerserPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  terserOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    compress: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/* many options */</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    mangle: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      safari10: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  sourceMap: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  cache: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  parallel: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  extractComments: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div></li><li><strong>Vue CLI 5</strong>:<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TerserPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  terserOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    compress: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/* many options */</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    mangle: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      safari10: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  parallel: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  extractComments: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div>Vue CLI 5 移除了 <code>sourceMap</code> 和 <code>cache</code> 配置，这可以在某些情况下提升打包速度，因为生成 source map 和缓存处理可能会增加额外的时间。</li></ul></li></ol><p>在 Webpack 4 中，由于没有内置的高级缓存机制，使用 TerserPlugin 的 <code>cache</code> 选项可以显著提升压缩过程中的性能。而在 Webpack 5 中，由于有了内置的持久化缓存机制，就不再需要单独在 TerserPlugin 中配置 <code>cache</code> 选项。</p><p>在 vue-cli 5 中，<code>cache</code>  会在<a href="https://webpack.docschina.org/configuration/mode/#mode-development" target="_blank" rel="noreferrer"><code>开发</code>  模式</a>被设置成  <code>type: &#39;memory&#39;</code>  而且在  <a href="https://webpack.docschina.org/configuration/mode/#mode-production" target="_blank" rel="noreferrer"><code>生产</code>  模式</a>  中被禁用。</p><p>memory 意味着缓存数据会存储在内存中，重启构建工具后缓存会丢失。</p><ol start="2"><li><strong>插件变化</strong>: <ul><li><strong>Vue CLI 4</strong> 使用了 <code>OptimizeCssnanoPlugin</code> 来压缩 CSS，且未提及并行处理。</li><li><strong>Vue CLI 5</strong> 使用了 <code>CssMinimizerPlugin</code>，并启用了并行处理：<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CssMinimizerPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  parallel: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  minimizerOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    preset: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        mergeLonghand: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        cssDeclarationSorter: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div>启用并行处理可以显著提升 CSS 压缩的速度。</li></ul></li></ol><p>主要区别：</p><ul><li><strong>并行处理</strong>: <code>CssMinimizerPlugin</code> 支持并行处理，而 <code>OptimizeCssnanoPlugin</code> 不支持。这使得 <code>CssMinimizerPlugin</code> 在处理大规模 CSS 文件时具有更好的性能。</li><li><strong>集成度</strong>: <code>CssMinimizerPlugin</code> 专为 Webpack 5 设计，能更好地利用 Webpack 5 的新特性和优化机制。而 <code>OptimizeCssnanoPlugin</code> 更适合于 Webpack 4 及之前的版本。</li><li><strong>配置简洁性</strong>: <code>CssMinimizerPlugin</code> 的配置更简洁，并且内置了许多优化，减少了手动配置的复杂度。</li><li><strong>维护与更新</strong>: <code>CssMinimizerPlugin</code> 是 Webpack 官方推荐的插件，更新和维护更加及时，适配新版本的 Webpack 更加迅速。</li></ul><ol start="3"><li><strong>hashFunction 的使用</strong>: <ul><li><strong>Vue CLI 5</strong> 在 <code>output</code> 中使用了更高效的哈希函数 <code>xxhash64</code>，这有助于提升生成哈希值的速度。<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">output</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">hashFunction</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;xxhash64&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// other options</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ol><p>二、打包体积方面</p><ol><li><p><strong>CSS 压缩插件的差异</strong>:</p><ul><li><strong>Vue CLI 4</strong> 使用 <code>OptimizeCssnanoPlugin</code> 来压缩 CSS。</li><li><strong>Vue CLI 5</strong> 使用 <code>CssMinimizerPlugin</code>，默认的配置同样通过 <code>cssnano</code> 进行压缩，但配置了 <code>mergeLonghand: false</code> 和 <code>cssDeclarationSorter: false</code> 来避免某些长声明合并和 CSS 声明排序的问题，这些设置可以确保在最小化体积的同时，不影响 CSS 的兼容性和性能。</li></ul></li><li><p><strong>splitChunks 配置的改进</strong>:</p><ul><li>两者在 <code>splitChunks</code> 配置上大致相似，但 Vue CLI 5 默认禁用了 <code>realContentHash</code>：<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">optimization</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">realContentHash</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">splitChunks</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">cacheGroups</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// configurations</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// other options</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>这可以减少生成文件的体积，因为 <code>realContentHash</code> 的启用会增加额外的哈希计算，从而增大文件体积。</li></ul></li><li><p><strong>移除了未使用的插件</strong>:</p><ul><li>Vue CLI 5 移除了 <code>HashedModuleIdsPlugin</code>，这一插件用于生成稳定的模块 ID，但也会增加额外的哈希计算和模块大小。</li></ul></li></ol><h3 id="构建速度优化-1" tabindex="-1">构建速度优化 <a class="header-anchor" href="#构建速度优化-1" aria-label="Permalink to &quot;构建速度优化&quot;">​</a></h3><p>terser-webpack-plugin 在 v5 弃用了 cache 选项。而且在 Webpack 5 中，一般不再需要使用 <code>hard-source-webpack-plugin</code>，因为 Webpack 5 本身已经内置了强大的<code>cache</code>缓存功能，能够提供与 <code>hard-source-webpack-plugin</code> 类似的缓存效果。</p><p>所以，构建速度优化方面无需任何额外配置。</p><h3 id="减小打包体积-1" tabindex="-1">减小打包体积 <a class="header-anchor" href="#减小打包体积-1" aria-label="Permalink to &quot;减小打包体积&quot;">​</a></h3><p><strong>1、css tree shaking</strong>：依然需要</p><p><strong>2、gzip 压缩</strong>：依然需要</p><p><strong>3、图片压缩</strong>：依然需要（在 webpack4 中使用的是<code>image-webpack-loader</code>，但是一直报错，也没有其他的选择，但是 webpack5 中可以使用官方的<a href="https://webpack.js.org/plugins/image-minimizer-webpack-plugin/" target="_blank" rel="noreferrer"><code>ImageMinimizerWebpackPlugin</code></a>）</p><p>安装：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">\`npm install image-minimizer-webpack-plugin imagemin imagemin-mozjpeg imagemin-pngquant imagemin-svgo --save-dev\`</span></span></code></pre></div><blockquote><p>imagemin-mozjpeg 安装失败，可以使用 cnpm 安装。</p></blockquote><blockquote><p>[!bug] 自己尝试后，依然无法安装。。。</p></blockquote><p>算了，不如找个在线压缩网站，每过一段时间进行压缩处理：<a href="https://imagecompressor.com/zh/" target="_blank" rel="noreferrer">https://imagecompressor.com/zh/</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>如果是 vue-cli4/5 搭建的项目，需要配置：</p><ul><li>构建缓存（<strong>只有 4 需要，且热更新耗时才需要</strong>）：hard-source-webpack-plugin</li><li>css treeshaking：<code>@fullhuman/purgecss@^3</code></li><li>打包压缩：<code>compression-webpack-plugin@^6</code></li><li>图片压缩</li><li>生产环境关闭 sourcemap</li><li>删除 console.log</li><li>去掉 preload 和 prefetch</li></ul>`,119),c=[e];function t(E,r,i,y,u,d){return n(),a("div",null,c)}const h=s(o,[["render",t]]);export{g as __pageData,h as default};
