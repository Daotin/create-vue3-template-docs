import{_ as s,o as n,c as a,V as l}from"./chunks/framework.ff44d2fd.js";const p="/fe-series-notes/assets/img-20240513110552.72887129.png",o="/fe-series-notes/assets/img-20240513130540-1.ecaf9584.png",e="/fe-series-notes/assets/img-20240513130549.34cfec33.png",c="/fe-series-notes/assets/img-20240513130585.62c5cdee.png",t="/fe-series-notes/assets/img-20240513130503.fd0c0134.png",E="/fe-series-notes/assets/img-20240516150584.8defde29.png",r="/fe-series-notes/assets/img-20240516150561.41fe2a85.png",y="/fe-series-notes/assets/img-20240516150506.2ea06619.png",i="/fe-series-notes/assets/img-20240517100597.96db922e.png",F="/fe-series-notes/assets/img-20240517100557.e927ae26.png",d="/fe-series-notes/assets/img-20240517100513.47b1e82a.png",u="/fe-series-notes/assets/img-20240517110506.bb9a93bf.png",q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webpack通关秘籍/webpack常用配置.md","filePath":"webpack通关秘籍/webpack常用配置.md","lastUpdated":1715928281000}'),h={name:"webpack通关秘籍/webpack常用配置.md"},g=l(`<h2 id="entry" tabindex="-1">entry <a class="header-anchor" href="#entry" aria-label="Permalink to &quot;entry&quot;">​</a></h2><p>指定 webpack 的打包⼊⼝</p><p>单⼊⼝：entry 是⼀个字符串, 多⼊⼝：entry 是⼀个对象</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./path/to/my/entry/file.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    app: </span><span style="color:#9ECBFF;">&#39;./src/app.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    adminApp: </span><span style="color:#9ECBFF;">&#39;./src/adminApp.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="output" tabindex="-1">output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;output&quot;">​</a></h2><p>告诉 webpack 如何将编译后的⽂件输出到磁盘。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	entry: </span><span style="color:#9ECBFF;">&#39;./path/to/my/entry/file.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		filename: </span><span style="color:#9ECBFF;">&#39;bundle.js’</span><span style="color:#FDAEB7;font-style:italic;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		path: __dirname </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/dist&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 多出口配置</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	entry: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		app: </span><span style="color:#9ECBFF;">&#39;./src/app.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		search: </span><span style="color:#9ECBFF;">&#39;./src/search.js&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	},</span></span>
<span class="line"><span style="color:#E1E4E8;">	output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">		filename: </span><span style="color:#9ECBFF;">&#39;[name].js&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 通过占位符确保文件名称唯一</span></span>
<span class="line"><span style="color:#E1E4E8;">		path: __dirname </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;/dist&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="loaders" tabindex="-1">loaders <a class="header-anchor" href="#loaders" aria-label="Permalink to &quot;loaders&quot;">​</a></h2><p>webpack 开箱即用只支持 JS 和 JSON 两种文件类型，通过 Loaders 去支持其它文件类型并且把它们转化成有效的模块，并且可以添加到依赖图中。</p><p>本身是一个函数，接受源文件作为参数，返回转换的结果。</p><p>语法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      { test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">txt</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, use: </span><span style="color:#9ECBFF;">&#39;raw-loader&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#6A737D;">// 需要先npm i raw-loader -D</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;plugins&quot;">​</a></h2><p>插件⽤于 bundle ⽂件的优化，资源管理和环境变量注⼊,作⽤于整个构建过程。</p><p>比如打包前，删除 dist 目录，自动生成 dist 下 html 文件等一些不属于 loader 做的事情。</p><p>用法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;">({ template: </span><span style="color:#9ECBFF;">&#39;./src/index.html&#39;</span><span style="color:#E1E4E8;"> })],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h3 id="常用-loader-和-plugin-配置" tabindex="-1">常用 loader 和 plugin 配置 <a class="header-anchor" href="#常用-loader-和-plugin-配置" aria-label="Permalink to &quot;常用 loader 和 plugin 配置&quot;">​</a></h3><blockquote><p>==注意：这些 loader 都需要先经过 npm i 安装！==</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 解析 ES6</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: </span><span style="color:#9ECBFF;">&#39;babel-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// css-loader ⽤于加载 .css ⽂件，并且转换成 commonjs 对象导出</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// style-loader 将导出的样式通过 &lt;style&gt; 标签插⼊到 head 中</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// loader加载的顺序是右边先执行！</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span><span style="color:#9ECBFF;">&#39;style-loader&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 解析less</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">less</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span><span style="color:#9ECBFF;">&#39;style-loader&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;less-loader&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 解析图片，字体首选url-loader或者file-loader，url-loader比file-loader多了options配置，可以设置较⼩资源⾃动 base64</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">(png</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">svg</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">jpg</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">gif)</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// test: /\\.woff|woff2|eot|ttf|otf)$/</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: </span><span style="color:#9ECBFF;">&#39;url-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              limit: </span><span style="color:#79B8FF;">10240</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 10kB</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><blockquote><p>babel-loader 需要配置<code>.babelrc</code>：</p></blockquote><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;presets&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;@babel/preset-env&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 一个配置集合</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;plugins&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;@babel/proposal-class-properties&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 单独的配置</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="文件监听" tabindex="-1">文件监听 <a class="header-anchor" href="#文件监听" aria-label="Permalink to &quot;文件监听&quot;">​</a></h2><p>两种方式：</p><ul><li>启动 webpack 命令时，带上 --watch 参数</li><li>在配置 webpack.config.js 中设置 watch: true</li></ul><p>缺点：页面需要手动刷新。</p><p>原理：<strong>轮询判断⽂件的最后编辑时间是否变化。如果某个⽂件发⽣了变化，并不会⽴刻告诉监听者，⽽是先缓存起来，等 aggregateTimeout。</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.export </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//默认 false，也就是不开启</span></span>
<span class="line"><span style="color:#E1E4E8;">  watch: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//只有开启监听模式时，watchOptions才有意义</span></span>
<span class="line"><span style="color:#E1E4E8;">  wathcOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//默认为空，不监听的文件或者文件夹，支持正则匹配</span></span>
<span class="line"><span style="color:#E1E4E8;">    ignored:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//监听到变化发生后会等300ms再去执行，默认300ms</span></span>
<span class="line"><span style="color:#E1E4E8;">    aggregateTimeout: </span><span style="color:#79B8FF;">300</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的，默认每秒问1000次</span></span>
<span class="line"><span style="color:#E1E4E8;">    poll: </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="热更新" tabindex="-1">热更新 <a class="header-anchor" href="#热更新" aria-label="Permalink to &quot;热更新&quot;">​</a></h2><p>webpack-dev-server 优点：</p><ul><li>不需要手动刷新页面</li><li>文件修改后的编译不输出文件到硬盘，而是到内存，速度更快</li></ul><p>使用方式：使⽤ webpack 内置 HotModuleReplacementPlugin 插件，不需要额外安装。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">webpack</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;webpack&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> webpack.</span><span style="color:#B392F0;">HotModuleReplacementPlugin</span><span style="color:#E1E4E8;">()],</span></span>
<span class="line"><span style="color:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    contentBase: </span><span style="color:#9ECBFF;">&#39;./dist&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// webpack-dev-server服务的目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    hot: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 开启热更新</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>另外，还有一个<code>webpack-dev-middleware</code>也可以热更新，当后端使用的是 Express 或另一个 Node.js 框架作为你的服务器，可以将 <code>webpack-dev-middleware</code> 集成到现有的 Node.js 服务器中，这样就不需要运行一个额外的服务器（如 <code>webpack-dev-server</code>）来处理前端的热更新。</p><p>但是，由于是前后端分离开发，专门让后端搞一个对后端来说没用的东西也不太合理，除非是前后端都是一个人开发。</p><p>所以，最好的选择还是 webpack-dev-server。</p><h3 id="热更新原理" tabindex="-1">热更新原理 <a class="header-anchor" href="#热更新原理" aria-label="Permalink to &quot;热更新原理&quot;">​</a></h3><p>首先来看看一张图，如下：</p><p><img src="`+p+'" alt=""></p><p>几个概念：</p><ul><li><code>Webpack Compile</code>：将 JS 源代码编译成 bundle.js</li><li><code>HMR Server</code>：websocket 服务端，用来将热更新后的文件输出给 HMR Runtime</li><li><code>Bundle Server</code>：静态资源文件服务器，提供文件访问路径</li><li><code>HMR Runtime</code>：websocket 客户端，会被注入到浏览器，监听服务端更新文件的消息（在 HMR Runtime 和 HMR Server 之间建立 websocket，即图上 4 号线，用于实时更新文件变化）</li><li><code>bundle.js</code>：构建输出的文件（包含具体的源代码和 websocket 客户端）</li></ul><p>上面图中，可以分成两个阶段：启动阶段和热更新阶段。</p><h4 id="启动阶段-1-2-a-b" tabindex="-1">启动阶段：1-2-A-B <a class="header-anchor" href="#启动阶段-1-2-a-b" aria-label="Permalink to &quot;启动阶段：1-2-A-B&quot;">​</a></h4><p>主要过程包括以下几个步骤：</p><ol><li><strong>Webpack 编译</strong>：Webpack 开始编译项目源代码和 HMR Runtime，生成 bundle 文件。</li><li><strong>文件传输</strong>：编译后的 bundle 文件传输到 Bundle Server，即静态资源服务器。</li><li><strong>服务启动</strong>：Webpack-dev-server 启动并运行，包括一个提供静态资源的 Express 服务器和一个 WebSocket 服务器（HMR Server）。</li><li><strong>建立连接</strong>：浏览器加载 bundle 文件，并通过 HMR Runtime 与 HMR Server 建立 WebSocket 连接。</li></ol><p>这个过程确保了应用启动时，所有必要的资源都被加载并准备好，同时建立了必要的实时更新机制。</p><h4 id="热更新阶段-1-2-3-4" tabindex="-1">热更新阶段：1-2-3-4 <a class="header-anchor" href="#热更新阶段-1-2-3-4" aria-label="Permalink to &quot;热更新阶段：1-2-3-4&quot;">​</a></h4><p>在热更新阶段的流程包括以下几个关键步骤：</p><ol><li><strong>文件监听和编译</strong>：Webpack 监听到文件的变化，对改动的文件重新编译，并生成新的 bundle 和和补丁文件，以及生成唯一的 hash 值，作为下一次热更新的标识。</li></ol><p>记住两个 hash，一个是上一次的 hash 为 1240，一个为本次更新的 hash 为 2381。</p><p>补丁文件包括更新内容的（hot-update.js）和 manifest 文件（包含变化描述的 hot-update.json）。</p><p><img src="'+o+'" alt=""></p><ol start="2"><li><strong>通知客户端</strong>：当文件变化的时候，HMR Server 通过 WebSocket 连接向浏览器的 HMR Runtime 发送通知，告知有模块更新。websocket 服务器会向浏览器推送一条消息（如下图），data 为最新改动的 hash 值。</li></ol><p><img src="'+e+'" alt=""></p><p>但是，这个最新的 hash 只是为了下一次更新使用的，而不是本次更新使用，本次更新使用的是上一次的 hash，也就是 hash 为 1240 的。</p><ol start="3"><li><strong>请求文件</strong>：此时，浏览器会创建一个 ajax 去想服务端请求说明变化内容的 manifest 文件，为了获得改动的模块名，在返回值的 c 字段可以拿到。（h 为最新的 hash 值，浏览器会默默保存，为了下次文件更新使用）</li></ol><p><img src="'+c+'" alt=""></p><ol start="4"><li>拿到了更新的模块名，结合之前的 hash，再发起 ajax 请求获取改动的文件内容，然后触发 render 流程，实现局部热加载。</li></ol><p><img src="'+t+`" alt=""></p><p>参考：</p><ul><li><a href="https://juejin.cn/post/6844904134697549832" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904134697549832</a></li><li><a href="https://vue3js.cn/interview/webpack/HMR.html" target="_blank" rel="noreferrer">https://vue3js.cn/interview/webpack/HMR.html</a></li></ul><h2 id="文件指纹" tabindex="-1">文件指纹 <a class="header-anchor" href="#文件指纹" aria-label="Permalink to &quot;文件指纹&quot;">​</a></h2><p><strong>什么是文件指纹？</strong></p><p>源代码在 webpack 打包后，生成的带有 hash 的文件名和后缀的就是文件指纹。</p><p>文件指纹可以由以下占位符组成：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">占位符名称	含义</span></span>
<span class="line"><span style="color:#e1e4e8;">ext	资源后缀名</span></span>
<span class="line"><span style="color:#e1e4e8;">name	文件名称</span></span>
<span class="line"><span style="color:#e1e4e8;">path	文件的相对路径</span></span>
<span class="line"><span style="color:#e1e4e8;">folder	文件所在的文件夹</span></span>
<span class="line"><span style="color:#e1e4e8;">hash	每次webpack构建时生成一个唯一的hash值</span></span>
<span class="line"><span style="color:#e1e4e8;">chunkhash	根据chunk生成hash值，来源于同一个chunk，则hash值就一样</span></span>
<span class="line"><span style="color:#e1e4e8;">contenthash	根据内容生成hash值，文件内容相同hash值就相同</span></span></code></pre></div><p>语法：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">filename</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;[name]_[chunkhash:8].js&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p><strong>为什么要引入文件指纹？</strong></p><p>文件指纹（hashing）的引入主要是为了优化网络应用的缓存机制和提高资源加载效率。</p><p>在 Web 开发的早期阶段，当开发者更新网站上的 JavaScript、CSS 或其他静态资源时，用户的浏览器往往会因为缓存策略而继续使用旧版本的文件，导致网站显示不正常或功能异常。为了解决这个问题，引入文件指纹技术，通过在文件名中加入基于内容的唯一标识符（如哈希值），使得每次文件内容更新后文件名都会变化，从而强制浏览器加载新版本的文件，避免了缓存导致的问题。</p><p><strong>文件指纹分类</strong></p><ol><li><strong>Hash</strong>：针对整个构建过程生成的唯一标识。所有的输出文件都共享同一个<code>Hash</code>值。当任何一个文件修改，整个项目的 Hash 值将改变。适用于项目小或者不关注缓存优化时使用。</li><li><strong>Chunkhash</strong>：根据不同的入口文件（Entry）生成的标识，每个入口文件（及其依赖的文件）构建出的结果有独立的<code>Chunkhash</code>。适用于那些文件引用不经常变化的项目，可以更好地利用缓存。</li><li><strong>Contenthash</strong>：由文件内容产生的 Hash 值，仅当文件内容改变时<code>Contenthash</code>才会改变。这种方式特别适合用于 CSS 文件或其他在 Webpack 中单独抽离出的资源文件，确保内容实际改变时才重新请求文件。</li></ol><blockquote><p>注意： 如果你的 Webpack 配置只有一个 entry 点，且只生成一个 bundle 文件，那么使用<code>hash</code>和<code>chunkhash</code>生成的效果实际上是一样的。因为整个构建的输出仅有一个文件，所以无论使用哪种 hash 方法，该文件的 hash 值都会在内容变更后更新。</p><p>然而，一旦引入代码分割，生成多个 chunk（例如，通过动态导入或多个 entry 点），<code>hash</code>和<code>chunkhash</code>的行为就不再相同。 <code>hash</code>会为所有文件生成相同的 hash 值，导致任何一个文件的更改都会使所有文件的 hash 值变化；而<code>chunkhash</code>为每个独立的 chunk 生成独立的 hash 值，仅当特定 chunk 的内容变化时，该 chunk 的 hash 值才会更新，这样更利于缓存管理和减少不必要的下载。</p></blockquote><p><strong>各种文件指纹最佳实践</strong></p><p>一般使用 Chunkhash 和 Contenthash，Hash 的方式基本不使用。</p><p>在生产环境下，我们对打包的<strong>js 文件</strong>一般采用 <code>chunkhash</code>，对于<strong>css，图片、字体</strong>等静态文件，采用 <code>contenthash</code>，这样可以使得各个模块最小范围的改变打包 hash 值。</p><p>一方面，可以最大程度地利用浏览器缓存机制，提升用户的体验；另一方面，合理利用 hash 也减少了 webpack 再次打包所要处理的文件数量，提升了打包速度。</p><p><em>提问：如果使用只有一个 entry 入口，并且采用 chunkhash+代码拆分，如果此时打包成 bundle1 和 bundle2 两个模块，如果 bundle1 对应的源代码有修改，bundle2 打包后的 chunkhash 会改变吗？</em></p><p>在使用单个 entry 入口，并且通过代码拆分打包成<code>bundle1</code>和<code>bundle2</code>两个模块的情况下，如果<code>bundle1</code>的源代码有修改，通常<code>bundle2</code>打包后的<code>chunkhash</code>不会改变。<code>chunkhash</code>是基于 chunk 的内容生成的，所以只有当特定 chunk 的内容发生变化时，该 chunk 的 hash 值才会更新。如果<code>bundle2</code>的内容未发生改变，即使<code>bundle1</code>改变，<code>bundle2</code>的<code>chunkhash</code>也保持不变，这样有利于优化缓存和减少不必要的资源下载。</p><p>参考：</p><ul><li><a href="https://www.cnblogs.com/skychx/p/webpack-hash-chunkhash-contenthash.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/skychx/p/webpack-hash-chunkhash-contenthash.html</a></li><li><a href="https://juejin.cn/post/6971987696029794312" target="_blank" rel="noreferrer">https://juejin.cn/post/6971987696029794312</a></li></ul><h2 id="代码压缩" tabindex="-1">代码压缩 <a class="header-anchor" href="#代码压缩" aria-label="Permalink to &quot;代码压缩&quot;">​</a></h2><h3 id="html-压缩" tabindex="-1">html 压缩 <a class="header-anchor" href="#html-压缩" aria-label="Permalink to &quot;html 压缩&quot;">​</a></h3><p>安装 html-webpack-plugin，设置压缩参数。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">plugins</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    template: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;src/index.html&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 模板文件</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;index.html&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 输出文件的名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    chunks: [</span><span style="color:#9ECBFF;">&#39;index&#39;</span><span style="color:#E1E4E8;">], </span><span style="color:#6A737D;">// 指定要加入的entry中的chunk</span></span>
<span class="line"><span style="color:#E1E4E8;">    inject: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 将所有资产注入给定的template或templateContent - 当传递true或&#39;body&#39;时，所有javascript资源将放置在body元素的底部。&#39;head&#39;将放置在head元素中</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 更多配置：https://github.com/terser/html-minifier-terser#options-quick-reference</span></span>
<span class="line"><span style="color:#E1E4E8;">    minify: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      html5: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 根据HTML5规范解析输入</span></span>
<span class="line"><span style="color:#E1E4E8;">      collapseWhitespace: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 折叠空白字符</span></span>
<span class="line"><span style="color:#E1E4E8;">      preserveLineBreaks: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 保留换行符</span></span>
<span class="line"><span style="color:#E1E4E8;">      minifyCSS: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 压缩页面CSS</span></span>
<span class="line"><span style="color:#E1E4E8;">      minifyJS: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 压缩页面JS</span></span>
<span class="line"><span style="color:#E1E4E8;">      removeComments: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 移除注释</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  }),</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h3 id="css-压缩" tabindex="-1">css 压缩 <a class="header-anchor" href="#css-压缩" aria-label="Permalink to &quot;css 压缩&quot;">​</a></h3><p>使⽤用 optimize-css-assets-webpack-plugin，同时使⽤用 cssnano</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;use strict&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">MiniCssExtractPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mini-css-extract-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">OptimizeCSSAssetsPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;optimize-css-assets-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MiniCssExtractPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      filename: </span><span style="color:#9ECBFF;">&#39;[name]_[contenthash:8].css&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OptimizeCSSAssetsPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      assetNameRegExp:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      cssProcessor: </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cssnano&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h3 id="js-压缩" tabindex="-1">js 压缩 <a class="header-anchor" href="#js-压缩" aria-label="Permalink to &quot;js 压缩&quot;">​</a></h3><p>内置了了 uglifyjs-webpack-plugin，并且自动压缩。</p><p>如果要自己配置，需要手动安装 uglifyjs-webpack-plugin 然后配置。</p><h2 id="自动清理构建目录" tabindex="-1">自动清理构建目录 <a class="header-anchor" href="#自动清理构建目录" aria-label="Permalink to &quot;自动清理构建目录&quot;">​</a></h2><p><strong>1、使用rimraf库</strong><code>rimraf</code> 是一个用于 Node.js 的包，常用于删除文件和目录。它是一个跨平台的实现，类似于 Unix 系统中的 <code>rm -rf</code> 命令，可以递归地删除目录及其内容。</p><p>安装：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install rimraf -D</span></span></code></pre></div><p>设置：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;build&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;rimraf ./dist &amp;&amp; vue-cli-service build&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p><strong>2、使用clean-webpack-plugin插件</strong></p><p>安装：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">npm i clean-webpack-plugin@^2 -D</span></span></code></pre></div><blockquote><p>注意安装的版本为2（最新的为4）</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">CleanWebpackPlugin</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;clean-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 其他配置项</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CleanWebpackPlugin</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="自动补⻬-css3-前缀" tabindex="-1">⾃动补⻬ CSS3 前缀 <a class="header-anchor" href="#自动补⻬-css3-前缀" aria-label="Permalink to &quot;⾃动补⻬ CSS3 前缀&quot;">​</a></h2><p>安装：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">npm install css-loader style-loader postcss-loader autoprefixer -D</span></span></code></pre></div><p>配置 <code>webpack.config.js</code>：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">css</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;style-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&#39;css-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: </span><span style="color:#9ECBFF;">&#39;postcss-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              postcssOptions: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">                  [</span><span style="color:#9ECBFF;">&#39;autoprefixer&#39;</span><span style="color:#E1E4E8;">, { </span><span style="color:#6A737D;">/* 插件选项 */</span><span style="color:#E1E4E8;"> }]</span></span>
<span class="line"><span style="color:#E1E4E8;">                ]</span></span>
<span class="line"><span style="color:#E1E4E8;">              }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">          }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>3、配置 PostCSS 在项目根目录下创建一个 postcss.config.js 文件，以便配置 PostCSS 和 Autoprefixer 插件：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;autoprefixer&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="自动px转viewport" tabindex="-1">自动px转viewport <a class="header-anchor" href="#自动px转viewport" aria-label="Permalink to &quot;自动px转viewport&quot;">​</a></h2><p>参考：<a href="https://github.com/Daotin/Web/blob/master/07-%E7%A7%BB%E5%8A%A8Web%E5%BC%80%E5%8F%91/09-em%E5%92%8Crem.md#%E4%BD%BF%E7%94%A8viewport%E4%BB%A3%E6%9B%BFrem" target="_blank" rel="noreferrer">使用viewport代替rem</a></p><h2 id="sourcemap配置" tabindex="-1">sourcemap配置 <a class="header-anchor" href="#sourcemap配置" aria-label="Permalink to &quot;sourcemap配置&quot;">​</a></h2><p><code>vue.config.js</code> 文件中配置 <code>devtool</code> 选项：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 根据环境变量判断是否生成 source map，并指定 source map 类型</span></span>
<span class="line"><span style="color:#E1E4E8;">  productionSourceMap: p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">configureWebpack</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 开发环境下使用 eval-source-map</span></span>
<span class="line"><span style="color:#E1E4E8;">      config.devtool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;eval-source-map&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 生产环境下使用 source-map</span></span>
<span class="line"><span style="color:#E1E4E8;">      config.devtool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;source-map&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>下图为开发环境使用了sourcemap的调试效果： <img src="`+E+'" alt=""></p><p>下图为开发环境关闭使用sourcemap的调试效果，不是源码（上下会有很多其他代码）： <img src="'+r+'" alt=""><img src="'+y+`" alt=""></p><blockquote><p>❓在<strong>开发环境</strong>生成sourcemap，要怎么使用呢？</p></blockquote><p>当开发环境生成了 source map 文件并且浏览器加载这些文件后，浏览器会自动解析 source map 文件并将压缩或混淆后的代码映射到源文件。开发者不需要进行任何额外的操作。具体过程如下：</p><ol><li><p><strong>自动加载</strong>：</p><ul><li>浏览器在加载 JavaScript 文件时，会检查这些文件是否包含 source map 注释。这些注释通常是这样的形式：<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">//# sourceMappingURL=main.js.map</span></span></code></pre></div></li><li>如果存在这个注释，浏览器会自动请求并加载对应的 source map 文件（如 <code>main.js.map</code>）。</li></ul></li><li><p><strong>解析 source map</strong>：</p><ul><li>浏览器加载并解析 source map 文件，将压缩或混淆后的代码映射到源文件。这使得浏览器可以显示源代码而不是压缩后的代码。</li></ul></li><li><p><strong>开发者工具显示源代码</strong>：</p><ul><li>在浏览器的开发者工具中（例如 Chrome 的 DevTools 或 Firefox 的 Developer Tools），源代码会显示在“Sources”或“源”面板中。你可以看到原始的未压缩、未混淆的源代码。</li><li>调试时，断点和错误信息都会对应到源代码中，而不是压缩后的代码行。</li></ul></li></ol><p>浏览器在加载 JavaScript 文件时，如果发现有指向 source map 文件的注释，会自动加载和解析这些 source map 文件。开发者无需进行任何额外操作，就可以在开发者工具中查看和调试原始的源代码。这大大简化了调试过程，使得定位和修复问题更加高效。</p><blockquote><p>❓在<strong>生产环境</strong>生成sourcemap，要怎么使用呢？</p></blockquote><ol><li><p><strong>配置生成 source map</strong>：</p><ul><li>在 <code>vue.config.js</code> 中配置生成 source map 文件，但在部署时不将这些文件公开。</li></ul><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  productionSourceMap: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">// 生成 source map 文件</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">configureWebpack</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">config</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      config.devtool </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;source-map&#39;</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// 使用适合生产环境的 source map 类型</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div></li><li><p><strong>部署时不公开 source map 文件</strong>：</p><ul><li>将 source map 文件保存到安全的位置，例如服务器的某个保护目录，或者仅在内部网络访问的存储位置，不将其公开发布到用户可访问的目录中。</li></ul></li></ol><p>如何使用？</p><ol><li><p><strong>使用错误日志服务</strong>： 像 Sentry 这样的错误日志服务可以自动解析 source map 文件，只需将生成的 source map 文件上传到相应的服务中。</p></li><li><p><strong>手动使用 source map 文件进行调试</strong> 步骤：</p></li></ol><ul><li><p>从错误日志服务或浏览器控制台中获取错误信息和堆栈跟踪。</p></li><li><p>使用 source map 文件手动或通过工具解析错误堆栈，定位到源代码中的具体位置。</p></li><li><p>通过 source map 文件，你可以手动将压缩代码的行列号映射回源代码。例如，可以使用工具如 <code>source-map</code> 库来进行映射。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">SourceMapConsumer</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;source-map&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 读取 source map 文件</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rawSourceMap</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(fs.</span><span style="color:#B392F0;">readFileSync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path/to/your.map&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;utf8&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建 SourceMapConsumer</span></span>
<span class="line"><span style="color:#E1E4E8;">SourceMapConsumer.</span><span style="color:#B392F0;">with</span><span style="color:#E1E4E8;">(rawSourceMap, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">consumer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">originalPosition</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> consumer.</span><span style="color:#B392F0;">originalPositionFor</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    line: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">// 错误发生的压缩代码行号</span></span>
<span class="line"><span style="color:#E1E4E8;">    column: </span><span style="color:#79B8FF;">1005</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 错误发生的压缩代码列号</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Original position:&#39;</span><span style="color:#E1E4E8;">, originalPosition);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div></li></ul><p>示例： <img src="`+i+'" alt=""><img src="'+F+'" alt=""></p><p>解析后： <img src="'+d+`" alt=""></p><h2 id="基础库分离出dist" tabindex="-1">基础库分离出dist <a class="header-anchor" href="#基础库分离出dist" aria-label="Permalink to &quot;基础库分离出dist&quot;">​</a></h2><p>将 Vue、Element-UI 基础包通过 cdn 引⼊，不打⼊ bundle 中。</p><p>安装：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">npm i html-webpack-externals-plugin -D</span></span></code></pre></div><p><code>html-webpack-externals-plugin</code> 是一个用于 Webpack 的插件，它主要的作用是将某些依赖（如第三方库）通过外部链接的方式加载，而不是将它们打包到最终的 bundle 文件中。它会自动在生成的 HTML 文件中插入相应的 <code>&lt;script&gt;</code> 或 <code>&lt;link&gt;</code> 标签。</p><p>这种做法有几个好处：</p><ol><li><p><strong>减小打包后的文件大小</strong>：通过将一些不经常变化的库（例如 jQuery、Lodash 等）从 bundle 中移除，可以显著减小打包后的文件大小，从而提升页面加载速度。</p></li><li><p><strong>利用 CDN 加速</strong>：这些外部依赖可以通过 CDN（内容分发网络）加载，CDN 通常在全球多地部署服务器，能够加速文件的下载速度。</p></li><li><p><strong>缓存利用</strong>：因为这些外部库可能已经被浏览器缓存，可以减少重复下载的时间。</p></li></ol><p>配置：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HtmlWebpackExternalsPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;html-webpack-externals-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 你的其他 webpack 配置</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HtmlWebpackExternalsPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      externals: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          module: </span><span style="color:#9ECBFF;">&#39;jquery&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          entry: </span><span style="color:#9ECBFF;">&#39;https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          global: </span><span style="color:#9ECBFF;">&#39;jQuery&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          module: </span><span style="color:#9ECBFF;">&#39;lodash&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          entry: </span><span style="color:#9ECBFF;">&#39;https://cdn.jsdelivr.net/npm/lodash@4.17.21/lodash.min.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          global: </span><span style="color:#9ECBFF;">&#39;_&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>在上述配置中，<code>HtmlWebpackExternalsPlugin</code> 被添加到了插件数组中，并且指定了两个外部依赖：jQuery 和 Lodash。这样，在生成的 HTML 文件中会自动插入相应的 <code>&lt;script&gt;</code> 标签，加载 jQuery 和 Lodash，而不是将它们打包进 bundle 文件中。</p><h2 id="基础包拆分打包" tabindex="-1">基础包拆分打包 <a class="header-anchor" href="#基础包拆分打包" aria-label="Permalink to &quot;基础包拆分打包&quot;">​</a></h2><p>Webpack 的 <code>SplitChunksPlugin</code> 插件用于将代码分离成多个 chunk，以实现更好的缓存和更快的加载时间。它主要用于优化共享模块，并将其分离到单独的文件中。</p><p>配置：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">HtmlWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;html-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">//其他配置</span></span>
<span class="line"><span style="color:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    splitChunks: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      chunks: </span><span style="color:#9ECBFF;">&#39;all&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 分离所有类型的 chunks（包括同步和异步）</span></span>
<span class="line"><span style="color:#E1E4E8;">      minSize: </span><span style="color:#79B8FF;">20000</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 最小大小，超过这个大小的模块才会被分离</span></span>
<span class="line"><span style="color:#E1E4E8;">      minRemainingSize: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 保持不变</span></span>
<span class="line"><span style="color:#E1E4E8;">      minChunks: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 至少被多少模块共享</span></span>
<span class="line"><span style="color:#E1E4E8;">      maxAsyncRequests: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 按需加载时的最大并行请求数</span></span>
<span class="line"><span style="color:#E1E4E8;">      maxInitialRequests: </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 入口点的最大并行请求数</span></span>
<span class="line"><span style="color:#E1E4E8;">      enforceSizeThreshold: </span><span style="color:#79B8FF;">50000</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 强制执行拆分的大小阈值</span></span>
<span class="line"><span style="color:#E1E4E8;">      cacheGroups: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        vendors: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">module</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 获取模块名，例如 node_modules/packageName/index.js -&gt; packageName</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">packageName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.context.</span><span style="color:#B392F0;">match</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#DBEDFF;">(</span><span style="color:#79B8FF;">.</span><span style="color:#F97583;">*?</span><span style="color:#DBEDFF;">)(</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#F97583;">|$</span><span style="color:#DBEDFF;">)</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`vendor.\${</span><span style="color:#E1E4E8;">packageName</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">          chunks: </span><span style="color:#9ECBFF;">&#39;all&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 多个缓存组匹配同一模块时，优先级高的缓存组优先处理。</span></span>
<span class="line"><span style="color:#E1E4E8;">          priority: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#6A737D;">// 如果已有相同名称的 chunk，复用它而不是创建新的</span></span>
<span class="line"><span style="color:#E1E4E8;">          reuseExistingChunk: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">        commons: {</span></span>
<span class="line"><span style="color:#E1E4E8;">	      </span><span style="color:#6A737D;">// 匹配 \`src\` 目录下 \`components\` 和 \`utils\` 目录中的模块，将其分离到一个统一的 \`commons\` chunk 中。</span></span>
<span class="line"><span style="color:#E1E4E8;">          test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#DBEDFF;">src</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#DBEDFF;">(components</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">utils)</span><span style="color:#79B8FF;">[</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#79B8FF;">/]</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">          name: </span><span style="color:#9ECBFF;">&#39;commons&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          chunks: </span><span style="color:#9ECBFF;">&#39;all&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          minChunks: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          priority: </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          reuseExistingChunk: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="scope-hoisting-不用配置" tabindex="-1">Scope Hoisting（不用配置） <a class="header-anchor" href="#scope-hoisting-不用配置" aria-label="Permalink to &quot;Scope Hoisting（不用配置）&quot;">​</a></h2><p><code>ModuleConcatenationPlugin</code> 是 Webpack 中的一个优化插件，用于通过 Scope Hoisting（作用域提升）来减少 JavaScript 文件的体积和提升执行性能。它的主要作用包括：</p><ol><li><p><strong>减少闭包函数的数量</strong>：通过将所有模块合并到一个作用域中，减少了闭包函数的数量，从而降低了 JavaScript 解析和执行的开销。</p></li><li><p><strong>提升运行时性能</strong>：合并模块可以减少代码中的函数调用和作用域查找，提升代码的执行效率。</p></li><li><p><strong>缩小打包后的文件体积</strong>：通过减少模块间的边界和闭包，生成的代码通常更简洁，文件体积更小。</p></li></ol><p>这个插件在生产环境中特别有用，因为它可以显著提高应用的加载速度和响应性能。<code>ModuleConcatenationPlugin</code> 在 Webpack 3 及以后的版本中被默认启用。</p><p><strong>当设置mode: &#39;production&#39;的时候，会自动启用！</strong></p><blockquote><p>但，注意：只能对 ES6 模块进行优化，而不能对 CommonJS 模块进行优化。原因是 ES6 模块的静态结构使得 Webpack 能够在编译时进行更多的优化，而 CommonJS 模块的动态特性则限制了这种优化的可能性。</p></blockquote><p><img src="`+u+`" alt=""></p><p>当然，也可以手动配置。在 Webpack 配置中使用 <code>ModuleConcatenationPlugin</code> 插件：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">webpack</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;webpack&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  optimization: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    concatenateModules: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">// 启用作用域提升</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> webpack.optimize.</span><span style="color:#B392F0;">ModuleConcatenationPlugin</span><span style="color:#E1E4E8;">(),  </span><span style="color:#6A737D;">// 添加插件</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>以上配置会自动应用作用域提升优化。</p><h2 id="添加eslint" tabindex="-1">添加ESLint <a class="header-anchor" href="#添加eslint" aria-label="Permalink to &quot;添加ESLint&quot;">​</a></h2><p>如果是Vue-cli项目，添加eslint会比较简单：</p><p>1、安装</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">vue add @vue/eslint</span></span></code></pre></div><p>期间会让你选择ESLint 规则，以及最后会生成<code>.eslintrc.js</code> 文件，其中包含 ESLint 的配置。</p><p>2、安装VSCode插件 在 <code>.vscode</code> 文件夹下创建一个 <code>settings.json</code> 文件，并添加以下内容：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;eslint.validate&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;javascript&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;javascriptreact&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;vue&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;editor.codeActionsOnSave&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;source.fixAll.eslint&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>3、运行eslint</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;lint&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vue-cli-service lint&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>4、配置webpack</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  lintOnSave: p<wbr>rocess.env.</span><span style="color:#79B8FF;">NODE_ENV</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;production&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>即使 lintOnSave 设置为 false，运行 npm run lint 仍然会生效。lintOnSave 选项只是控制在开发过程中保存文件时是否自动运行 ESLint 检查。如果你手动运行 npm run lint，它会检查整个项目的代码，无论 lintOnSave 的设置如何。</p></blockquote><h2 id="打包组件库" tabindex="-1">打包组件库 <a class="header-anchor" href="#打包组件库" aria-label="Permalink to &quot;打包组件库&quot;">​</a></h2><p>跟打包业务代码基本一致，区别在于在<code>output</code>中增加几个选项：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;my-library.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    library: </span><span style="color:#9ECBFF;">&#39;MyLibrary&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 你的库的全局变量名称</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// libraryTarget只需要写umd，就可以支持 AMD、CMD、UMD 以及 script 标签的方式引用</span></span>
<span class="line"><span style="color:#E1E4E8;">    libraryTarget: </span><span style="color:#9ECBFF;">&#39;umd&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 支持 UMD 规范</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 如果你的库是通过 export default 导出的，那么你应该使用 libraryExport: &#39;default&#39; 来确保库在 UMD、AMD 和 CommonJS 模块系统中正确导出。比如 export default function func() {} ,当对于命名导出的情况，不需要 libraryExport: &#39;default&#39;，如 export function func() {} </span></span>
<span class="line"><span style="color:#E1E4E8;">    libraryExport: </span><span style="color:#9ECBFF;">&#39;default&#39;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">    umdNamedDefine: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 允许 UMD 规范下的命名</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        exclude:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: {</span></span>
<span class="line"><span style="color:#E1E4E8;">          loader: </span><span style="color:#9ECBFF;">&#39;babel-loader&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div>`,167),B=[g];function b(m,k,C,D,v,f){return n(),a("div",null,B)}const w=s(h,[["render",b]]);export{q as __pageData,w as default};
