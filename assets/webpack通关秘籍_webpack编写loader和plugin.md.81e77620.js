import{_ as n,o as a,c as l,S as o}from"./chunks/framework.d5a27ec8.js";const p="/fe-series-notes/assets/img-20240526150559.fde2bbe0.png",F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"webpack通关秘籍/webpack编写loader和plugin.md","filePath":"webpack通关秘籍/webpack编写loader和plugin.md","lastUpdated":1732785427000}'),e={name:"webpack通关秘籍/webpack编写loader和plugin.md"};function c(t,s,r,E,i,y){return a(),l("div",null,s[0]||(s[0]=[o(`<h2 id="loader" tabindex="-1">loader <a class="header-anchor" href="#loader" aria-label="Permalink to &quot;loader&quot;">​</a></h2><p>loader 的定义：<strong>loader 只是一个导出为函数的 JavaScript 模块</strong>。</p><p>下面是一个最简单的 loader：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> source;</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h3 id="loader-runner" tabindex="-1">loader-runner <a class="header-anchor" href="#loader-runner" aria-label="Permalink to &quot;loader-runner&quot;">​</a></h3><p>使用 loader-runner 来测试 loader，避免每次需安装 webpack 进行测试。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">runLoaders</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;loader-runner&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">fs</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;fs&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;==&gt;&#39;</span><span style="color:#E1E4E8;">, path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;./demo.txt&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">runLoaders</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    resource: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;./demo.txt&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 字符串：资源的绝对路径（可以选择包含查询字符串）</span></span>
<span class="line"><span style="color:#E1E4E8;">    loaders: [path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;./raw-loader.js&#39;</span><span style="color:#E1E4E8;">)],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// String[]：loader的绝对路径（可选地包括查询字符串）</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// {loader, options}[]: 带有选项对象的加载器的绝对路径</span></span>
<span class="line"><span style="color:#E1E4E8;">    context: { minimize: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 用作基本上下文的附加加载器上下文</span></span>
<span class="line"><span style="color:#E1E4E8;">    readResource: fs.readFile.</span><span style="color:#B392F0;">bind</span><span style="color:#E1E4E8;">(fs),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 可选：读取资源的函数</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 仅当未提供 &#39;processResource&#39; 时使用</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 必须有签名 function(path, function(err, buffer))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 默认使用 fs.readFile</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">err</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (err) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(err);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(result);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre></div><h3 id="loader-其他配置" tabindex="-1">loader 其他配置 <a class="header-anchor" href="#loader-其他配置" aria-label="Permalink to &quot;loader 其他配置&quot;">​</a></h3><h4 id="_1、传参和获取" tabindex="-1">1、传参和获取 <a class="header-anchor" href="#_1、传参和获取" aria-label="Permalink to &quot;1、传参和获取&quot;">​</a></h4><p>loader 通过 options 进行传参</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    rules: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        test:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#79B8FF;">.</span><span style="color:#DBEDFF;">(png</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">jpg</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">gif</span><span style="color:#F97583;">|</span><span style="color:#DBEDFF;">jpeg)</span><span style="color:#F97583;">$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        use: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          {</span></span>
<span class="line"><span style="color:#E1E4E8;">            loader: </span><span style="color:#9ECBFF;">&#39;url-loader&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">              limit: </span><span style="color:#79B8FF;">10240</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">          },</span></span>
<span class="line"><span style="color:#E1E4E8;">        ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>通过 loader-utils 的 getOptions 方法获取参数：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loaderUtils</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;loader-utils&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loaderUtils.</span><span style="color:#B392F0;">getOptions</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h4 id="_2、loader-异常处理" tabindex="-1">2、loader 异常处理 <a class="header-anchor" href="#_2、loader-异常处理" aria-label="Permalink to &quot;2、loader 异常处理&quot;">​</a></h4><ul><li>通过 throw 抛出异常</li><li>通过 this.callback 传递错误</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  err: Error </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  content: string </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> Buffer,</span></span>
<span class="line"><span style="color:#E1E4E8;">  sourceMap</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> SourceMap,</span></span>
<span class="line"><span style="color:#E1E4E8;">  meta</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> any</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>通过 callback 而不是 return 的方式，可以传多个内容：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// return source</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, source, </span><span style="color:#79B8FF;">11</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">33</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>输出结果为：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">{</span></span>
<span class="line"><span style="color:#e1e4e8;">  result: [ &#39;你好&#39;, 11, 22, 33 ],</span></span>
<span class="line"><span style="color:#e1e4e8;">  resourceBuffer: &lt;Buffer e4 bd a0 e5 a5 bd&gt;,</span></span>
<span class="line"><span style="color:#e1e4e8;">  cacheable: true,</span></span>
<span class="line"><span style="color:#e1e4e8;">  fileDependencies: [</span></span>
<span class="line"><span style="color:#e1e4e8;">    &#39;/Users/daotin/Desktop/github/fe-series-code/geektime-webpack-course/demo/loader-runner/demo.txt&#39;</span></span>
<span class="line"><span style="color:#e1e4e8;">  ],</span></span>
<span class="line"><span style="color:#e1e4e8;">  contextDependencies: [],</span></span>
<span class="line"><span style="color:#e1e4e8;">  missingDependencies: []</span></span>
<span class="line"><span style="color:#e1e4e8;">}</span></span></code></pre></div><h4 id="_3、loader-异步处理" tabindex="-1">3、loader 异步处理 <a class="header-anchor" href="#_3、loader-异步处理" aria-label="Permalink to &quot;3、loader 异步处理&quot;">​</a></h4><p>通过 this.async 来返回一个异步函数 callback，第一个参数是 Error，第二个参数是处理的结果。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">callback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">async</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, source);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h4 id="_4、loader-缓存" tabindex="-1">4、loader 缓存 <a class="header-anchor" href="#_4、loader-缓存" aria-label="Permalink to &quot;4、loader 缓存&quot;">​</a></h4><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">cacheable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//关掉缓存</span></span></code></pre></div><h4 id="_5、loader-文件输出" tabindex="-1">5、loader 文件输出 <a class="header-anchor" href="#_5、loader-文件输出" aria-label="Permalink to &quot;5、loader 文件输出&quot;">​</a></h4><p>使用<code>this.emitFile</code> 进行文件写入（<em>仅在 webpack 中有效，单独使用 loader-runner 无效</em>）</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">loaderUtils</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;loader-utils&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">source</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">url</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist/index.js&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">emitFile</span><span style="color:#E1E4E8;">(url, source);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, source);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="plugin" tabindex="-1">plugin <a class="header-anchor" href="#plugin" aria-label="Permalink to &quot;plugin&quot;">​</a></h2><blockquote><p>plugin 的编写没有类似 loader-runner 的独立环境，必须在 webpack 的环境中编写。</p></blockquote><h3 id="插件的基本结构" tabindex="-1">插件的基本结构 <a class="header-anchor" href="#插件的基本结构" aria-label="Permalink to &quot;插件的基本结构&quot;">​</a></h3><ul><li>插件名称</li><li>apply 方法（参数为 compiler）（可以查看<a href="./webpack构建原理.html#^5480f4">自定义插件</a>）</li><li>插件监听的 hooks</li><li>插件处理流程</li></ul><p><img src="`+p+`" alt=""></p><h3 id="hooks-阶段" tabindex="-1">hooks 阶段 <a class="header-anchor" href="#hooks-阶段" aria-label="Permalink to &quot;hooks 阶段&quot;">​</a></h3><p>Webpack 提供了多个钩子（hooks）来在构建过程的不同阶段执行特定的操作。<code>emit</code> 阶段只是其中之一，Webpack 构建过程的各个阶段涵盖了从初始化到生成最终输出的整个生命周期。</p><p>以下是一些常见的 Webpack 阶段和它们对应的钩子：</p><ol><li><p><strong><code>initialize</code>（初始化阶段）</strong></p><ul><li><strong>钩子</strong>：<code>initialize</code></li><li>该阶段在 Webpack 启动时执行，通常用于设置插件的初始状态。</li></ul></li><li><p><strong><code>entry</code>（入口阶段）</strong></p><ul><li><strong>钩子</strong>：<code>entryOption</code></li><li>这是 Webpack 配置阶段，定义了入口文件（entry point）。在此阶段，Webpack 会读取 <code>webpack.config.js</code> 中的配置，确定从哪个文件开始构建依赖图。</li></ul></li><li><p><strong><code>resolve</code>（解析阶段）</strong></p><ul><li><strong>钩子</strong>：<code>resolveLoader</code>、<code>resolve</code></li><li>在构建模块依赖图时，Webpack 需要解析文件路径（包括模块的解析）。这包括从入口文件开始，解析文件的依赖关系并将其映射到模块。</li></ul></li><li><p><strong><code>build</code>（构建阶段）</strong></p><ul><li><strong>钩子</strong>：<code>beforeRun</code>、<code>run</code>、<code>watchRun</code>、<code>compile</code></li><li>在这个阶段，Webpack 开始处理源代码，将每个模块转化为对应的构建结果。 <ul><li><code>beforeRun</code>：在构建开始之前触发。</li><li><code>run</code>：在构建启动后执行，通常用于初始化编译过程。</li><li><code>watchRun</code>：在 Webpack 监视模式下每次重新构建时触发。</li><li><code>compile</code>：表示 Webpack 准备进行编译的阶段。</li></ul></li></ul></li><li><p><strong><code>optimization</code>（优化阶段）</strong></p><ul><li><strong>钩子</strong>：<code>optimize</code>、<code>optimizeChunks</code>、<code>optimizeModules</code></li><li>这是 Webpack 优化处理的阶段，主要用于优化模块和 chunk 的合并、分割等。</li></ul></li><li><p><strong><code>buildModules</code>（构建模块阶段）</strong></p><ul><li><strong>钩子</strong>：<code>moduleBuild</code>、<code>module</code></li><li>在此阶段，Webpack 会对各个模块进行实际的构建和转换（例如通过加载器对代码进行编译或转译）。模块化的构建也在此阶段完成。</li></ul></li><li><p><strong><code>emit</code>（生成资源阶段）</strong></p><ul><li><strong>钩子</strong>：<code>emit</code></li><li>在此阶段，Webpack 会生成最终的文件，准备将文件输出到磁盘。<code>emit</code> 阶段通常用于文件输出的操作，如修改文件内容、创建文件名等。</li></ul></li><li><p><strong><code>afterEmit</code>（输出后阶段）</strong></p><ul><li><strong>钩子</strong>：<code>afterEmit</code></li><li>在 <code>emit</code> 阶段之后执行，可以用于对生成的文件进行进一步处理，或者进行清理工作等。</li></ul></li><li><p><strong><code>done</code>（构建完成阶段）</strong></p><ul><li><strong>钩子</strong>：<code>done</code></li><li>在 Webpack 构建过程完成后，<code>done</code> 阶段被触发，表示构建已经完成。在此阶段，插件可以进行一些收尾工作，如报告构建的结果、生成日志、清理缓存等。</li></ul></li><li><p><strong><code>failed</code>（构建失败阶段）</strong></p></li></ol><ul><li><strong>钩子</strong>：<code>failed</code></li><li>如果构建过程中发生错误，<code>failed</code> 阶段将被触发，可以用于处理构建失败的情况，报告错误等。</li></ul><ol start="11"><li><strong><code>watch</code>（监视模式）</strong></li></ol><ul><li><strong>钩子</strong>：<code>watchClose</code>、<code>watchRun</code></li><li>这些钩子会在 Webpack 以 watch 模式运行时触发，允许开发者在文件变化时做出响应。</li></ul><ol start="12"><li><strong><code>close</code>（关闭阶段）</strong></li></ol><ul><li><strong>钩子</strong>：<code>close</code></li><li>当 Webpack 完成所有构建并且关闭时触发。通常用于清理资源或进行一些后处理。</li></ul><ol start="13"><li><strong><code>afterCompile</code>（编译完成后阶段）</strong></li></ol><ul><li><strong>钩子</strong>：<code>afterCompile</code></li><li>这个钩子在 Webpack 编译完成后触发，允许插件访问编译的内容。</li></ul><p>常见的构建生命周期流程图：</p><ol><li><strong>入口配置</strong>：读取 <code>entry</code> 配置，决定构建的起点。</li><li><strong>模块解析</strong>：解析模块的依赖关系（包括 <code>resolve</code> 阶段）。</li><li><strong>构建模块</strong>：使用加载器对模块进行编译、转换、打包。</li><li><strong>优化</strong>：根据配置进行优化操作（如代码分割、Tree Shaking 等）。</li><li><strong>生成输出</strong>：通过 <code>emit</code> 阶段生成文件，准备输出到目标目录。</li><li><strong>构建完成</strong>：构建完成后触发 <code>done</code> 钩子，进行后处理。</li></ol><h3 id="plugin-其他配置" tabindex="-1">plugin 其他配置 <a class="header-anchor" href="#plugin-其他配置" aria-label="Permalink to &quot;plugin 其他配置&quot;">​</a></h3><h4 id="_1、插件中如何获取传递的参数" tabindex="-1">1、插件中如何获取传递的参数？ <a class="header-anchor" href="#_1、插件中如何获取传递的参数" aria-label="Permalink to &quot;1、插件中如何获取传递的参数？&quot;">​</a></h4><p>通过插件的构造函数进行获取。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyPlugin</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;apply&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h4 id="_2、插件的错误处理" tabindex="-1">2、插件的错误处理 <a class="header-anchor" href="#_2、插件的错误处理" aria-label="Permalink to &quot;2、插件的错误处理&quot;">​</a></h4><p>参数校验阶段可以直接 throw 的方式抛出</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Error&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>如果是在 hooks 处理阶段，通过 compilation 对象的 warnings 和 errors 数组接收。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">compilation.warnings.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;warning&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">compilation.errors.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;error&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h4 id="_3、文件写入磁盘" tabindex="-1">3、文件写入磁盘 <a class="header-anchor" href="#_3、文件写入磁盘" aria-label="Permalink to &quot;3、文件写入磁盘&quot;">​</a></h4><p>将内容设置到<code>compilation.assets</code>对象上即可。</p><h4 id="示例-编写一个压缩构建资源为-zip-包的插件" tabindex="-1">示例：编写一个压缩构建资源为 zip 包的插件 <a class="header-anchor" href="#示例-编写一个压缩构建资源为-zip-包的插件" aria-label="Permalink to &quot;示例：编写一个压缩构建资源为 zip 包的插件&quot;">​</a></h4><p>要求：</p><ul><li>生成的 zip 包文件名称可以通过插件传入</li><li>需要使用 compiler 对象上的特定的 hooks 进行资源生成，而不能使用 fs</li></ul><p>分析：</p><ul><li>资源的压缩使用 jszip (<a href="https://www.npmjs.com/package/jszip" target="_blank" rel="noreferrer">https://www.npmjs.com/package/jszip</a>)</li><li>emit 生成文件阶段，读取的是 compilation.assets 对象的值，讲 zip 资源包设置到 compilation.assets 对象上即可</li><li>设置到 compilation.assets 对象上时候，需要通过 webpack-sources 库中的 RawSource 类进行封装，因为 Webpack 期望的是一个符合特定接口的对象，该对象需要包含至少 <code>source()</code> 和 <code>size()</code> 方法。<code>RawSource</code> 类正是为了这个目的而设计的，它提供了这些方法，使得 Webpack 能够正确处理和输出文件内容</li></ul><p>具体<code>zip-plugin.js</code>插件代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSZip</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;jszip&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">RawSource</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;webpack-sources&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">zip</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSZip</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ZipPlugin</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">options</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> options;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">compiler</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;zip plugin执行&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    compiler.hooks.emit.</span><span style="color:#B392F0;">tapAsync</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myZipPlugin&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">compilation</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// console.log(compilation.options.output.path); // dist绝对路径</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 创建一个目录</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">zip</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSZip</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">folder</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> zip.</span><span style="color:#B392F0;">folder</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.filename </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;filename&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 目录写入文件</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> filename </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> compilation.assets) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">source</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> compilation.assets[filename].</span><span style="color:#B392F0;">source</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 打包后的文件内容</span></span>
<span class="line"><span style="color:#E1E4E8;">        folder.</span><span style="color:#B392F0;">file</span><span style="color:#E1E4E8;">(filename, source);</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 生成压缩文件</span></span>
<span class="line"><span style="color:#E1E4E8;">      zip.</span><span style="color:#B392F0;">generateAsync</span><span style="color:#E1E4E8;">({ type: </span><span style="color:#9ECBFF;">&#39;nodebuffer&#39;</span><span style="color:#E1E4E8;"> }).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">content</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// console.log(new RawSource(content));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">filename</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.options.filename </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;.zip&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        compilation.assets[filename] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RawSource</span><span style="color:#E1E4E8;">(content); </span><span style="color:#6A737D;">// 通过RawSource包裹一层</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>webpack 配置文件中使用：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;use strict&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">CleanWebpackPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;clean-webpack-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ZipPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./plugins/zip-plugin&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  entry: </span><span style="color:#9ECBFF;">&#39;./src/index.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  mode: </span><span style="color:#9ECBFF;">&#39;production&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  devtool: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  output: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    path: path.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(__dirname, </span><span style="color:#9ECBFF;">&#39;dist&#39;</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">    filename: </span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CleanWebpackPlugin</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ZipPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      filename: </span><span style="color:#9ECBFF;">&#39;daotin&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  ],</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div>`,66)]))}const u=n(e,[["render",c]]);export{F as __pageData,u as default};
