import{_ as i,o as e,c as u,S as t}from"./chunks/framework.d5a27ec8.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"个人成长/学习方法/1-前端敏捷学习法.md","filePath":"个人成长/学习方法/1-前端敏捷学习法.md","lastUpdated":1737097040000}'),r={name:"个人成长/学习方法/1-前端敏捷学习法.md"};function o(a,l,s,n,c,g){return e(),u("div",null,l[0]||(l[0]=[t('<p>前端领域提升 “技术深度” 的路线是相对明朗的，就是不断阅读优秀的源码并深入原理，从 JavaScript 语言的基础知识到翻过 “三座大山”— 设计模式、数据结构、基础算法，再到开发框架的设计思想、核心原理和最佳实践，最后再在工程化或者更加综合的场景中应用自己所学。这是一个漫长且煎熬的过程，是每一个希望在行业里一直走下去的高级前端工程师必须经历的修行。行内常有人说 “前端没有中级工程师，如果你觉得自己算不上高级工程师，那只能算是个新人”。前端领域的知识很庞杂，在积累 “技术深度” 的过程中，你能创造的价值或许跟之前没什么区别，但请一定保持耐心。</p><h2 id="前端敏捷学习法" tabindex="-1">前端敏捷学习法 <a class="header-anchor" href="#前端敏捷学习法" aria-label="Permalink to &quot;前端敏捷学习法&quot;">​</a></h2><ul><li>[[学习方法]] <ul><li>选题背景 <ul><li><strong>面向未来的社区化敏捷学习方法</strong> 在技术瞬息万变的今天，原来那些只靠学历、人脉、经验升职已经过时了，要想保持自己的职场竞争力，练好一件本事就够了，那就是学习敏捷力。 ---美国著名企业高管教练瓦尔库。</li></ul></li><li>敏捷学习法 核心<strong>通过外部刺激更新自己的知识树</strong><ul><li>被动解决问题 <ul><li>概述 解决新问题时，利用自己已积累的所有相关知识判断可能的最优解决方法并拿它排序。其后对解决方案做拆解得出一些知识关键词，逐条快速通过知识获取途径得到相关资料，迅速实验田验证，过程中需要实时更新自己的知识树，后期不断完善整理知识树，成为新的积累，便于之后新的问题突破。</li><li>举例 解决一个rn项目开机经常直接闪退的问题。 根据已经存在的技能树提出可能的问题，在知识树上添加虚树。 Google 搜索相关问题 做实验验证 更新知识树（补充相关体系）</li><li>总结 <ul><li>不断拆解问题到更小的原子问题</li><li>不断对每个原子问题优化搜索关键词，不断获取此关键词的信息并从信息获取更准确的关键词</li><li>不断做实验验证可行性</li></ul></li></ul></li><li>主动学习案例 <ul><li>概述 主动研究课题时，则通过阅读各类资料迅速整理知识点，更新知识树，重建新知识与老知识的关系链，弄清楚每一个知识之间的联系。</li><li>以主动学习redux为例，<strong>如果让你快速学会redux并着手重构曾经的项目，你会怎么做？</strong> 把redux书和相关背景都读一遍恐怕是来不及的，由于知识是有背景和上下文的，再讲这个案例时我只能假定学习者已经深入理解react，初步理解flux，此时学习redux。 <ul><li>理论 <ul><li>带着知识经验和目标阅读 学习新知识首先读的一定是官方文档的getting start，以及文档中的demo，<strong>了解清楚这个知识属于哪一个领域，解决什么问题，背后的理念大概是什么</strong>。带着这几个问题读一遍官方的介绍，切记带着目标读，让资料跟着你走，而不是一上来就看怎么install，或者深入细节。</li><li>将自己的心得更新到知识树</li></ul></li><li>实践 <ul><li>一般选择官方example，从简单到复杂。</li><li>学习项目中最重要的是，学习写法并分析他的用意，遇到不懂的，立马查补。 比如对es6的一些知识不够熟练，看到某个写法有点懵。此时应该立马记下来，看看能不能大概查阅他的意义跳过先看，如果确实是一个重要知识点无法跳过，则必须弄清楚后继续。</li><li>学习别人项目绝不能只看代码，而是自我去做功能变异与代码变异。 <ul><li>功能变异 功能变异是指增减改同类功能。比如他做了一个加法器，那我用同样的方法在下面做一个乘法器，走一遍新feature的流程，不会就debug、diff...。</li><li>代码变异 代码变异则更关注实现细节，比如你可以换个写法实现某个方法为达到同样的测试结果。</li></ul></li></ul></li><li>开始写自己的项目 参考理论和别人的项目来写自己的程序。遇到不懂立马中断，回去做实验查资料更新知识树，深化完继续前进。比较痛苦的是，往往一开始你的项目进度非常缓慢，查资料和做实验的实践耗了很久，但是我的经验告诉我，知识的持续翻叠和联想对比很快能让你走出困境。</li><li>后期夯实基础 这时候你工作的项目已经能应付，此时最容易放松但是千万不能放松，因为你的理论和判断能力还是很弱，换个业务逻辑也许又无从下手。这时需要对知识做拓展，和其他知识做关联，补充之前快速学习忽略掉的一些细节知识。这个过程是缓慢的，随着时间越长经验越足积累越深。</li></ul></li></ul></li></ul></li><li>知识迁移 知识迁移就是当我听说一个新知识的时候，首先要对这个知识做归类，一般就是属于哪块的知识，解决什么问题，与现有的知识关系是什么，这个新知识和我之前知识树中的知识有没有联系，有没有相似的地方可以借鉴。 <ul><li>解决问题 <ul><li>比如我在做前端 route 切换动画的时候，我会想的是以前写 ios 前端时，他有一个切换算法很不错，于是对着 apple 文档对着用js实现一遍。</li><li>比如我学习 react ，看到一堆生命周期，就觉得非常眼熟，只要你学习过vue，这些知识点都是相通的，可以大把节省你的学习时间。</li></ul></li><li>主动学习 <ul><li>比如我今天学习js中垃圾回收(gc)这个知识 <ul><li>对比其他语言的gc <ul><li>和C语言的gc c里对象所占的内存在程序结束运行之前一直被占用，在明确释放之前不能分配给其它对象</li><li>和Java的gc java则当没有对象引用指向原先分配给某个对象的内存时，该内存便成为垃圾，这个垃圾能被自动清理。</li><li>所以，jvm的gc是怎样的？</li></ul></li><li>引申 <ul><li>怎么节省gc开销？</li><li>变量的生命周期</li></ul></li><li>总结 在知识不断联想和迁移过程中，我就会去思考在c、java、ruby、python、go分别是怎么做的，有什么共同点，我要注意什么。</li></ul></li></ul></li></ul></li><li>信息获取与筛选 前端开发从开源项目源头迅速传播过来，版本也以天的单位在更新，社区非常年轻，不断涌现新的issue与新解决方案。这些知识被整理归纳成册或者教学视频是严重滞后的，我们需要更主动的获取知识并自我归纳整理 <ul><li>搜索 <ul><li>google 在之前讲过的案例中，关键词是随着我对问题的深入，不断抽象成更贴切的描述原子问题的检索词。甚至我从信息结果中看到有价值的信息灵感术语拼接作为关键词再度搜索，这将会是你综合能力的体现。</li></ul></li><li>社区 <ul><li>github <ul><li>如何利用github搜索开源项目和代码？</li><li>有时啃源码很难的，注意issue，pr的使用。</li><li>比如我在学习react的createElement(null)在dom中的表现，当然我可以做实验，我也会去react的github搜一下release log，然后追溯进去看了一下pr和大家对此的讨论。有的同学问我要不要去啃源码，其实对着源码啃是很难得，也很枯燥。但是对着issue以及pr搭配我们的debug工具去啃，边实验边参与讨论，才是社区化敏捷学习的精髓。</li></ul></li></ul></li><li>博客&amp;文章 <ul><li>Stack Overflow</li><li>medium</li></ul></li><li>文献&amp;书籍 <ul><li>不要从头看到尾，要有针对目标阅读并整理</li></ul></li><li>社交 follow 湾区，硅谷的大牛，知名大公司开源组织，一些书的作者，技术达人等。 有机会遇到问题时向他们求助。 <ul><li>follow <ul><li>讨论区 <ul><li>slack：通过它的频道、回复、通知体系，将团体沟通的干扰降低到最小，同时又可以做到不错过重要提示。</li><li>gitter：类似知识星球的社区</li><li>discord：游戏玩家专属的一站式语音与文字聊天工具——安全、免费、无死角覆盖 PC 与移动平台。</li></ul></li><li>twitter</li><li>Hacker Noon：工程师和创业者读物</li><li>egghead：一群工作的Web开发专业人员和开放源代码提供者，它们为您提供有关行业最佳工具的简洁，信息密集的视频课程。</li></ul></li><li>rss阅读器 <ul><li>reeder</li><li>panda（chrome）</li></ul></li></ul></li></ul></li><li>面向未来的阅读方式 <ul><li>有目标的阅读 就是让资料跟着你走，而不是你跟着资料走。</li><li>看技术书，其实和信息的筛选挺像的，不仅仅要读完，更要写完。边阅读边摘录，写笔记，画思维导图等</li><li>实践性内容记得手动实现</li><li>多本书一起对比读，就像查资料一样。</li></ul></li><li>工具与实验田 <ul><li><a href="https://www.processon.com/outline/5e48aa5ee4b01f766b4594e2" target="_blank" rel="noreferrer">https://www.processon.com/outline/5e48aa5ee4b01f766b4594e2</a></li><li>工具 <ul><li>dash（快速查询api，使用snippet）</li><li>snippetsLab（管理代码片段）</li><li>alfred，workflow（自动化操作）</li><li>kaleidoscopic（文件diff）</li><li>marginnote，xmind，freshcard，lucidchat（绘图工具）</li><li>chrome 插件</li><li>awesome-mac 。。</li></ul></li><li>实验田 <ul><li>codepen（线上）</li></ul></li></ul></li><li>时间管理 敏捷学习的关键词是敏捷，要求在短时间内掌握知识，解决各类问题，同时不断加深知识点的深度和维度。但是要注意任务的轻重缓急。 <ul><li>实用omini focus</li><li>GTD时间管理法</li></ul></li><li>总结 敏捷学习的前提条件：英文的阅读能力。 <ul><li><strong>为了敏捷学习，我们就必须要学会知识迁移能力。</strong></li><li><strong>新形势下，我们需要利用好新媒体、新搜索工具以及社区，在得到大量信息后要学会筛选和整理。</strong></li><li><strong>为了更深入的理解原理，我们依然需要读书，只不过读书应该带着目的读，边读边整理，建议多本书对比着读，对比着整理。</strong></li><li><strong>当我们已经整理了很多知识，要积极参与社区的活动，去和他人分享自己的实践，同时也从他人那边获取有价值的信息。</strong></li><li><strong>得到各类信息后，需要在实践中学习和检验，我们时不时需要在实验田中做实验，检验某一个方案是否可行，把可行的有测试保障的代码很自信的搬回我们的仓库。</strong></li><li><strong>这一系列过程，我们都需要敏捷，必须对每个学习过程做好时间管控，不能深陷其中耗时太久。</strong></li><li>关于语言能力，由于当下技术大多是从开源英文社区直接传递过来，以上所有的步骤都离不开英语，所以对语言的基本阅读能力是敏捷学习的前提条件。</li><li>我并不只学js，其他的编程语言，都在学习和实践，这样才能更好的做知识迁移，遇到新知识才会有联想有感觉。</li></ul></li></ul></li><li></li></ul>',3)]))}const m=i(r,[["render",o]]);export{p as __pageData,m as default};
