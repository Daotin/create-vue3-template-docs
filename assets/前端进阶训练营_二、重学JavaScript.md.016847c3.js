import{_ as s,o as a,c as n,V as l}from"./chunks/framework.ff44d2fd.js";const o="/fe-series-notes/assets/image_cehaheFZ0x.4bbc64ed.png",t="/fe-series-notes/assets/image_zZVQSBtdEx.f47c72d6.png",p="/fe-series-notes/assets/image_DbX5vPhufL.3e03e6a4.png",e="/fe-series-notes/assets/image_0XuXJqWdPA.25b79277.png",r="/fe-series-notes/assets/image_TZsjCgHmqi.9534736a.png",c="/fe-series-notes/assets/image_O7a_mJu8_C.fdf43f7a.png",i="/fe-series-notes/assets/image_vRZ7clMgMg.9a334c3d.png",E="/fe-series-notes/assets/image_i67rTnV9gP.e9105975.png",u="/fe-series-notes/assets/image_H3t190Ysiq.726ee8e8.png",y="/fe-series-notes/assets/image_e4nvsczXCJ.1b4c643e.png",q="/fe-series-notes/assets/image_4XuCImd4AO.d96be338.png",d="/fe-series-notes/assets/image_i-Y5y6_UYC.3c248e9c.png",F="/fe-series-notes/assets/image_pDRRVBmXtk.62b58207.png",g="/fe-series-notes/assets/image_PBSnQhsQ_J.899dd52a.png",h="/fe-series-notes/assets/image_NDLytVB9AB.6603795b.png",b="/fe-series-notes/assets/image_z5NGlM-HLh.54ea6138.png",J=JSON.parse('{"title":"二、重学JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"前端进阶训练营/二、重学JavaScript.md","filePath":"前端进阶训练营/二、重学JavaScript.md","lastUpdated":1715159925000}'),m={name:"前端进阶训练营/二、重学JavaScript.md"},v=l('<h1 id="二、重学javascript" tabindex="-1">二、重学JavaScript <a class="header-anchor" href="#二、重学javascript" aria-label="Permalink to &quot;二、重学JavaScript&quot;">​</a></h1><p>如何定义一门语言？</p><p>首先，如何定义中文？</p><p>中文有主谓宾，主语可以是代词（我你他），名词或者短语。</p><p>那么定义中文就是把一句话进行拆分成各个部分，然后逐渐细化</p><blockquote><p>📌学习一个语言最好的方式：先去理解运行时的原理，然后分析它的语法，最后编写它的执行过程（其实就是语义的过程）</p></blockquote><h1 id="产生式的定义" tabindex="-1">产生式的定义 <a class="header-anchor" href="#产生式的定义" aria-label="Permalink to &quot;产生式的定义&quot;">​</a></h1><blockquote><p>产生式： 在计算机中指 Tiger 编译器将源程序经过词法分析（Lexical Analysis）和语法分析（Syntax Analysis）后得到的一系列符合文法规则（Backus-Naur Form，BNF）的语句</p></blockquote><h2 id="production" tabindex="-1">production <a class="header-anchor" href="#production" aria-label="Permalink to &quot;production&quot;">​</a></h2><p>在计算机里面有个production产生式概念，产生式就是一步一步定义语言的基础设施。</p><h4 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h4><ul><li>符号（Symbol）：一个语法的名称 <ul><li>终结符（Terminal Symbol） <ul><li>最终在代码中出现的字符，不需要其他符号进行定义了。（比如中文的我你他，已经很具体了，可以理解为叶子节点）永远不会出现在产生式的左边</li></ul></li><li>非终结符（Non-Terminal Symbol） <ul><li>经过其他符号，由一定的逻辑关系产生的（比如主语，可以是代词，名词等组成）</li></ul></li></ul></li><li>语言的定义</li></ul><p>语言可以有一个非终结符和它的产生式来定义。</p><p>比如中文语言是由中文这个非终结符，加上中文又是由主谓宾构成，一直往下拆，然后就形成中文语言。</p><ul><li>语法树</li></ul><p>语言文本根据产生式拆分就形成的树形结构。</p><h2 id="产生式的写法" tabindex="-1">产生式的写法 <a class="header-anchor" href="#产生式的写法" aria-label="Permalink to &quot;产生式的写法&quot;">​</a></h2><p><strong>BNF：巴科斯-诺尔范式</strong></p><p><img src="'+o+'" alt=""></p><ul><li>非终结符：尖括号括起来的</li><li><code>::=</code> 表示定义</li><li><code>|</code> 表示或</li><li>终结符：使用引号包裹</li></ul><p><strong>EBNF（更常用）</strong></p><p><img src="'+t+'" alt=""></p><p>现在很多语言使用的都不是严格意义上的BNF或者EBNF，都进行了变体。</p><p><strong>JavaScript标准</strong></p><p>（不看蓝色的部分）</p><p><img src="'+p+`" alt=""></p><ul><li><code>:</code> 表示定义</li><li><code>换行</code> 表示或</li><li>终结符：加粗表示</li></ul><h2 id="产生式的练习" tabindex="-1">产生式的练习 <a class="header-anchor" href="#产生式的练习" aria-label="Permalink to &quot;产生式的练习&quot;">​</a></h2><p>1、外星语言</p><p>外星语言：</p><ul><li>某外星人采用二进制交流</li><li>它们的语言只有 “叽咕” 和 “咕叽” 两种词</li><li>外星人每说完一句，会说一个”啪”</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;外星语&gt;::= { &lt;外星句&gt; }</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;外星句&gt;::= {“叽咕”| “咕叽” } 啪</span></span></code></pre></div><p>2、数学语言四则运算，只允许10以内整数的加减乘除</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;四则运算表达式&gt;::= &lt;加法算式&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;加法算式&gt; ::= (&lt;加法算式&gt; （&quot;+&quot;|&quot;-&quot;） &lt;乘法算式&gt;) | &lt;乘法算式&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;乘法算式&gt; ::= (&lt;乘法算式&gt; （&quot;*&quot;|&quot;/&quot;） &lt;数字&gt;) | &lt;数字&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;数字&gt; ::= {&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;}</span></span></code></pre></div><p>3、 四则运算，允许整数</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;四则运算表达式&gt;::= &lt;加法算式&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;加法算式&gt; ::= (&lt;加法算式&gt; （&quot;+&quot;|&quot;-&quot;） &lt;乘法算式&gt;) | &lt;乘法算式&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;乘法算式&gt; ::= (&lt;乘法算式&gt; （&quot;*&quot;|&quot;/&quot;） &lt;数字&gt;) | &lt;数字&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;数字&gt; ::= {&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;} {&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;}</span></span></code></pre></div><p>4、四则运算，允许小数</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;数字&gt; ::= {&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;} {&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;} | {&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;} . {&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;}</span></span></code></pre></div><p>5、四则运算，允许括号</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;四则运算表达式&gt;::= &lt;括号算式&gt;（&quot;+&quot;|&quot;-&quot;）&lt;括号算式&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;加法算式&gt; ::= (&lt;加法算式&gt; （&quot;+&quot;|&quot;-&quot;） &lt;乘法算式&gt;) | &lt;乘法算式&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;乘法算式&gt; ::= (&lt;乘法算式&gt; （&quot;*&quot;|&quot;/&quot;） &lt;数字&gt;) | &lt;数字&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;括号算式&gt; ::= （&quot;(&quot; &lt;加法算式&gt; &quot;)&quot; ） | &lt;数字&gt;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;数字&gt; ::= {&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;} {&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;} | {&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;} . {&quot;0&quot;|&quot;1&quot;|&quot;2&quot;|&quot;3&quot;|&quot;4&quot;|&quot;5&quot;|&quot;6&quot;|&quot;7&quot;|&quot;8&quot;|&quot;9&quot;}</span></span></code></pre></div><h1 id="产生式在语言中的应用" tabindex="-1">产生式在语言中的应用 <a class="header-anchor" href="#产生式在语言中的应用" aria-label="Permalink to &quot;产生式在语言中的应用&quot;">​</a></h1><p>产生式定义的语言都是形式化语言。</p><h2 id="语言分类" tabindex="-1">语言分类 <a class="header-anchor" href="#语言分类" aria-label="Permalink to &quot;语言分类&quot;">​</a></h2><p><a href="https://zh.wikipedia.org/wiki/%E4%B9%94%E5%A7%86%E6%96%AF%E5%9F%BA%E8%B0%B1%E7%B3%BB" title="乔姆斯基谱系" target="_blank" rel="noreferrer">乔姆斯基谱系</a></p><blockquote><p>💡0型包含1型； 1型包含2型； 2型包含3型；</p></blockquote><p><strong>3型 正则文法（Regular）</strong></p><ul><li>左边只有一个非终结符</li><li>右边 <ul><li>无递归：随便写</li><li>有递归：只允许左递归（也就是递归只能放在表达式的左边）</li></ul></li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;A&gt;::= &lt;A&gt;? √</span></span>
<span class="line"><span style="color:#e1e4e8;">&lt;A&gt;::= ?&lt;A&gt; ×</span></span></code></pre></div><p><strong>2型 上下文无关文法</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">&lt;A&gt;::=?</span></span></code></pre></div><p><strong>1型 上下文相关文法</strong></p><p>α：代表上文</p><p>β：代表下文</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">α&lt;A&gt;β ::= α&lt;B&gt;β</span></span></code></pre></div><p><strong>0型 无限制文法</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">?::=?</span></span></code></pre></div><h2 id="词法和语法" tabindex="-1">词法和语法 <a class="header-anchor" href="#词法和语法" aria-label="Permalink to &quot;词法和语法&quot;">​</a></h2><p>大部分编程语言都是两步处理法，词法处理和文法处理。</p><ul><li>词法：采用正则文法（3型），得到有效信息Token。（还有空白，换行，注释等无关信息）</li><li>语法：上下文无关文法（2型），得到语法树。</li></ul><p>过程：</p><ul><li>我们先把一个语言当做一个正则文法，去定义其词法部分得到有效信息Token；</li><li>然后通过上下文无关文法得到语法树。语法树如果去除一些无效信息，就会得到AST抽象语法树。</li></ul><h1 id="用产生式定义javascript词法和语法" tabindex="-1">用产生式定义JavaScript词法和语法 <a class="header-anchor" href="#用产生式定义javascript词法和语法" aria-label="Permalink to &quot;用产生式定义JavaScript词法和语法&quot;">​</a></h1><p>分析JavaScript语法和词法的原因：</p><p>讲语法词法的部分，就是帮助我们补全JavaScript的产生式，最后和JavaScript的标准一样了，那么对JavaScript的方方面面都有一定的了解了。</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">输入元素 ::= 空白符 | 换行符 | 注释 | Token</span></span></code></pre></div><p>空白符WhiteSpace：</p><ul><li>空格</li><li>全角空格</li><li>所有在Unicode里面隶属于空白符分类的字符（零宽空格等）</li></ul><p>换行符（LineTerminator）：</p><ul><li>\\n</li><li>\\r</li></ul><p>注释（Comment）：</p><ul><li>单行注释</li><li>多行注释</li></ul><p>Token：</p><ul><li>直接量 Literal：7种基本类型 <ul><li>String</li><li>Number</li><li>Boolean</li><li>Null</li><li><s>Undefined</s> （没有undefined直接量的，当一个变量未赋值的时候就是undefined与null是有区别的）</li><li><s>Object</s> （是个语法结构，不在词法里面）</li><li><s>Symbol</s> （无法直接生成一个Symbol，需要用到语法结构，用函数生成）</li></ul></li><li>关键字 Keywords <ul><li>if</li><li>else</li><li>for</li><li>......</li></ul></li><li>标识符Identifier（变量）</li><li>操作符Punctuator（加减乘除，大括号，小括号等） <ul><li>×÷＋－</li></ul></li></ul><h1 id="javascript词法基本框架" tabindex="-1">JavaScript词法基本框架 <a class="header-anchor" href="#javascript词法基本框架" aria-label="Permalink to &quot;JavaScript词法基本框架&quot;">​</a></h1><p><a href="images/ECMA-262.pdf">JavaScript标准文档ECMA-262.pdf</a></p><p><img src="`+e+'" alt=""></p><ul><li>Tab</li><li>VT：竖向Tab</li><li>FF：进纸。打印机时代要换行的时候，不是指针换行，而是纸张进去一行</li><li>SP：space空格</li><li>NBSP：英文一般在空格断行，保证一个单词不出现在两行。NBSP表示不要在我这个空格换行。</li><li>ZWNBSP：zero width NBSP 没有宽度（unicode编码为FEFF）</li><li>USP：unicode 下所有的空格</li></ul><p><img src="'+r+'" alt=""></p><p>JavaScript的换行符用来标识自动插入分号规则。</p><ul><li>CR 回车</li><li>LF 换行</li></ul><p>windows是CR LF 一起的</p><p><img src="'+c+`" alt=""></p><p>Token：</p><ul><li>identifierName <ul><li>变量</li><li>get，set，async等不属于关键字的</li></ul></li></ul><h1 id="javascript语法基本框架" tabindex="-1">JavaScript语法基本框架 <a class="header-anchor" href="#javascript语法基本框架" aria-label="Permalink to &quot;JavaScript语法基本框架&quot;">​</a></h1><p>对语法的结构越熟悉，那么对JavaScript本身的语言就越熟悉。</p><p>建立知识体系，如果问你到，什么属性JavaScript，什么不属于JavaScript，心中有语法和词法两个产生式的图，那么对整个JavaScript的整个脉络就很清楚了。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">程序</span><span style="color:#E1E4E8;"> ::</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 语句</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">语句</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 表达式 </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> if表达式 </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 循环表达式 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 变量声明 </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 函数声明 </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 类声明 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> break语句</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> continue语句</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> throw语句</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> try语句 </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 块</span></span></code></pre></div><ul><li>Program 程序</li><li>Statement 语句</li><li>ExpressionStatement表达式语句：如 c = a+b</li><li>IfStatement if语句</li><li>ForStatement 循环表达式：for，while</li><li>VariableDeclaration变量声明：var，let，const</li><li>FunctionDeclaration 函数声明</li><li>ClassDeclaration 类声明</li><li>BreakStatement break语句</li><li>ContinueStatement continue语句</li><li>ThrowStatement throw语句</li><li>TryStatement try语句</li><li>Block：两个花括号之间的整个部分</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">Program ::= Statement+</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">Statement ::=  ExpressionStatement | IfStatement </span></span>
<span class="line"><span style="color:#e1e4e8;">              | VariableDeclaration | FunctionDeclaration | ClassDeclaration </span></span>
<span class="line"><span style="color:#e1e4e8;">              | BreakStatement | ContinueStatement </span></span>
<span class="line"><span style="color:#e1e4e8;">              | ThrowStatement | TryStatement </span></span>
<span class="line"><span style="color:#e1e4e8;">              | Block </span></span>
<span class="line"><span style="color:#e1e4e8;">              </span></span>
<span class="line"><span style="color:#e1e4e8;">ExpressionStatement ::= Expression + &quot;;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">Expression ::= AdditiveExpression</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">AdditiveExpression ::=  MultiplicativeExpression  </span></span>
<span class="line"><span style="color:#e1e4e8;">             | AdditiveExpression  (&quot;+&quot; | &quot;-&quot;) MultiplicativeExpression</span></span>
<span class="line"><span style="color:#e1e4e8;">             </span></span>
<span class="line"><span style="color:#e1e4e8;">MultiplicativeExpression ::= UnaryExpression（单目运算） </span></span>
<span class="line"><span style="color:#e1e4e8;">             | MultiplicativeExpression (&quot;*&quot; | &quot;/&quot;) UnaryExpression </span></span>
<span class="line"><span style="color:#e1e4e8;">             </span></span>
<span class="line"><span style="color:#e1e4e8;">UnaryExpression ::= PrimaryExpression（主要表达式）</span></span>
<span class="line"><span style="color:#e1e4e8;">             | （&quot;+&quot; | &quot;-&quot; | &quot;typeof&quot;） +  PrimaryExpression</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">PrimaryExpression ::= &quot;(&quot; Expression &quot;)&quot; | 直接量Literal | Identifier标识符</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">------</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">Block = &quot;{&quot; Statement &quot;}&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">IfStatement ::= &quot;if&quot; &quot;(&quot; Expression &quot;)&quot; Statement</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">VariableDeclaration ::= (&quot;var&quot; | &quot;let&quot; | &quot;const&quot;) Identifier标识符</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">FunctionDeclaration ::= &quot;function&quot; &quot;(&quot; Identifier &quot;)&quot; &quot;{&quot; Statement+ &quot;}&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">TryStatement ::= &quot;try&quot; &quot;{&quot; Statement+ &quot;}&quot; &quot;catch&quot; &quot;(&quot; Expression &quot;)&quot; &quot;{&quot; Statement+ &quot;}</span></span></code></pre></div><h1 id="javascript语法和词法代码分析" tabindex="-1">JavaScript语法和词法代码分析 <a class="header-anchor" href="#javascript语法和词法代码分析" aria-label="Permalink to &quot;JavaScript语法和词法代码分析&quot;">​</a></h1><p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用 <code>?:</code> 放在第一个选项前来消除这种副作用。</p><p>其中 <code>?:</code> 是非捕获元之一，还有两个非捕获元是 <code>?=</code> 和 <code>?!</code>，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p><ul><li><a href="https://blog.csdn.net/csm0912/article/details/81206848" title="https://blog.csdn.net/csm0912/article/details/81206848" target="_blank" rel="noreferrer">https://blog.csdn.net/csm0912/article/details/81206848</a></li><li><a href="https://www.runoob.com/regexp/regexp-syntax.html" title="https://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noreferrer">https://www.runoob.com/regexp/regexp-syntax.html</a></li></ul><h1 id="构建语法树" tabindex="-1">构建语法树 <a class="header-anchor" href="#构建语法树" aria-label="Permalink to &quot;构建语法树&quot;">​</a></h1><h1 id="构建语法树-1" tabindex="-1">构建语法树 <a class="header-anchor" href="#构建语法树-1" aria-label="Permalink to &quot;构建语法树&quot;">​</a></h1><p><img src="`+i+`" alt=""></p><p>这是之前的JavaScript语法基本框架：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">程序</span><span style="color:#E1E4E8;"> ::</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 语句</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">语句</span><span style="color:#E1E4E8;">::</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> 表达式 </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> if表达式 </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 循环表达式 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 变量声明 </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 函数声明 </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 类声明 </span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> break语句</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> continue语句</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> throw语句</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> try语句 </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> 块</span></span></code></pre></div><ul><li>Program 程序</li><li>Statement 语句</li><li>ExpressionStatement表达式语句：如 c = a+b</li><li>IfStatement if语句</li><li>ForStatement 循环表达式：for，while</li><li>VariableDeclaration变量声明：var，let，const</li><li>FunctionDeclaration 函数声明</li><li>ClassDeclaration 类声明</li><li>BreakStatement break语句</li><li>ContinueStatement continue语句</li><li>ThrowStatement throw语句</li><li>TryStatement try语句</li><li>Block：两个花括号之间的整个部分</li></ul><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">Program ::= Statement+</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">Statement ::=  ExpressionStatement | IfStatement </span></span>
<span class="line"><span style="color:#e1e4e8;">              | VariableDeclaration | FunctionDeclaration | ClassDeclaration </span></span>
<span class="line"><span style="color:#e1e4e8;">              | BreakStatement | ContinueStatement </span></span>
<span class="line"><span style="color:#e1e4e8;">              | ThrowStatement | TryStatement </span></span>
<span class="line"><span style="color:#e1e4e8;">              | Block </span></span>
<span class="line"><span style="color:#e1e4e8;">              </span></span>
<span class="line"><span style="color:#e1e4e8;">ExpressionStatement ::= Expression + &quot;;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">Expression ::= AdditiveExpression</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">AdditiveExpression ::=  MultiplicativeExpression  </span></span>
<span class="line"><span style="color:#e1e4e8;">             | AdditiveExpression  (&quot;+&quot; | &quot;-&quot;) MultiplicativeExpression</span></span>
<span class="line"><span style="color:#e1e4e8;">             </span></span>
<span class="line"><span style="color:#e1e4e8;">MultiplicativeExpression ::= UnaryExpression（单目运算） </span></span>
<span class="line"><span style="color:#e1e4e8;">             | MultiplicativeExpression (&quot;*&quot; | &quot;/&quot;) UnaryExpression </span></span>
<span class="line"><span style="color:#e1e4e8;">             </span></span>
<span class="line"><span style="color:#e1e4e8;">UnaryExpression ::= PrimaryExpression（主要表达式）</span></span>
<span class="line"><span style="color:#e1e4e8;">             | （&quot;+&quot; | &quot;-&quot; | &quot;typeof&quot;） +  PrimaryExpression</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">PrimaryExpression ::= &quot;(&quot; Expression &quot;)&quot; | 直接量Literal | Identifier标识符</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">------</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">Block = &quot;{&quot; Statement &quot;}&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"> </span></span>
<span class="line"><span style="color:#e1e4e8;">IfStatement ::= &quot;if&quot; &quot;(&quot; Expression &quot;)&quot; Statement</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">VariableDeclaration ::= (&quot;var&quot; | &quot;let&quot; | &quot;const&quot;) Identifier标识符</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">FunctionDeclaration ::= &quot;function&quot; &quot;(&quot; Identifier &quot;)&quot; &quot;{&quot; Statement+ &quot;}&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">TryStatement ::= &quot;try&quot; &quot;{&quot; Statement+ &quot;}&quot; &quot;catch&quot; &quot;(&quot; Expression &quot;)&quot; &quot;{&quot; Statement+ &quot;}</span></span></code></pre></div><p>根据之前的JavaScript语法基本框架，写成对应的json格式的语法定义代码。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> syntax </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Program: [[</span><span style="color:#9ECBFF;">&quot;StatementList&quot;</span><span style="color:#E1E4E8;">]],</span></span>
<span class="line"><span style="color:#E1E4E8;">    StatementList: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;Statement&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;StatementList&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Statement&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    Statement: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;ExpressionStatement&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;IfStatement&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;VariableDeclaration&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;FunctionDeclaration&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ExpressionStatement: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;Expression&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;;&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    IfStatement: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;if&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Expression&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Statement&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    VariableDeclaration: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;var&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Identifier&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;let&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Identifier&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;const&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Identifier&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    FunctionDeclaration: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;function&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Identifier&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;{&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;StatementList&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;}&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    Expression: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;AdditiveExpression&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    AdditiveExpression: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;MultiplicativeExpression&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;AdditiveExpression&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;+&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;MultiplicativeExpression&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;AdditiveExpression&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;-&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;MultiplicativeExpression&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    MultiplicativeExpression: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;PrimaryExpression&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;MultiplicativeExpression&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;*&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;PrimaryExpression&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;MultiplicativeExpression&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;PrimaryExpression&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    PrimaryExpression: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;(&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Expression&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;)&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;Literal&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;Identifier&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    Literal: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;StringLiteral&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;NumberLiteral&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;BooleanLiteral&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        [</span><span style="color:#9ECBFF;">&quot;NullLiteral&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h1 id="根据语法树实现语法分析" tabindex="-1">根据语法树实现语法分析 <a class="header-anchor" href="#根据语法树实现语法分析" aria-label="Permalink to &quot;根据语法树实现语法分析&quot;">​</a></h1><p>根据上一节构建的JSON语法树，分析Token流。</p><p>最开始的语法分析器能接受什么？</p><p>就是最小的终结符，比如if，function，var等，就是把所有的非终结符展开的结果。这叫求closure</p><p><img src="`+E+`" alt=""></p><h2 id="运行时的基础设施" tabindex="-1">运行时的基础设施 <a class="header-anchor" href="#运行时的基础设施" aria-label="Permalink to &quot;运行时的基础设施&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">let a;</span></span>
<span class="line"><span style="color:#e1e4e8;">let b;</span></span></code></pre></div><p>执行具体声明的过程</p><blockquote><p>需要规定变量需要存储在哪里？</p></blockquote><p>JS规定了一个执行时的环境，Environment，运行时会有一种特殊的对象：environmentRecord，专门用来存储变量。</p><h3 id="变量存储" tabindex="-1">变量存储 <a class="header-anchor" href="#变量存储" aria-label="Permalink to &quot;变量存储&quot;">​</a></h3><h4 id="number" tabindex="-1"><strong>Number</strong> <a class="header-anchor" href="#number" aria-label="Permalink to &quot;**Number**&quot;">​</a></h4><p>JS里面默认是双精度浮点数表示（不管是整数还是小数），占用8个字节，64个bit。</p><p><img src="`+u+'" alt=""></p><ul><li>蓝色部分为符号位。0表示正数，1表示负数</li><li>黄色部分：指数位，表示2的多少次方</li><li>白色位置：54位，表示具体数值（比如3为11）</li></ul><p>js中处理数字很复杂：</p><ul><li>十进制（还有小数，科学计数法等需要处理）</li><li>二进制</li><li>八进制</li><li>十六进制</li></ul><h4 id="string" tabindex="-1"><strong>String</strong> <a class="header-anchor" href="#string" aria-label="Permalink to &quot;**String**&quot;">​</a></h4><p>字符串</p><p>码点（code point），就是字符的编号。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#79B8FF;">U</span><span style="color:#F97583;">+</span><span style="color:#79B8FF;">0000</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span></code></pre></div><p>上式中，U+表示紧跟在后面的十六进制数是Unicode的码点。</p><p><strong>码点表示法</strong></p><p>JavaScript允许直接用码点表示Unicode字符，写法是&quot;反斜杠+u+码点&quot;。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;好&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#79B8FF;">\\u597D</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// true</span></span></code></pre></div><p>但是，这种表示法对4字节的码点无效。ES6修正了这个问题，只要将码点放在大括号内，就能正确识别。</p><p><img src="'+y+`" alt=""></p><p>ES6新增了几个专门处理4字节码点的函数：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">String.</span><span style="color:#B392F0;">fromCodePoint</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 从Unicode码点返回对应字符</span></span>
<span class="line"><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">codePointAt</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 从字符返回对应的码点</span></span>
<span class="line"><span style="color:#79B8FF;">String</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">at</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">// 返回字符串给定位置的字符</span></span></code></pre></div><h4 id="字符集" tabindex="-1"><strong>字符集</strong> <a class="header-anchor" href="#字符集" aria-label="Permalink to &quot;**字符集**&quot;">​</a></h4><ul><li>ASCII字符集 <ul><li>字符数量太少（大小写字母，0-9，一些特殊的符号，共127个字符）</li></ul></li><li>Unicode字符集（大部分操作系统，JS都是采用的该字符集） <ul><li>兼容各国的字符</li></ul></li><li>UCS <ul><li>相当于Unicode2.0版本</li></ul></li><li>GB国标（中文的字符集） <ul><li>GB2312</li><li>GBK（GB13000）</li><li>GB18030（基本不包含其他国家的文字）</li></ul></li><li>ISO-8859（一系列字符集集合） <ul><li>欧洲诸国自己的文字字符集</li></ul></li><li>BIG5（台湾繁体中文字符集）</li></ul><blockquote><p>💡字符集只能选一个，JavaScript选择了Unicode作为字符集。</p></blockquote><p>Unicode源于一个很简单的想法：将全世界所有的字符包含在一个集合里，计算机只要支持这一个字符集，就能显示所有的字符，再也不会有乱码了。</p><p><a href="https://www.ruanyifeng.com/blog/2014/12/unicode.html" title="   https://www.ruanyifeng.com/blog/2014/12/unicode.html" target="_blank" rel="noreferrer"> https://www.ruanyifeng.com/blog/2014/12/unicode.html</a></p><h4 id="编码" tabindex="-1"><strong>编码</strong> <a class="header-anchor" href="#编码" aria-label="Permalink to &quot;**编码**&quot;">​</a></h4><p>Unicode字符集采用UTF编码格式。</p><p>因为Unicode太大，所以编码就是规定如何合理保存Unicode对应的码点。</p><p>编码格式</p><ul><li>UTF-8</li><li>UTF-16</li></ul><p><img src="`+q+'" alt=""></p><p><strong>UTF-8</strong></p><ul><li>8bit存储，一个字节，就是最小用一个字节表示一个Unicode码点的编码方式，但是也有可能用到3-4个字节</li><li>兼容ASCII编码（就是在前127个字符中，同一个码点，在ASCII字符集和Unicode字符集表示的字符是同一个，并且在存储格式上也是一致的）</li></ul><p>当一个字节不足以容纳码点时，如何采用更多字节表示呢？</p><p>比如汉字“一”，Unicode码点是19968，二进制是 10011000000000</p><p><img src="'+d+'" alt=""></p><p>黄色部分为占用字节：3个字节</p><p>剩下的字节开头均为10，蓝色部分为有效数字。</p><p><strong>UTF-16</strong></p><ul><li>很多年前，人们认为2的16次方（65536）几乎包含所有Unicode码点了，于是码点和编码格式统一了</li></ul><p><img src="'+F+'" alt=""></p><ul><li>但是后来Unicode越来越大，东西越塞越多，Emoji也塞进去了，就超出了65536个字符了</li><li>那超出16个bit，如何表示呢？这就是UTF-16规定的方法。 <ul><li>超出需要4个字节</li><li>第一个字节开头为110110，第三个字节开头为110111</li><li>剩下的塞进码点的二进制 <img src="'+g+`" alt=""></li></ul></li></ul><blockquote><p><strong>JavaScript采用UTF-16编码方式进行存储的。</strong> 所以我们平时使用的charAt等并不是真正针对字符的，而是针对UTF-16格式的。</p></blockquote><p><strong>UTF-8 vs UTF-16</strong></p><p>UTF-8在存储比如纯英文的时候，存储空间时更小的，但是存储一些特殊文字，特殊符号的时候，UTF-16占用空间更小了。</p><blockquote><p>💡JavaScript语言采用Unicode字符集，但是只支持一种编码方法。这种编码既不是UTF-16，也不是UTF-8，更不是UTF-32。上面那些编码方法，JavaScript都不用。 <strong>JavaScript用的是UCS-2！</strong></p></blockquote><p>由于JavaScript只能处理UCS-2编码，造成所有字符在这门语言中都是2个字节，如果是4个字节的字符，会当作两个双字节的字符处理。</p><p>JavaScript的字符函数（charAt，slice，substring，replace等）都受到这一点的影响，无法返回正确结果。</p><h2 id="number的语义分析" tabindex="-1">Number的语义分析 <a class="header-anchor" href="#number的语义分析" aria-label="Permalink to &quot;Number的语义分析&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> valueStr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> node.value; </span><span style="color:#6A737D;">// 10,0x1100,0xff等</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> valueStr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 进制</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 判断二进制数字</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (valueStr.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0b&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (valueStr.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0o&#39;</span><span style="color:#E1E4E8;">)) { </span><span style="color:#6A737D;">// 判断八进制数字</span></span>
<span class="line"><span style="color:#E1E4E8;">    base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (valueStr.</span><span style="color:#B392F0;">startsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0x&#39;</span><span style="color:#E1E4E8;">)) { </span><span style="color:#6A737D;">// 判断十六进制数字</span></span>
<span class="line"><span style="color:#E1E4E8;">    base </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (len</span><span style="color:#F97583;">--</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 先算高位，再算低位</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> valueStr.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(valueStr.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> len </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (c </span><span style="color:#F97583;">&gt;=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        c </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> c </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> base </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> c;</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;value==&gt;&#39;</span><span style="color:#E1E4E8;">, c, value);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="string的语义分析" tabindex="-1">String的语义分析 <a class="header-anchor" href="#string的语义分析" aria-label="Permalink to &quot;String的语义分析&quot;">​</a></h2><h3 id="转移字符" tabindex="-1">转移字符 <a class="header-anchor" href="#转移字符" aria-label="Permalink to &quot;转移字符&quot;">​</a></h3><p>转义字符是字符的一种间接表示方式。在特殊语境中，无法直接使用字符自身。例如，在字符串中包含引号。</p><p>比如：&quot;\\&quot;&quot;, &quot;\\\\&quot;</p><h3 id="转义序列" tabindex="-1">转义序列 <a class="header-anchor" href="#转义序列" aria-label="Permalink to &quot;转义序列&quot;">​</a></h3><table><thead><tr><th>序列</th><th>代表字符</th></tr></thead><tbody><tr><td>\\0</td><td>Null字符（\\u0000）</td></tr><tr><td>\\b</td><td>退格符（\\u0008）</td></tr><tr><td>\\t</td><td>水平制表符（\\u0009）</td></tr><tr><td>\\n</td><td>换行符（\\u000A）</td></tr><tr><td>\\v</td><td>垂直制表符（\\u000B）</td></tr><tr><td>\\f</td><td>换页符（\\u000C）</td></tr><tr><td>\\r</td><td>回车符（\\u000D）</td></tr><tr><td>\\&quot;</td><td>双引号（\\u0022）</td></tr><tr><td>\\&#39;</td><td>撇号或单引号（\\u0027）</td></tr><tr><td>\\\\</td><td>反斜杠（\\u005C）</td></tr><tr><td>\\xXX</td><td>由 2 位十六进制数值 XX 指定的 Latin-1 字符</td></tr><tr><td>\\uXXXX</td><td>由 4 位十六进制数值 XXXX 指定的 Unicode 字符</td></tr><tr><td>\\XXX</td><td>由 1~3 位八进制数值（000 到 377）指定的 Latin-1 字符，可表示 256个 字符。如 \\251 表示版本符号。注意，ECMAScript 3.0 不支持，考虑到兼容性不建议使用。</td></tr></tbody></table><blockquote><p>💡如果在一个正常字符前添加反斜杠，JavaScript 会忽略该反斜杠。 document.write (&quot;子曰：\\&quot;学\\而\\不\\思\\则\\罔\\, \\思\\而\\不\\学\\则\\殆\\。\\&quot;&quot;)</p></blockquote><p><strong>unicode和字符互转</strong></p><p>如何才能将任意字符转换成\\uxxx这种形式呢？</p><p>首先要得到字符的 Unicode 编码，然后再将其转化成十六进制编码，那么 js unicode 字符编码的问题就迎刃而解，在 javascript 里，有一个字符串方法：charCodeAt(); 这个 方法可返回指定位置的字符的 Unicode 编码。</p><p>这个返回值是 0 - 65535 之间的整数。需要传入一个参数：这个是参数表 示字符串中某个位置的数字，即字符在字符串中的下标。例如：</p><p><code>&#39;1&#39;.charCodeAt(0) = 49</code></p><p>得到了字符的 unicode 编码，再使用字符串方法：toString(16)。就得到了 js unicode 的十六进制代码。例如：</p><p><code>&#39;1&#39;.charCodeAt(0).toString(16); // 31</code></p><p>然后补全四位：</p><p><code>\\u0031</code></p><p>封装函数：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> Unicode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">stringify</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> res </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [],</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  len </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> len; </span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">i) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    res[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#9ECBFF;">&quot;00&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">charCodeAt</span><span style="color:#E1E4E8;">(i).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">u&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#79B8FF;">\\\\</span><span style="color:#9ECBFF;">u&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">str</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    str </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\\\</span><span style="color:#9ECBFF;">/</span><span style="color:#F97583;">g</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;%&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unescape</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>参考链接：</p><p><a href="https://blog.csdn.net/renfufei/article/details/47258309" title=" JavaScript中字符串与Unicode编码的互相转换_铁锚的CSDN博客-CSDN博客_js unicode转字符串 JavaScript中字符串与Unicode编码的互相转换这段代码演示了JavaScript中字符串与Unicode编码的转换 https://blog.csdn.net/renfufei/article/details/47258309" target="_blank" rel="noreferrer"> JavaScript中字符串与Unicode编码的互相转换_铁锚的CSDN博客-CSDN博客_js unicode转字符串 JavaScript中字符串与Unicode编码的互相转换这段代码演示了JavaScript中字符串与Unicode编码的转换 https://blog.csdn.net/renfufei/article/details/47258309</a></p><h1 id="javascript对象" tabindex="-1">JavaScript对象 <a class="header-anchor" href="#javascript对象" aria-label="Permalink to &quot;JavaScript对象&quot;">​</a></h1><h1 id="对象的基础知识" tabindex="-1">对象的基础知识 <a class="header-anchor" href="#对象的基础知识" aria-label="Permalink to &quot;对象的基础知识&quot;">​</a></h1><p>前面讲解了NumberLieral和StringLiteral。</p><ul><li><p>BooleanLiteral只有true和false</p></li><li><p>NullLiteral只有null；</p></li><li><p>UndefinedLiteral 在语法上写不出来，有全局变量undefined</p><p>js中的void和其他语言的void不同，js中的void是运算符，始终返回undefined。因此常用<code>void 0</code> 得到undefined值。</p></li><li><p>Symbol 只能通过API去创建</p></li><li><p>对象</p><ul><li>RegularExpressionLiteral</li><li>ObjectLiteral</li><li>ArrayLiteral</li></ul></li></ul><h2 id="对象的概念" tabindex="-1">对象的概念 <a class="header-anchor" href="#对象的概念" aria-label="Permalink to &quot;对象的概念&quot;">​</a></h2><blockquote><p>💡对象就是唯一标识，状态和行为的三合一产物。</p></blockquote><p>唯一标识identifier：存储的内存地址</p><p>状态state：对象的一些属性</p><p>行为behavior：状态的改变，而不是该对象具备的行为。</p><blockquote><p>💡比如：狗咬人。是狗对象有个bite方法吗？不是而是人有个hurt方法。狗咬人，狗的状态未改变，人的状态改变了，被咬了，所以人类有个方法hurt。</p></blockquote><h2 id="基于类的面向对象描述方式class" tabindex="-1">基于类的面向对象描述方式Class <a class="header-anchor" href="#基于类的面向对象描述方式class" aria-label="Permalink to &quot;基于类的面向对象描述方式Class&quot;">​</a></h2><p>类是一种常见的描述对象的方式。</p><ul><li>归类思想：C++的多继承</li><li>分类思想：C#和Java不允许多重继承。使用接口弥补抽象能力的不足</li><li>原型思想：JavaScript采用一种小众的面向对象思路：<code>Prototype</code>，思想就是：照葫芦画瓢</li></ul><h1 id="javascript对象-1" tabindex="-1">JavaScript对象 <a class="header-anchor" href="#javascript对象-1" aria-label="Permalink to &quot;JavaScript对象&quot;">​</a></h1><p>原型的思维方式也很常见，是一种照猫画虎，照葫芦画瓢的思想。</p><p><strong>每个对象只需要描述跟原型的区别即可。</strong> 在访问的时候，如果自己没有该属性，会根据prototype往父级层层寻找。</p><p><img src="`+h+'" alt=""></p><p>JavaScript对象由property和一个指向其他对象的prototype组成。</p><p><strong>property</strong></p><p>kv键值对。</p><p>k：</p><ul><li>String</li><li>Symbol 两个不会相等的属性</li></ul><p>v：</p><ul><li>Data 普通数据</li><li>Accessor ：getter，setter</li></ul><p>JavaScript用属性来统一抽象对象的状态和行为。</p><p>一般来说，数据属性用于描述状态。访问器属性用于描述行为。</p><p>数据属性中如果存储函数，也可以描述行为。</p><p>Data属性和Accessor 属性</p><p><img src="'+b+'" alt=""></p><p><strong>prototype</strong></p><p>当我们访问属性时，如果当前对象没有，则会沿着原型找原型对象是否有此名称的属性，而原型对象还可能有原型，因此，会有“原型链”这一说法。</p><p>这一算法保证了，每个对象只需要描述自己和原型的区别即可。</p><p><em>不能删除父对象上的属性怎么办？</em></p><p>可以设置和父对象相同的属性名，值为undefined进行覆盖。</p><h2 id="对象的操作" tabindex="-1">对象的操作 <a class="header-anchor" href="#对象的操作" aria-label="Permalink to &quot;对象的操作&quot;">​</a></h2><p>基本操作</p><p>{} . [] Object.defineProperty</p><p>纯粹基于原型的面向对象编程</p><p>Object.create</p><p>Object.setPrototypeOf</p><p>Object.getPrototypeOf</p>',223),B=[v];function S(C,f,k,x,_,P){return a(),n("div",null,B)}const U=s(m,[["render",S]]);export{J as __pageData,U as default};
