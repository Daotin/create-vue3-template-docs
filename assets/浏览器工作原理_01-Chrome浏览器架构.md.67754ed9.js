import{_ as e,o as t,c as a,V as r}from"./chunks/framework.ff44d2fd.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器工作原理/01-Chrome浏览器架构.md","filePath":"浏览器工作原理/01-Chrome浏览器架构.md","lastUpdated":1712818751000}'),p={name:"浏览器工作原理/01-Chrome浏览器架构.md"},o=r('<p>chrome 浏览器采用的是多进程架构。</p><h2 id="进程-vs-线程" tabindex="-1">进程 vs 线程 <a class="header-anchor" href="#进程-vs-线程" aria-label="Permalink to &quot;进程 vs 线程&quot;">​</a></h2><p>进程就类似一个车间，有一个组长就是主线程。剩下的工人都是线程。</p><p>任何一个工人罢工都会导致流水线停转，导致生产不了。也就是说进程中的任意一线程执行出错，都会导致整个进程的崩溃。</p><p>工人们都可以共用休息区。线程之间共享进程中的数据。</p><h2 id="浏览器的多线程" tabindex="-1">浏览器的多线程 <a class="header-anchor" href="#浏览器的多线程" aria-label="Permalink to &quot;浏览器的多线程&quot;">​</a></h2><p><strong>浏览器打开一个页面，为什么至少 4 个进程？</strong></p><p>**浏览器进程。**主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</p><p>**渲染进程。**核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</p><p>**GPU 进程。**其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</p><p>**网络进程。**主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</p><p>**插件进程。**主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</p><p><img src="https://raw.githubusercontent.com/Daotin/pic/master/img/20190912171247.png" alt=""></p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p><em>即使是如今的多进程架构，我偶尔还会碰到一些由于单个页面卡死最终崩溃导致所有页面崩溃的情况，请问这是什么原因呢？</em></p><p>通常情况下是一个页面使用一个进程，但是，有一种情况，叫&quot;同一站点(same-site)&quot;，具体地讲，我们将“同一站点”定义为根域名（例如，geekbang.org）加上协议（例如，https:// 或者 http://），还包含了该根域名下的所有子域名和不同的端口，比如下面这三个：</p><p><a href="https://time.geekbang.org" target="_blank" rel="noreferrer">https://time.geekbang.org</a></p><p><a href="https://www.geekbang.org" target="_blank" rel="noreferrer">https://www.geekbang.org</a></p><p><a href="https://www.geekbang.org:8080" target="_blank" rel="noreferrer">https://www.geekbang.org:8080</a></p><p>都是属于同一站点，因为它们的协议都是 https，而根域名也都是 geekbang.org。你也许了解同源策略，但是同一站点和同源策略还是存在一些不同地方，在这里你需要了解它们不是同一件事就行了。</p><p>Chrome 的默认策略是，每个标签对应一个渲染进程。但是如果从一个页面打开了新页面，而新页面和当前页面属于同一站点时，那么新页面会复用父页面的渲染进程。官方把这个默认策略叫 process-per-site-instance。</p><p>直白的讲，就是如果几个页面符合同一站点，那么他们将被分配到一个渲染进程里面去。</p><p>所以，这种情况下，一个页面崩溃了，会导致同一站点的页面同时崩溃，因为他们使用了同一个渲染进程。</p><p>为什么要让他们跑在一个进程里面呢？</p><p>因为在一个渲染进程里面，他们就会共享 JS 的执行环境，也就是说 A 页面可以直接在 B 页面中执行脚本。因为是同一家的站点，所以是有这个需求的。</p>',25),s=[o];function n(h,i,_,c,g,m){return t(),a("div",null,s)}const b=e(p,[["render",n]]);export{d as __pageData,b as default};
