import{_ as t,o as p,c as a,V as e}from"./chunks/framework.ff44d2fd.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器工作原理/02-TCP协议：如何保证页面文件能被完整送达浏览器？.md","filePath":"浏览器工作原理/02-TCP协议：如何保证页面文件能被完整送达浏览器？.md","lastUpdated":1712818751000}'),P={name:"浏览器工作原理/02-TCP协议：如何保证页面文件能被完整送达浏览器？.md"},_=e('<h2 id="ip-udp-tcp" tabindex="-1">IP &amp;&amp; UDP &amp;&amp; TCP <a class="header-anchor" href="#ip-udp-tcp" aria-label="Permalink to &quot;IP &amp;&amp; UDP &amp;&amp; TCP&quot;">​</a></h2><p>IP 中包括源地址IP，目标地址IP。</p><p>UDP协议包括要发送到的应用程序的端口号。</p><p><strong>所以 IP 通过 IP 地址信息把数据包发送给指定的电脑，而 UDP 通过端口号把数据包分发给正确的程序。</strong></p><p><img src="https://raw.githubusercontent.com/Daotin/pic/master/img/20190912172107.png" alt=""></p><p>在使用 UDP 发送数据时，有各种因素会导致数据包出错，虽然 UDP 可以校验数据是否正确，但是对于错误的数据包，UDP 并不提供重发机制，只是丢弃当前的包，而且 UDP 在发送之后也无法知道是否能达到目的地。</p><p>虽说 UDP 不能保证数据可靠性，但是传输速度却非常快，，所以 UDP 会应用在一些关注速度、但不那么严格要求数据完整性的领域，如在线视频、互动游戏等。</p><p>所以就引入<strong>TCP协议</strong>：</p><p>对于数据包丢失的情况，TCP 提供重传机制；</p><p>TCP 引入了数据包排序机制，用来保证把乱序的数据包组合成一个完整的文件。</p><p>一个完整的TCP连接的生命周期：</p><p><img src="https://raw.githubusercontent.com/Daotin/pic/master/img/20190912172151.png" alt=""></p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p><em>TCP与Http的关系？</em></p><p>HTTP协议和TCP协议都是TCP/IP协议簇的子集。</p><p>HTTP协议属于应用层，TCP协议属于传输层，HTTP协议位于TCP协议的上层。</p><p>请求方要发送的数据包，在应用层加上HTTP头以后会交给传输层的TCP协议处理，应答方接收到的数据包，在传输层拆掉TCP头以后交给应用层的HTTP协议处理。建立 TCP 连接后会顺序收发数据，请求方和应答方都必须依据 HTTP 规范构建和解析HTTP报文。</p><p><img src="https://raw.githubusercontent.com/Daotin/pic/master/img/20190912172217.png" alt=""></p>',18),r=[_];function o(s,n,i,T,c,m){return p(),a("div",null,r)}const l=t(P,[["render",o]]);export{h as __pageData,l as default};
