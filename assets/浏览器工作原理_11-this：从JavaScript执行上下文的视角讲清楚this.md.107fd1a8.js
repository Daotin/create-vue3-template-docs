import{_ as s,o as a,c as n,V as p}from"./chunks/framework.ff44d2fd.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器工作原理/11-this：从JavaScript执行上下文的视角讲清楚this.md","filePath":"浏览器工作原理/11-this：从JavaScript执行上下文的视角讲清楚this.md","lastUpdated":1712818751000}'),o={name:"浏览器工作原理/11-this：从JavaScript执行上下文的视角讲清楚this.md"},l=p(`<p>先看下下面的代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> myObj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name : </span><span style="color:#9ECBFF;">&quot; 极客时间 &quot;</span><span style="color:#E1E4E8;">, </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">showThis</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">// this指向 myObj</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">(){console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">)}  </span><span style="color:#6A737D;">// this 指向 window</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">myObj.</span><span style="color:#B392F0;">showThis</span><span style="color:#E1E4E8;">()</span></span></code></pre></div><p><em>为什么第二个this指向window呢？</em></p><p>答：this 没有作用域的限制，这点和变量不一样，所以<strong>嵌套函数不会从调用它的函数中继承 this</strong>，而普通函数中改的this就是指向的window。</p><blockquote><p>tips：如果使用了严格模式，普通函数的this为undefined。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#9ECBFF;">&#39;use strict&#39;</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;">();</span></span></code></pre></div></blockquote>`,5),t=[l];function e(c,E,r,i,y,_){return a(),n("div",null,t)}const F=s(o,[["render",e]]);export{h as __pageData,F as default};
