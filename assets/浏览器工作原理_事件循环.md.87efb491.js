import{_ as s,o as n,c as a,V as o}from"./chunks/framework.ff44d2fd.js";const l="/fe-series-notes/assets/img-20240503100572.57982ddc.png",p="/fe-series-notes/assets/img-20240503100532.9fae190b.png",e="/fe-series-notes/assets/img-20240503130509.efc2864e.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器工作原理/事件循环.md","filePath":"浏览器工作原理/事件循环.md","lastUpdated":1714728555000}'),t={name:"浏览器工作原理/事件循环.md"},c=o('<p>渲染进程的主线程需要处理各种各样的任务，JS脚本，DOM渲染，布局，CSS计算，事件等等，V8引擎也是在主线程上运行的。</p><p>这就要一套系统来维持主线程的运转，这就是事件循环。</p><h2 id="事件循环和消息队列" tabindex="-1">事件循环和消息队列 <a class="header-anchor" href="#事件循环和消息队列" aria-label="Permalink to &quot;事件循环和消息队列&quot;">​</a></h2><p>如果是你，你会如何设计这个系统？</p><p>1、第一版</p><p>通常来说，主线程会按照顺序执行任务，如果是一些确定的任务还好，但是这就有一个缺点了，就是无法执行临时新到的新任务？如何才能执行？这就需要事件循环机制了。</p><p>2、第二版</p><p>加入循环的机制，等待任务的到来。来一个，执行一个。</p><p><img src="'+l+'" alt=""></p><p>缺点：其他的线程无法把任务给主线程执行？</p><p>3、第三版</p><p>引入「消息队列」，主线程接收到的IO线程的任务，装入消息队列，主线程循环从消息队列中取任务执行。</p><p><img src="'+p+`" alt=""></p><h2 id="宏任务-微任务" tabindex="-1">宏任务，微任务 <a class="header-anchor" href="#宏任务-微任务" aria-label="Permalink to &quot;宏任务，微任务&quot;">​</a></h2><p>加入到消息队列的任务种类很多，如输入事件（鼠标滚动、点击、移动）、微任务、文件读写、WebSocket、JavaScript 定时器等等。除此之外，消息队列中还包含了很多与页面相关的事件，如 JavaScript 执行、解析 DOM、样式计算、布局计算、CSS 动画等。</p><p>但是由于消息队列先进先出的特性，导致一些实时性比较高的任务，如果加入的晚，就不能及时执行。比如一个DOM的变化，如果前面任务执行的很长时间，界面就不能得到及时的渲染。</p><p><strong>解决办法：微任务。</strong></p><p>通常我们把消息队列中的任务称为宏任务，每个宏任务中都包含了一个微任务队列，在执行宏任务的过程中，如果 DOM 有变化，那么就会将该变化添加到微任务列表中，等宏任务中的主要功能都直接完成之后，这时候，渲染引擎并不着急去执行下一个宏任务，而是执行当前宏任务中的微任务，这就保证了DOM的变化，页面能够及时响应。</p><p>能放进微任务的都是<strong>异步执行</strong>的任务。</p><p>每个宏任务都关联了一个微任务队列。</p><p>那么接下来，我们就需要分析两个重要的时间点——微任务产生的时机和执行微任务队列的时机。</p><p>微任务产生的方式： 1、使用 MutationObserver 监控某个 DOM 节点的变化 2、使用 Promise</p><p>执行时机：通常情况下，在当前宏任务中的 JavaScript 快执行完成时，也就在 JavaScript 引擎准备退出全局执行上下文并清空调用栈的时候，JavaScript 引擎会检查全局执行上下文中的微任务队列，然后按照顺序执行队列中的微任务。</p><p>如果在执行微任务的过程中，产生了新的微任务，同样会将该微任务添加到微任务队列中，V8 引擎一直循环执行微任务队列中的任务，直到队列为空才算执行结束。也就是说在执行微任务过程中产生的新的微任务并不会推迟到下个宏任务中执行，而是在当前的宏任务中继续执行。</p><h3 id="promise和微任务有啥关系" tabindex="-1">Promise和微任务有啥关系？ <a class="header-anchor" href="#promise和微任务有啥关系" aria-label="Permalink to &quot;Promise和微任务有啥关系？&quot;">​</a></h3><p>Promise解决的是回调地狱的问题。</p><p>Promise的一般使用如下：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">executor</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 将 Promise 改成我们自己的 Bromsie</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> demo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bromise</span><span style="color:#E1E4E8;">(executor)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onResolve</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(value)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">demo.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(onResolve)</span></span></code></pre></div><p>当执行到resolve(100)的时候，实际上会触发 demo.then 设置的回调函数 onResolve，但是根据上面的代码的执行的顺序，很显然，当执行到resolve(100)的时候，demo.then(onResolve) 还没有执行，就是还没有绑定onResolve方法，也就没法打印出100.</p><p>但是最后居然打印了100，那么在Promise的内容到底做了什么魔法处理？</p><p>下面是Promise简单的实现原理：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Bromise</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">executor</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> onResolve_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> onReject_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">// 模拟实现 resolve 和 then，暂不支持 rejcet</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">onResolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">onReject</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        onResolve_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> onResolve</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">onResolve_</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">executor</span><span style="color:#E1E4E8;">(resolve, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>如果是这样的话，在执行上面代码的时候就会报错：</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark"><code><span class="line"><span style="color:#e1e4e8;">Uncaught TypeError: onResolve_ is not a function</span></span>
<span class="line"><span style="color:#e1e4e8;">    at resolve (&lt;anonymous&gt;:10:13)</span></span>
<span class="line"><span style="color:#e1e4e8;">    at executor (&lt;anonymous&gt;:17:5)</span></span>
<span class="line"><span style="color:#e1e4e8;">    at new Bromise (&lt;anonymous&gt;:13:5)</span></span>
<span class="line"><span style="color:#e1e4e8;">    at &lt;anonymous&gt;:19:12</span></span></code></pre></div><p>哎，跟我们的分析是一致，那么要怎么修改一下？这就用到微任务了。</p><p>我们需要让 resolve 中的 onResolve_ 函数延后执行，可以在 resolve 函数里面加上一个定时器，让其延时执行 onResolve_ 函数，你可以参考下面改造后的代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">onResolve_</span><span style="color:#E1E4E8;">(value)</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>上面采用了定时器来推迟 onResolve 的执行，不过使用定时器的效率并不是太高.</p><p>好在我们有微任务，所以在 Promise 实现原理中，把这个定时器改为微任务了，这样既可以让 onResolve_ 延时被调用，又提升了代码的执行效率。这就是 Promise 与微任务的关系了。</p><h3 id="async和await" tabindex="-1">async和await <a class="header-anchor" href="#async和await" aria-label="Permalink to &quot;async和await&quot;">​</a></h3><p>虽然Promise极大地改善了异步编程的可管理性，但在某些情况下，使用.then()和.catch()方法来管理复杂的异步流程仍然可能导致代码冗长和难以理解。<code>async</code> 和 <code>await</code> 的引入正是为了满足这种需求，它们允许开发者以一种近乎同步的方式编写异步代码，同时保持非阻塞的优势。</p><p>要解决的问题：</p><p><code>async</code> 和 <code>await</code> 主要解决以下问题：</p><ol><li><strong>代码可读性</strong>：使异步代码看起来和同步代码相似，这样开发者就可以以线性和更直观的方式理解代码流程，而不需要跟踪Promise链。</li><li><strong>错误处理</strong>：允许使用传统的try-catch语法来捕捉异步代码中的错误，这比在Promise中使用.catch()更自然和一致。</li><li><strong>简化代码结构</strong>：减少了因为链式Promise而导致的嵌套和复杂结构，简化了代码编写。</li></ol><p>实现原理：</p><p><code>async</code> 和 <code>await</code> 是基于Promise和生成器（generators）的概念实现的。</p><p>生成器：</p><blockquote><p>参考链接：<a href="https://github.com/Daotin/Web/blob/master/08-ES6%E8%AF%AD%E6%B3%95/05-Generator%EF%BC%8Casync%EF%BC%8CClass.md" target="_blank" rel="noreferrer">05-Generator，async，Class</a></p></blockquote><p>生成器函数是一个带星号函数，而且是可以暂停执行和恢复执行的。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">function*</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genDemo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;开始执行第一段&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;generator 2&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;开始执行第二段&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;generator 2&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;开始执行第三段&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">yield</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;generator 2&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;执行结束&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;generator 2&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;main 0&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> gen </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">genDemo</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(gen.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;main 1&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(gen.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;main 2&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(gen.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;main 3&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(gen.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;main 4&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象。</p><p>下一步，必须调用遍历器对象的<code>next</code>方法，使得指针移向下一个状态。也就是说，每次调用<code>next</code>方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个<code>yield</code>表达式（或<code>return</code>语句）为止。</p><p><em>那么，Generator 函数可以实现函数的暂停和恢复，是怎么做到的呢？</em></p><p>要搞懂函数为何能暂停和恢复，那你首先要了解<strong>协程</strong>的概念。</p><p>协程是一种比线程更加轻量级的存在。你可以把协程看成是跑在线程上的任务，一个线程上可以存在多个协程，但是在线程上同时只能执行一个协程，比如当前执行的是 A 协程，要启动 B 协程，那么 A 协程就需要将主线程的控制权交给 B 协程，这就体现在 A 协程暂停执行，B 协程恢复执行；同样，也可以从 B 协程中启动 A 协程。通常，如果从 A 协程启动 B 协程，我们就把 A 协程称为 B 协程的<strong>父协程</strong>。</p><p>当使用 yield 暂停协程的时候，就会将控制权转交给父协程，也就是调用Generator的进程。</p><p><em>async和await如何是有Generator函数和Promise来实现的呢？</em></p><p>看下面示例代码：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(a)</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)</span></span></code></pre></div><p>打印的结果为：0,1,3,100,2</p><p>我们站在协程的视角看下为啥是这个顺序：</p><ol><li>首先，执行<code>console.log(0)</code>这个语句，打印出来 0。</li><li>紧接着就是执行 foo 函数，由于 foo 函数是被 async 标记过的，所以当进入该函数的时候，首先执行 foo 函数中的<code>console.log(1)</code>语句，并打印出 1。</li><li>执行到 foo 函数中的<code>await 100</code>这个语句了，当执行到<code>await 100</code>时，会默认创建一个 Promise 对象，代码如下所示：</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> promise_ </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((resolve,reject){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(100)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><ol start="4"><li>上一节我们知道，resolve(100)会放在微任务列表，然后协程就把控制权转交给父协程，此时打印<code>console.log(3)</code></li><li>随后父协程将执行结束，在结束之前，执行微任务队列，微任务队列中有<code>resolve(100)</code>打印100</li><li>最后，打印2。</li></ol><p><em>下面思考题融合了宏任务，微任务，定时器，请问下面代码输出什么？</em></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;bar start&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;bar end&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script start&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;setTimeout&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">bar</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;promise executor&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;promise then&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;script end&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><p>分析：</p><ol><li>首先在主协程中初始化异步函数foo和bar，碰到console.log打印script start；</li><li>解析到setTimeout，初始化一个Timer，创建一个task，并加入延时队列任务</li><li>执行bar函数，将控制权交给协程，输出bar start，碰到await，执行foo，输出foo，创建一个 Promise返回给主协程，并添加到微任务队列</li><li>向下执行 new Promise，输出 promise executor，返回resolve 添加到微任务队列</li><li>输出script end</li><li>当前task结束之前检查微任务队列，执行第一个微任务，将控制器交给协程输出bar end</li><li>执行第二个微任务 输出 promise then</li><li>当前任务执行完毕进入取出延时队列任务，输出setTimeout。</li></ol><h2 id="事件循环案例-settimeout如何设计" tabindex="-1">事件循环案例：setTimeout如何设计？ <a class="header-anchor" href="#事件循环案例-settimeout如何设计" aria-label="Permalink to &quot;事件循环案例：setTimeout如何设计？&quot;">​</a></h2><p>setTimeout的回调不能放到消息队列，因为消息队列是一个个按顺序执行的。那咋办？</p><p>在 Chrome 中，除了正常使用的消息队列之外，还有另外一个消息队列<strong>延迟队列</strong>，这个队列中维护了需要延迟执行的任务列表。</p><p>所以当通过 JavaScript 创建一个定时器时，渲染进程会将该定时器的回调任务（包含了回调函数 xxx、当前发起时间、延迟执行时间）添加到延迟队列中。</p><p>然后，当一个宏任务执行完成后，会去延迟队列查找延时到期的任务去执行。执行完了，再去消息队列执行后续的宏任务。</p><p><em>但，你会发现一个问题？如果一个宏任务要执行很久，那么setTimeout不就不准了？</em></p><p>另外，setTimeout还有一些其他注意事项：</p><ol><li>如果 setTimeout 存在嵌套调用，那么延时时间最短为 4 ms。 （一般如果使用 setTimeout 来做动画的时候，都是需要 setTimeout 嵌套调用，那么对于实时性很高的动画就不适用了。）</li><li>在未激活的页面中的 setTimeout 执行的最小间隔为 1000ms ，这是浏览器干预的，为了欧化后台页面的加载损耗以及降低耗电量。</li><li>延时时间有最大值。（ Chrome、Safari、Firefox 都是以 32 个 bit 来存储延时值的，32bit 最大只能存放的数字是 2147483647 毫秒，这就意味着，如果 setTimeout 设置的延迟值大于 2147483647 毫秒（大约 24.8 天）时就会溢出，这导致定时器会被立即执行）</li><li>如果 setTimeout 的回调函数是一个对象中的一个方法属性，那么这个方法中的 this 会变成 window。</li></ol><h2 id="事件循环案例-xmlhttprequest如何设计" tabindex="-1">事件循环案例：XMLHttpRequest如何设计？ <a class="header-anchor" href="#事件循环案例-xmlhttprequest如何设计" aria-label="Permalink to &quot;事件循环案例：XMLHttpRequest如何设计？&quot;">​</a></h2><p>上面，setTimeout 是直接将延迟任务添加到延迟队列中，而 XMLHttpRequest 发起请求，是由浏览器的其他进程或者线程去执行，然后再将执行结果利用 IPC 的方式通知渲染进程，之后渲染进程再将对应的消息添加到消息队列中。</p><p>也就是绕了一下，最后还是回归事件循环。</p><p><img src="`+e+'" alt=""></p>',80),E=[c];function r(y,i,F,d,u,B){return n(),a("div",null,E)}const h=s(t,[["render",r]]);export{m as __pageData,h as default};
