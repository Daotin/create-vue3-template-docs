import{_ as t,o as r,c as e,V as a}from"./chunks/framework.ff44d2fd.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器工作原理/已归档/06-渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？.md","filePath":"浏览器工作原理/已归档/06-渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？.md","lastUpdated":1714650135000}'),o={name:"浏览器工作原理/已归档/06-渲染流程（下）：HTML、CSS和JavaScript，是如何变成页面的？.md"},s=a('<p>结合上图，一个完整的渲染流程大致可总结为如下：</p><ol><li>渲染进程将 HTML 内容转换为能够读懂的<strong>DOM树</strong>结构。</li><li>渲染引擎将 CSS 样式表转化为浏览器可以理解的<strong>styleSheets</strong>，计算出 DOM 节点的样式。</li><li>创建<strong>布局树</strong>，并计算元素的布局信息。</li><li>对布局树进行分层，并生成<strong>分层树</strong>。</li><li>为每个图层生成<strong>绘制列表</strong>，并将其提交到合成线程。</li><li>合成线程将图层分成<strong>图块</strong>，并在<strong>光栅化线程池</strong>中将图块转换成位图。</li><li>合成线程发送绘制图块命令<strong>DrawQuad</strong>给浏览器进程。</li><li>浏览器进程根据 DrawQuad 消息<strong>生成页面</strong>，并<strong>显示</strong>到显示器上。</li></ol><p><img src="https://raw.githubusercontent.com/Daotin/pic/master/img/20190912174653.png" alt=""></p><h2 id="思考题" tabindex="-1">思考题 <a class="header-anchor" href="#思考题" aria-label="Permalink to &quot;思考题&quot;">​</a></h2><p><em>1、关于“重排”，“重绘”和“合成”？</em></p><p>如果修改了元素的样式高度或宽度等会重新布局，然后布局后面所有的操作都会重新执行一遍，这是重排。 如果修改的是背景色等，不需要布局的，也不需要分层，直接到绘制阶段，这是重绘。 如果我们使用css的transform实现动画效果，这时既不需要重新布局，也不需要重新绘制（只需要合成线程进行合成就行了），直接在非主线程上执行合成动画操作，这是合成。</p><p><em>2、减少重排重绘的方法：</em></p><ul><li><p>使用 class 操作样式，而不是频繁操作 style</p></li><li><p>避免使用 table 布局</p></li><li><p>批量dom 操作，例如 createDocumentFragment，或者使用框架，例如 React</p></li><li><p>Debounce window resize 事件</p></li><li><p>对 dom 属性的读写要分离</p></li><li><p>will-change: transform 做优化</p></li></ul>',8),i=[s];function l(n,_,p,c,g,m){return r(),e("div",null,i)}const h=t(o,[["render",l]]);export{S as __pageData,h as default};
