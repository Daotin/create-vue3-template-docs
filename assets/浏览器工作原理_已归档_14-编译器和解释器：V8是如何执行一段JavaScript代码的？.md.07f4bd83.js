import{_ as p,o as a,c as r,S as n}from"./chunks/framework.d5a27ec8.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"浏览器工作原理/已归档/14-编译器和解释器：V8是如何执行一段JavaScript代码的？.md","filePath":"浏览器工作原理/已归档/14-编译器和解释器：V8是如何执行一段JavaScript代码的？.md","lastUpdated":1714728555000}'),e={name:"浏览器工作原理/已归档/14-编译器和解释器：V8是如何执行一段JavaScript代码的？.md"};function o(_,t,i,s,c,g){return a(),r("div",null,t[0]||(t[0]=[n('<p>JavaScript是解释型语言。在每次运行时都需要通过解释器对程序进行动态解释和执行。</p><p>整个执行过程如下：</p><p><img src="https://i.loli.net/2019/09/21/yRTDjtwin7fHOrB.png" alt="image.png"></p><p><strong>1、JS生成抽象语法树（AST）和执行上下文。</strong></p><p>编译器和解释器才能看得懂AST（Babel和ESLint都有使用）。</p><p>而执行上下文是代码执行过程中的环境信息。</p><p>通过“词法分析”（将源码拆分成最小的单个字符或字符串）和“语法分析”（将这些最小的字符和字符串以符合语法的规则进行拼接），最后生成。</p><p>生成的AST类似代码的结构化表示，就像HTML生成的DOM树一样。</p><p><strong>2、由AST生成字节</strong></p><p>字节码是介于AST和机器码的代码。</p><p><strong>3、执行代码</strong></p><p>字节码的执行通常解释器 Ignition（点火器）逐条执行，如果发现有HotSpot（热点代码：一段代码被重复执行多次）就好使用编译器 TurboFan（涡轮增加器）将HotSpot编译成机器码，由于机器码的执行效率远大于字节码的解释执行效率，所以整个代码的执行效率大大提高。</p><p>这种字节码配合解释器和编译器的技术称为“即时编译（JIT）”</p><p><img src="https://i.loli.net/2019/09/21/NGguM3n6h4WYb2r.png" alt="image.png"></p>',14)]))}const d=p(e,[["render",o]]);export{S as __pageData,d as default};
