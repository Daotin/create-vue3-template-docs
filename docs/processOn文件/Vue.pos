{"diagram":{"image":{"height":200,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","width":200,"y":0,"x":0},"elements":{"id":"root","structure":"mind_right","leftChildren":[],"title":"Vue","root":true,"theme":"theme3","children":[{"id":"4054c21db773","title":"特点","children":[{"id":"16cc9e8d64da","title":"更加轻量：gzip压缩后20Kb<br>","children":[],"parent":"4054c21db773"},{"id":"0dfe23b184b3","title":"渐进式框架：不需要学习完框架内容才可以做项目","children":[],"parent":"4054c21db773"},{"id":"7f74fdcf8b4f","title":"响应式学习机制","children":[],"parent":"4054c21db773"},{"id":"af037e466371","title":"学习成本低","children":[],"parent":"4054c21db773"},{"id":"e78dd2a2b2b7","title":"单页面SPA模式","parent":"4054c21db773","children":[{"id":"2ddbb5777f76","title":"优点","parent":"e78dd2a2b2b7","children":[]},{"id":"2c65279c28ea","title":"缺点及改进方法","summaries":[{"id":"78e9dcde6d08","summary":true,"title":"使用 Nuxt.js 框架通通解决","range":1,"children":[],"parent":"2c65279c28ea","part":"right"}],"parent":"e78dd2a2b2b7","children":[{"id":"7882b72e9191","title":"SEO不友好<br>","children":[{"id":"51f425fbbddf","title":"服务端渲染SSR","children":[{"id":"c8bad65b46e4","title":"","image":{"w":382,"url":"http://cdn.processon.com/5e6f2bbbe4b08e4e24245381?e=1584347596&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:93NI_hQhzC5UcIsS4VWuQXo7NdA=","h":210},"parent":"51f425fbbddf","children":[]}],"parent":"7882b72e9191"},{"id":"91c60003bdec","title":"不使用SSR，如何做SEO？","parent":"7882b72e9191","children":[{"id":"ba32e4fde4ef","title":"爬虫的走无头浏览器模式（没有界面显示）<br>","parent":"91c60003bdec","children":[{"id":"9735991ce268","title":"phantomjs","parent":"ba32e4fde4ef","children":[]},{"id":"95e26fcccd0a","title":"headlessChrome","parent":"ba32e4fde4ef","children":[]}]}],"icons":[{"index":"44","color":"rgb(191, 30, 27)","name":""}]}],"parent":"2c65279c28ea"},{"id":"d322c025fee0","title":"首屏渲染时间长","children":[{"id":"6633a6f01716","title":"通过webpack优化，尽可能减少加载项","children":[],"parent":"d322c025fee0"},{"id":"242d36dbb815","title":"预渲染 prerendering （适用于静态页面）","children":[],"parent":"d322c025fee0"}],"parent":"2c65279c28ea"}]},{"id":"8a64f99e9d28","title":"Nuxt.js框架","children":[{"id":"4563f6eb009c","title":"特点","children":[{"id":"ab144b1275f9","title":"静态站点","parent":"4563f6eb009c","children":[]},{"id":"4c648bf5d4a7","title":"服务端渲染","children":[],"parent":"4563f6eb009c"},{"id":"125caa45eac0","title":"配置简单","parent":"4563f6eb009c","children":[]}],"parent":"8a64f99e9d28"}],"parent":"e78dd2a2b2b7"}]},{"id":"9419a648389a","title":"兼容性","parent":"4054c21db773","children":[{"id":"a04e2a18debf","title":"不支持IE8","parent":"9419a648389a","children":[]}]}],"parent":"root","collapsed":true},{"id":"e6486bf3b3e2","title":"版本","link":{"title":"","value":"https://cn.vuejs.org/v2/guide/installation.html#%E5%AF%B9%E4%B8%8D%E5%90%8C%E6%9E%84%E5%BB%BA%E7%89%88%E6%9C%AC%E7%9A%84%E8%A7%A3%E9%87%8A","type":"url"},"children":[{"id":"674ea7e5dc6d","title":"完整版","parent":"e6486bf3b3e2","children":[{"id":"1ed9114d4f59","title":"编译器","children":[],"parent":"674ea7e5dc6d"},{"id":"dd4e8782799a","title":"运行时","parent":"674ea7e5dc6d","children":[]},{"id":"9008a1c59b1f","title":"运行时 + 编译器 vs 只包含运行时","link":{"title":"","value":"https://cn.vuejs.org/v2/guide/installation.html#%E8%BF%90%E8%A1%8C%E6%97%B6-%E7%BC%96%E8%AF%91%E5%99%A8-vs-%E5%8F%AA%E5%8C%85%E5%90%AB%E8%BF%90%E8%A1%8C%E6%97%B6","type":"url"},"parent":"674ea7e5dc6d","children":[{"id":"6fe01502d445","title":"运行时版（vue.runtime.esm.js）的体积比完整版（vue.esm.js）大约小30%，所以为了用户体验，推荐总是使用运行时版，而且<b>webpack和@vue/cli工具均默认使用运行时版的Vue</b>。","children":[],"parent":"9008a1c59b1f"}]}]},{"id":"cdaa52db1f92","title":"UMD","parent":"e6486bf3b3e2","children":[{"id":"343add7d1231","title":"UMD 版本可以通过 &lt;script&gt; 标签直接用在浏览器中","children":[],"parent":"cdaa52db1f92"},{"id":"58fbfd17cf56","title":"对于 UMD 版本来说，开发环境/生产环境模式是硬编码好的：开发环境下用未压缩的代码，生产环境下使用压缩后的代码。","parent":"cdaa52db1f92","children":[]},{"id":"5921f1bf5e9c","title":"所有 UMD 版本都可以直接用作 AMD 模块。","children":[],"parent":"cdaa52db1f92"}]},{"id":"c9bd95a7d312","title":"CommonJS","parent":"e6486bf3b3e2","children":[{"id":"7ee898bf3954","title":"不提供压缩版本","parent":"c9bd95a7d312","children":[]}]},{"id":"e6cc248fbb91","title":"ES Module","parent":"e6486bf3b3e2","children":[{"id":"993813141e81","title":"提供给webpack等打包工具使用的","parent":"e6cc248fbb91","children":[{"id":"99a6c7cb1a6f","title":"不提供压缩版本","children":[],"parent":"993813141e81"},{"id":"f57730005410","title":"保留原始的 process.env.NODE_ENV 检测，以决定它们应该运行在开发环境/生产环境模式下","children":[{"id":"a39c4f5a73ca","title":"webpack4+","parent":"f57730005410","children":[],"note":"使用 `mode` 选项\n\n```\nmodule.exports = {\n  mode: &#39;production&#39;\n}\n```"},{"id":"7caed64b44c0","title":"webpack3及以下","parent":"f57730005410","children":[],"note":"需要使用 `DefinePlugin`：\n\n```\nvar webpack = require(&#39;webpack&#39;)\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    new webpack.DefinePlugin({\n      &#39;process.env&#39;: {\n        NODE_ENV: JSON.stringify(&#39;production&#39;)\n      }\n    })\n  ]\n}\n```"}],"parent":"993813141e81"}]},{"id":"5ca3f6755805","title":"提供给浏览器通过 &lt;script type=\"module\"&gt; 直接导入使用。<br>","parent":"e6cc248fbb91","children":[]}]}],"parent":"root","collapsed":true},{"id":"70e665e63656","title":"安装","parent":"root","children":[{"id":"75530a304f53","title":"安装方式","children":[{"id":"d7b2ac08bc80","title":"使用 &lt;script&gt; 标签引入，Vue 会被注册为一个全局变量。<br>","children":[],"parent":"75530a304f53","note":"```\n&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;&gt;&lt;/script&gt;\n```"},{"id":"b8069022e689","title":"script 模块方式引入","children":[],"parent":"75530a304f53","note":"```\n&lt;script type=&quot;module&quot;&gt;\n  import Vue from &#39;https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.esm.browser.js&#39;\n&lt;/script&gt;\n```"},{"id":"acb0e8a1d265","title":"npm方式","children":[],"parent":"75530a304f53"}],"parent":"70e665e63656"},{"id":"e119d26a86d6","title":"Vue CLI 脚手架","children":[],"parent":"70e665e63656"}],"collapsed":true},{"id":"8092a698ab74","title":"指令","parent":"root","children":[{"id":"46a210c7df8c","title":"内置指令","children":[{"id":"c9cc8055a9ff","title":"插值表达式","parent":"46a210c7df8c","children":[{"id":"13cf07710f52","title":"只能填简单表达式，而不能是语句，或者控制流。","parent":"c9cc8055a9ff","children":[]}]},{"id":"95263ffd47d2","title":"v-cloak","parent":"46a210c7df8c","children":[{"id":"c55ad318b152","title":"使用 v-cloak 和 CSS 表达式结合，能够解决插值表达式闪烁的问题，这样会在网络未加载完时，不显示字符串本身。","parent":"95263ffd47d2","children":[],"note":"```\n&lt;style&gt;\n  [v-cloak] {\n    display: none;\n  }\n&lt;/style&gt;\n...\n&lt;p v-cloak&gt; {{ info }} &lt;/p&gt;\n```"},{"id":"d3cb7d6a2f83","title":"对单文件的形式无效，只用在引入vue.js到html使用的方式才会用到","children":[],"parent":"95263ffd47d2","icons":[{"index":"27","color":"rgb(96, 160, 240)","name":"flag"}]}]},{"id":"3683741a371e","title":"v-text","parent":"46a210c7df8c","children":[{"id":"2bab9c247399","title":"v-text 是没有闪烁问题的，但是 v-text 会覆盖元素中原本的内容","parent":"3683741a371e","children":[],"note":"```\n&lt;span v-text=&quot;info&quot;&gt;&lt;/span&gt;\n```"}]},{"id":"d6ce49b9370f","title":"v-html","children":[{"id":"8ee40af15b39","title":"需要注意 XSS 攻击","children":[],"parent":"d6ce49b9370f","icons":[{"index":"42","text":"&#xe693","color":"rgb(255, 159, 26)","name":""}]}],"parent":"46a210c7df8c"},{"id":"bb84580bcce8","title":"v-bind","parent":"46a210c7df8c","children":[{"id":"50ca082cf694","title":"绑定属性值","children":[],"parent":"bb84580bcce8"}]},{"id":"ad494c6b8e76","title":"v-on","children":[{"id":"ab30c4ee59a7","title":"绑定事件","children":[],"parent":"ad494c6b8e76"}],"parent":"46a210c7df8c"},{"tags":[{"text":"2.6.0 新增","color":"rgb(255, 255, 255)","background":"rgb(113, 203, 45)"}],"id":"4ea94372525f","title":"动态参数<br>","children":[{"id":"a6c7f54ab8da","title":"用方括号括起来的 JavaScript 表达式绑定动态属性值","children":[],"parent":"4ea94372525f","note":"```\n&lt;a v-bind:[attributeName]=&quot;url&quot;&gt; ... &lt;/a&gt;\n```\n当data 的属性 attributeName，其值为 &quot;href&quot;，那么这个绑定将等价于 v-bind:href。"},{"id":"8592add8fcb7","title":"用方括号括起来的 JavaScript 表达式绑定动态事件名","parent":"4ea94372525f","children":[],"note":"```\n&lt;a v-on:[eventName]=&quot;doSomething&quot;&gt; ... &lt;/a&gt;\n```\n同样地，当 eventName 的值为 &quot;focus&quot; 时，v-on:[eventName] 将等价于 v-on:focus。\n"},{"id":"55b5e41738ff","title":"注意","parent":"4ea94372525f","children":[{"id":"8c0ce06eeb6f","title":"如果动态参数attributeName 预期会求出一个字符串，异常情况下值为 null。<b>这个特殊的 null 值可以被显性地用于移除绑定。<br></b>任何其它非字符串类型的值都将会触发一个警告。","parent":"55b5e41738ff","children":[]},{"id":"ebda2d4e95a1","title":"动态参数中不能有<b>空格或引号</b>，你可以使用计算属性替代这种复杂表达式。","parent":"55b5e41738ff","children":[]}],"icons":[{"index":"42","text":"&#xe693","color":"rgb(255, 159, 26)","name":""}]}],"parent":"46a210c7df8c","icons":[]},{"id":"88bfef225d7d","title":"v-model","children":[{"id":"69248156181c","title":" v-model 只能运用在 表单类元素中。","children":[],"parent":"88bfef225d7d","icons":[{"index":"42","text":"&#xe693","color":"rgb(255, 159, 26)","name":""}]},{"id":"53b8696397fb","title":"双向绑定 vs 单向数据流","parent":"88bfef225d7d","children":[{"id":"60f3daa4b1a1","title":"仍然是单向数据流，通过value和@input实现双向绑定，而其简写方式就是v-model。","children":[],"parent":"53b8696397fb"},{"id":"156051191ed2","title":"v-model 会忽略所有表单元素的 value、checked、selected 的初始值而总是将 Vue 实例的数据作为数据来源。","children":[],"parent":"53b8696397fb"},{"id":"bdf6c8435d52","title":"不同的输入元素的v-model表示的简写形式（使用不同的属性并抛出不同的事件）","children":[{"id":"07cc609df810","title":"text 和 textarea 元素使用 value 属性和 input 事件；","parent":"bdf6c8435d52","children":[]},{"id":"e648f17015d3","title":"checkbox 和 radio 使用 checked 属性和 change 事件；","parent":"bdf6c8435d52","children":[]},{"id":"02762f9ba49c","title":"select 字段将 value 作为 prop 并将 change 作为事件。","children":[],"parent":"bdf6c8435d52"}],"parent":"53b8696397fb"}],"icons":[{"index":"27","color":"rgb(96, 160, 240)","name":"flag"}]},{"id":"47e9e133d58b","title":"自定义组件的 v-model","link":{"title":"自定义组件的 v-model","value":"https://cn.vuejs.org/v2/guide/components-custom-events.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84-v-model","type":"url"},"children":[],"parent":"88bfef225d7d"},{"id":"bc7fd66ae1da","title":"v-model 与 .sync的区别","parent":"88bfef225d7d","children":[]}],"parent":"46a210c7df8c"},{"id":"bcb88fdd8e7f","title":"v-for<br>","children":[{"id":"656942f77d05","title":"v-for...in...","parent":"bcb88fdd8e7f","children":[{"id":"8a50eef20263","title":"数组","summaries":[],"children":[{"id":"95938e8cc614","title":"v-for=\"(item, i) in list\"","parent":"8a50eef20263","children":[]}],"parent":"656942f77d05"},{"id":"1e5b0c35e38f","title":"对象","parent":"656942f77d05","children":[{"id":"549729cb0541","title":"v-for=\"(val, key, i) in user\"","children":[],"parent":"1e5b0c35e38f"}],"summaries":[]},{"id":"8681c5f089c8","title":"整数","summaries":[],"children":[{"id":"e965f0e9f36e","title":"v-for=\"n in 10\"","parent":"8681c5f089c8","children":[]}],"parent":"656942f77d05"}]},{"id":"a17e37d1b494","title":"v-for...of...","parent":"bcb88fdd8e7f","children":[{"id":"a15cebb03254","title":"只是分隔符为of，其他不变","children":[],"parent":"a17e37d1b494"}]},{"id":"0bac9b8d69b0","title":"key的作用","parent":"bcb88fdd8e7f","children":[]}],"parent":"46a210c7df8c"},{"id":"57fa709599c0","title":"v-if/v-else-if/v-else","children":[{"id":"e8e1095fa21e","title":"用key管理可能被复用的元素","link":{"title":"","value":"https://github.com/Daotin/fe-get-start/blob/master/16-Vue/01-Vue.js%E6%A6%82%E8%BF%B0%EF%BC%8C%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%EF%BC%8C%E6%8C%87%E4%BB%A4%EF%BC%8C%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6%EF%BC%8C%E6%A0%B7%E5%BC%8F.md#%E7%94%A8key%E7%AE%A1%E7%90%86%E5%8F%AF%E8%A2%AB%E5%A4%8D%E7%94%A8%E7%9A%84%E5%85%83%E7%B4%A0%E6%9D%A5%E8%87%AA%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3","type":"url"},"parent":"57fa709599c0","children":[],"icons":[{"index":"27","color":"rgb(96, 160, 240)","name":"flag"}],"note":"简单来说就是，一个列表如果只是数据不同，通过if切换显示的时候，数据未更新。\n\n&lt;br&gt;\n\n此时，可以通过添加唯一的`key`属性，来标识这两个元素是独立的，请分别使用它们自己的数据。"},{"id":"bb5aa96f4812","title":"避免 v-if 和 v-for 用在同一个元素上，因为<b>v-for 比 v-if 具有更高的优先级。</b><br>","children":[{"id":"a0a7acf8378b","title":"v-if放在外层","parent":"bb5aa96f4812","children":[]},{"id":"71aed315814f","title":"去掉v-if，将循环的元素通过computed过滤","parent":"bb5aa96f4812","children":[]}],"parent":"57fa709599c0"}],"parent":"46a210c7df8c"},{"id":"1bd486556c60","title":"v-show","children":[],"parent":"46a210c7df8c"},{"id":"6f336bb74b8f","title":"v-once","parent":"46a210c7df8c","children":[{"id":"05452a8c1900","title":"只渲染一次&nbsp;&lt;span v-once&gt;{{title}}&lt;/span&gt;","children":[],"parent":"6f336bb74b8f"}]},{"id":"11d6e4a0c957","title":"v-pre","parent":"46a210c7df8c","children":[{"id":"c6f0bf905954","title":"绕过{{}}的编译，直接输出字符串本身","children":[],"parent":"11d6e4a0c957"}]}],"parent":"8092a698ab74","collapsed":true},{"id":"a81cb62d4d25","title":"自定义指令","parent":"8092a698ab74","children":[{"id":"7587cbe733e7","title":"简介","parent":"a81cb62d4d25","children":[{"id":"a17bf75aa38d","title":"自定义全局指令","children":[],"parent":"7587cbe733e7","note":"```\n// 注册一个全局自定义指令 `v-focus`\nVue.directive(&#39;focus&#39;, {\n  // 当被绑定的元素插入到 DOM 中时\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})\n```\n\n- 在 new Vue 之前注册全局自定义指令\n- 定义自定义指令的时候，不需要加v- ，使用的时候需要加。\n- 注意： 在每个 函数中，第一个参数，永远是 el ，表示 被绑定了指令的那个元素，这个 el 参数，是一个原生的JS对象。\n- 和JS行为有关的操作，最好在 inserted 中去执行"},{"id":"3514a21c99c3","title":"自定义局部指令","children":[],"parent":"7587cbe733e7","note":"```\n&lt;script&gt;\nexport default {\n    data() {\n        return {\n            title: &#39;ddd&#39;,\n            msg: &#39;hello vue&#39;\n        }\n    },\n    methods:{},\n    filters:{\n        msgFormat(data, arg1, arg2=&#39;and bad&#39;) {\n            return data.replace(&quot;vue&quot;, &quot;Daotin1 &quot; + arg1 + arg2);\n        }\n    },\n    // 自定义局部指令\n    directives:{\n        focus:{\n            inserted: function (el) {\n                el.focus()\n            }\n        }\n    }\n}\n&lt;/script&gt;\n```"}]},{"id":"9b58860e4b9e","title":"钩子函数","children":[{"id":"640c98103945","title":"inserted","children":[{"id":"0e2adf39e762","title":"被绑定元素插入父节点时调用，一般用于与js相关操作","parent":"640c98103945","children":[]}],"parent":"9b58860e4b9e"},{"id":"761bdd263daa","title":"bind","children":[{"id":"d9e019c8f046","title":"只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。一般用于样式设定","children":[],"parent":"761bdd263daa"}],"parent":"9b58860e4b9e"},{"id":"3602ff10d337","title":"update","children":[],"parent":"9b58860e4b9e"},{"id":"cc2ae0e0f5f8","title":"componentUpdated","children":[],"parent":"9b58860e4b9e"},{"id":"6d06a10495bc","title":"unbind","children":[],"parent":"9b58860e4b9e"}],"parent":"a81cb62d4d25"},{"id":"4214845634ef","title":"钩子函数参数","children":[{"id":"60c023575a24","title":"el：指令所绑定的元素，为原生 DOM 对象。","children":[],"parent":"4214845634ef"},{"id":"eac5de3bc7a7","title":"binding：一个对象，包含以下属性","parent":"4214845634ef","children":[{"id":"2332cbb1d7b1","title":"name：指令名，不包括 v- 前缀。","parent":"eac5de3bc7a7","children":[]},{"id":"18145c99322c","title":"value：指令的绑定值，例如：v-my-directive=\"1 + 1\" 中，绑定值为 2。","parent":"eac5de3bc7a7","children":[]},{"id":"865abd1443d8","title":"oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。","parent":"eac5de3bc7a7","children":[]},{"id":"90eb18b61aea","title":"expression：字符串形式的指令表达式。例如 v-my-directive=\"1 + 1\" 中，表达式为 \"1 + 1\"。","parent":"eac5de3bc7a7","children":[]},{"id":"86c3269446ff","title":"arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 \"foo\"。","parent":"eac5de3bc7a7","children":[{"id":"f141e9178c24","title":"动态指令参数","link":{"title":"","value":"https://cn.vuejs.org/v2/guide/custom-directive.html#%E5%8A%A8%E6%80%81%E6%8C%87%E4%BB%A4%E5%8F%82%E6%95%B0","type":"url"},"parent":"86c3269446ff","children":[{"id":"c5772163aa92","title":"v-mydirective:[argument]=\"value\"","parent":"f141e9178c24","children":[]}],"icons":[{"index":"30","color":"rgb(48, 191, 191)","name":"flag"}]}]},{"id":"5fe646e40daa","title":"modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。","parent":"eac5de3bc7a7","children":[]}]},{"id":"afab40181717","title":"vnode：Vue 编译生成的虚拟节点。","parent":"4214845634ef","children":[]},{"id":"0ea26af0936f","title":"oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。","parent":"4214845634ef","children":[]}],"parent":"a81cb62d4d25"},{"id":"b6cddefb0175","title":"函数简写","children":[],"parent":"a81cb62d4d25","note":"在很多时候，你可能想在 bind 和 update 时触发相同行为，而不关心其它的钩子。比如这样写：\n\n```\nVue.directive(&#39;color-swatch&#39;, function (el, binding) {\n  el.style.backgroundColor = binding.value\n})\n```"},{"id":"ee8d55f2d855","title":"对象字面量","children":[],"parent":"a81cb62d4d25","note":"如果指令需要多个值，可以传入一个 JavaScript `对象字面量`。\n\n```\n&lt;div v-demo=&quot;{ color: &#39;white&#39;, text: &#39;hello!&#39; }&quot;&gt;&lt;/div&gt;\n\nVue.directive(&#39;demo&#39;, function (el, binding) {\n  console.log(binding.value.color) // =&gt; &quot;white&quot;\n  console.log(binding.value.text)  // =&gt; &quot;hello!&quot;\n})\n```"}],"note":"\n自定义指令需要以 `v-` 开头。\n\n&gt; 自定义指令能完成的功能，都可以用其他方式实现。"}],"collapsed":true},{"id":"1d15b4444e87","title":"样式","parent":"root","children":[{"id":"c301937a16d0","title":"class类方式","parent":"1d15b4444e87","children":[{"id":"598c14654dc6","title":"普通方式","children":[],"parent":"c301937a16d0","note":"```\nclass=&quot;head foot&quot;\n```"},{"id":"c392a23ea43d","title":"数组","parent":"c301937a16d0","children":[],"note":"```\n:class=&quot;[&#39;head&#39;,&#39;foot&#39;]&quot;\n```"},{"id":"16af9a261c62","title":"三元运算符","children":[],"parent":"c301937a16d0","note":"```\n:class=&quot;[&#39;head&#39;,flag == true ? &#39;foot&#39; : &#39;&#39;]&quot;\n```"},{"id":"28ce4e201384","title":"对象","parent":"c301937a16d0","children":[{"id":"7870d8404104","title":"对象的属性可以不加引号","children":[],"parent":"28ce4e201384","icons":[{"text":"&#xe6c6","index":"9","name":"face"}]}],"note":"```\n:class=&quot;[&#39;head&#39;,{&#39;foot&#39; : flag == true}]&quot;\n```"},{"id":"129da5c8373d","title":"对象集合","children":[],"parent":"c301937a16d0","note":"```\n:class=&quot;[&#39;head&#39;,classObj]&quot;\n\n//...\n\nvar vm = new Vue({\n    el: &#39;#app&#39;,\n    data: {\n        flag: true,\n        classObj: {\n            red: true,\n            thin: true,\n            italic: false,\n            active: false\n         }\n    },\n    methods: {}\n});\n```"},{"id":"086fbd05ed74","title":"动态class可以和静态class并存","parent":"c301937a16d0","children":[],"note":"```\nclass=&quot;nav&quot; :class=&quot;[&#39;head&#39;,&#39;foot&#39;]&quot;\n```\n\n&gt; 静态class不能和静态class并存，动态class也不能和动态class并存。"}]},{"id":"76745a75965c","title":"style方式","parent":"1d15b4444e87","children":[{"id":"fa21d7a048d7","title":"使用对象的形式","children":[],"parent":"76745a75965c","note":"```\n&lt;p :style=&quot;{ &#39;max-width&#39;:maxWidth+&#39;px&#39;, &#39;color&#39;: &#39;red&#39; }&gt;&lt;/p&gt;\n```"}]},{"id":"7789483f1d81","title":"注意","children":[{"id":"657b5f6f810f","title":"在组件上使用了class属性，这些属性将被添加到该组件的根元素上面","parent":"7789483f1d81","children":[]}],"parent":"1d15b4444e87","icons":[{"text":"&#xe693","index":"42","color":"rgb(255, 159, 26)","name":""}]}],"collapsed":true},{"id":"ae21dd69eeea","title":"过滤器","parent":"root","children":[{"id":"b1ba5244729a","title":"全局过滤器（<font color=\"#0076b3\">必须在new Vue之前定义</font>）","parent":"ae21dd69eeea","children":[{"id":"d3ebbbcd4e73","title":"不带参数","parent":"b1ba5244729a","children":[],"note":"```\n&lt;p&gt;{{msg | msgFormat}}&lt;/p&gt;\n\n\n// 使用Vue.filter来定义一个过滤器：\n        // 第一个参数：过滤器函数名称\n        // 第二个参数：过滤器函数体\n        // 过滤器的参数就是管道符的前面待处理的字符串。\n        Vue.filter(&#39;msgFormat&#39;, (data) =&gt; {\n            return data.replace(&quot;vue&quot;, &quot;Daotin&quot;);\n        });\n````"},{"id":"4d2267ac33fb","title":"带参数","parent":"b1ba5244729a","children":[],"note":"```\n    &lt;div id=&quot;box&quot;&gt;\n        &lt;!--hello Daotin is a boy and good--&gt;\n        &lt;p&gt;{{msg | msgFormat(&#39;is a boy&#39;, &#39;and good&#39;)}}&lt;/p&gt;\n    &lt;/div&gt;\n\n\n\nVue.filter(&#39;msgFormat&#39;, (data, arg1, arg2=&#39;and bad&#39;) =&gt; {\n     return data.replace(&quot;vue&quot;, &quot;Daotin &quot; + arg1 + arg2);\n});\n\n```"}],"note":""},{"id":"2c282c8378dc","title":"局部过滤器<br>","parent":"ae21dd69eeea","children":[],"note":"过滤器的调用原则是`就近原则`，即先调用局部过滤器再调用全局过滤器。\n\n```\n&lt;span&gt;{{msg | msgFormat(&#39;is a boy&#39;)}}&lt;/span&gt;\n\n\n&lt;script&gt;\nexport default {\n    data() {\n        return {\n            title: &#39;ddd&#39;,\n            msg: &#39;hello vue&#39;\n        }\n    },\n    methods:{},\n    filters:{\n        msgFormat(data, arg1, arg2=&#39;and bad&#39;) {\n            return data.replace(&quot;vue&quot;, &quot;Daotin1 &quot; + arg1 + arg2);\n        }\n    }\n}\n&lt;/script&gt;\n```"}],"note":"vue 允许自定义过滤器，可被用作一些常见的`文本格式化`。\n\n&lt;br&gt;\n\n过滤器只能用在两个地方：`插值表达式`和 `v-bind表达式 `。","collapsed":true},{"id":"50095d481144","title":"按键修饰符","children":[{"id":"551109964dce","title":"系统提供","children":[{"id":"0bf520eea38e","title":".enter","parent":"551109964dce","children":[]},{"id":"a1780fee1f08","title":".tab","parent":"551109964dce","children":[]},{"id":"c69baf34d63a","title":".delete","parent":"551109964dce","children":[]},{"id":"ab9fb7bbcf0f","title":".esc","parent":"551109964dce","children":[]},{"id":"1e2fc6a58870","title":".space","parent":"551109964dce","children":[]},{"id":"720fa74144c3","title":".top","parent":"551109964dce","children":[]},{"id":"824444e7ef16","title":".down","parent":"551109964dce","children":[]},{"id":"9ab24741af0f","title":".left","parent":"551109964dce","children":[]},{"id":"8f108fa5bd9b","title":".right","parent":"551109964dce","children":[]}],"parent":"50095d481144"},{"id":"6175ac177819","title":"自定义其他按键","parent":"50095d481144","children":[{"id":"77f0812599f5","title":"Vue.config.keyCodes.f2 = 113; <br>可以将f2作为按键修饰符添加到系统按键修饰符中。","children":[],"parent":"6175ac177819"}]}],"parent":"root","collapsed":true},{"id":"05c0424871bd","title":"生命周期","children":[{"id":"17622eb53c6c","title":"创建阶段","children":[{"id":"2613e6866bc1","title":"初始化期","children":[{"id":"2e2d0f80366d","title":"beforeCreate()","parent":"2613e6866bc1","children":[{"id":"c6411118a3b7","title":"表示实例完全被创建出来之前，会执行beforeCreate函数，这时data 和 methods 中的 数据都还没有没初始化，<font color=\"#0076b3\">如果调用data和methods的数据的话，会报错。</font>","children":[],"parent":"2e2d0f80366d"}]},{"id":"e3cbc55c5395","title":"created()","parent":"2613e6866bc1","children":[{"id":"05db5bf04fbb","title":"实例已经在内存中创建OK，此时 data 和 methods 已经创建OK，此时还没有开始 编译模板。","parent":"e3cbc55c5395","children":[]}]}],"parent":"17622eb53c6c"},{"id":"7f0818880ff4","title":"加载期","parent":"17622eb53c6c","children":[{"id":"6354eaf3966b","title":"beforeMount()","children":[{"id":"36bcc42e2d02","title":"此时已经完成了模板的编译，但是还没有从内存挂载到页面中。此时页面中的元素，还没有被真正替换过来，只是之前写的一些模板（比如插值表达式）还只是字符串的形式。","children":[],"parent":"6354eaf3966b"}],"parent":"7f0818880ff4"},{"id":"7b12a7b4b505","title":"mounted()","children":[{"id":"1b25b1ffb045","title":"<font color=\"#0076b3\">（beforeMount与mounted之间有个render渲染的过程）</font>此时，已经将编译好的模板，挂载到了页面指定的容器中显示。","parent":"7b12a7b4b505","children":[]}],"parent":"7f0818880ff4"}]}],"parent":"05c0424871bd"},{"id":"370f2b0debd9","title":"更新阶段","children":[{"id":"6e4a4f810516","title":"更新期","children":[{"id":"243fb3790c44","title":"beforeUpdate()","parent":"6e4a4f810516","children":[{"id":"ccaf07039ed5","title":"data数据更新之后，但是还未渲染到页面时执行的函数。这时data数据已经更新，但是页面的数据还是旧的。","children":[],"parent":"243fb3790c44"}]},{"id":"af618da7ef18","title":"updated()","parent":"6e4a4f810516","children":[{"id":"eedcc1360414","title":"<font color=\"#0076b3\">（beforeUpdate与updated之间有个render渲染的过程）</font>updated 事件执行的时候，页面和 data 数据已经保持同步了，都是最新的。","children":[],"parent":"af618da7ef18"}]}],"parent":"370f2b0debd9"}],"parent":"05c0424871bd"},{"id":"194f020a2a3e","title":"销毁阶段","children":[{"id":"1d67615ad7b8","title":"销毁期","parent":"194f020a2a3e","children":[{"id":"083a0c046796","title":"beforeDestory()","children":[{"id":"faff04789255","title":"实例销毁之前调用。在这一步，实例上的data，methods等仍然完全可用。","parent":"083a0c046796","children":[]}],"parent":"1d67615ad7b8"},{"id":"f0ec13625d6e","title":"destroyed()","children":[{"id":"ffc0f00b4ccb","title":"Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。","parent":"f0ec13625d6e","children":[]}],"parent":"1d67615ad7b8"}]}],"parent":"05c0424871bd"}],"parent":"root","note":"![](https://cn.vuejs.org/images/lifecycle.png)","collapsed":true},{"id":"7b28e19eeaee","title":"过渡&amp;动画","children":[{"id":"4dbd41141f09","title":"单元素/组件的过渡","parent":"7b28e19eeaee","children":[{"id":"6faefc25cf32","title":"Vue 提供了 transition 的封装组件可以用在","parent":"4dbd41141f09","children":[{"id":"43a1ce00f00e","title":"条件渲染 (使用 v-if)","children":[],"parent":"6faefc25cf32"},{"id":"232444ddefcb","title":"条件展示 (使用 v-show)","children":[],"parent":"6faefc25cf32"},{"id":"117e3f705fa9","title":"动态组件","children":[],"parent":"6faefc25cf32"},{"id":"087e2a99453f","title":"组件根节点","children":[],"parent":"6faefc25cf32"}]},{"id":"e5e0baae1996","title":"过渡的类名","children":[{"id":"d8e13f311220","title":"v-enter：定义开始进入过渡的状态。","children":[],"parent":"e5e0baae1996"},{"id":"c3415acb1d48","title":"v-enter-active：定义进入过渡进行时时的状态。","parent":"e5e0baae1996","children":[]},{"id":"10831ebdfb74","title":"v-enter-to: 定义进入过渡之后的状态。","children":[],"parent":"e5e0baae1996"},{"id":"e129e842e532","title":"v-leave: 定义开始离开过渡的状态。","parent":"e5e0baae1996","children":[]},{"id":"c73d258c4213","title":"v-leave-active：定义离开过渡进行时的状态。","parent":"e5e0baae1996","children":[]},{"id":"053d8c005535","title":"v-leave-to: 定义离开过渡之后的状态。","parent":"e5e0baae1996","children":[]}],"parent":"4dbd41141f09","summaries":[{"summary":true,"id":"48dfb54c3f85","title":"概要","range":1,"parent":"e5e0baae1996","children":[{"id":"de6d08d775b3","title":"v-enter 和 v-leave-to 设置过渡结束后的状态；","parent":"48dfb54c3f85","children":[]},{"id":"2c5675d42780","title":"v-enter-to 和 v-leave 设置过渡开始前的状态；","parent":"48dfb54c3f85","children":[]}],"part":"right"}],"note":"图示：\n\n![](https://cn.vuejs.org/images/transition.png)"},{"id":"28b6354c41a8","title":"使用第三方插件Animate.css实现动画","parent":"4dbd41141f09","children":[]}]},{"id":"70ed1e22a237","title":"半程动画","parent":"7b28e19eeaee","children":[]},{"id":"0e1318f01f90","title":"列表动画","parent":"7b28e19eeaee","children":[{"id":"2126480058df","title":"进入离开过渡","parent":"0e1318f01f90","children":[]},{"id":"b40d36c92b22","title":"排序过渡","parent":"0e1318f01f90","children":[]},{"id":"90ff69dc95d3","title":"交叉过渡","parent":"0e1318f01f90","children":[]}]},{"id":"111e717f0704","title":"过渡模式","parent":"7b28e19eeaee","children":[{"id":"c9d004b5d5ca","title":"in-out：新元素先进行过渡，完成之后当前元素过渡离开。","children":[],"parent":"111e717f0704"},{"id":"e1438e72719a","title":"out-in：当前元素先进行过渡，完成之后新元素过渡进入（对元素过度发生混乱的时候特别有效！）。","children":[],"parent":"111e717f0704"}],"note":"用来决定两个元素切换时，元素进入和离开的顺序。\n\n```\n&lt;transition name=&quot;fade&quot; mode=&quot;out-in&quot;&gt;\n  // ...\n&lt;/transition&gt;\n```"}],"parent":"root","collapsed":true},{"id":"80f856e8ecdb","title":"路由","parent":"root","children":[{"id":"2cf873d9ab96","title":"路由懒加载","parent":"80f856e8ecdb","children":[],"note":"```\n{\n      path:&#39;/demo&#39;,\n      name:&#39;demo&#39;,\n      component: () =&gt; import(&#39;./views/Demo.vue&#39;)\n    }\n```"},{"id":"0d97346d83f5","title":"模式","parent":"80f856e8ecdb","children":[{"id":"e1ad4a8f47cc","title":"Hash模式","parent":"0d97346d83f5","children":[{"id":"9d059b2f1364","title":"丑，无法使用锚点定位","parent":"e1ad4a8f47cc","children":[{"id":"ccb830a105c5","title":"hash 值的变化不会导致浏览器像服务器发送请求，仅仅使hash的变化模拟url的变化，因此不需要后端配合","children":[],"parent":"9d059b2f1364"}]}]},{"id":"7d2bbde66d26","title":"History模式","parent":"0d97346d83f5","children":[{"id":"40551abebee0","title":"需要后端配合，IE9不兼容（可使用强制刷新处理）","parent":"7d2bbde66d26","children":[{"id":"9ba084d236f7","title":"因为是单页面应用，而History 模式则会直接改变 URL（相当于变成了其他页面），在刷新或直接访问路由地址的时候会匹配不到静态资源。因此需要在服务器上配置一些信息，让服务器增加一个覆盖所有情况的候选资源，比如跳转 index.html 什么的","children":[],"parent":"40551abebee0"}]}]}]}],"collapsed":true},{"id":"32348f33e4b5","title":"插槽slot","children":[{"id":"3949a19620c9","title":"默认插槽","parent":"32348f33e4b5","children":[]},{"id":"30e8013963d4","title":"具名插槽","parent":"32348f33e4b5","children":[{"id":"97ec068591a4","title":"以前的写法","parent":"30e8013963d4","children":[],"note":"```\n&lt;my-component&gt;\n    &lt;span slot=&quot;prev&quot;&gt;前&lt;/span&gt;\n    &lt;span slot=&quot;next&quot;&gt;后&lt;/span&gt;\n&lt;/&lt;my-component&gt;&gt;\n\n\n// 出现在子组件中的位置\n&lt;slot name=&quot;prev&quot;&gt;&lt;/slot&gt;\n&lt;slot name=&quot;next&quot;&gt;&lt;/slot&gt;\n```"},{"tags":[{"text":"2.6.0 新增","color":"rgb(255, 255, 255)","background":"rgb(113, 203, 45)"}],"id":"0c69d8aa3330","title":"新的写法","children":[],"parent":"30e8013963d4","note":"```\n&lt;!--具名插槽--&gt;\n&lt;template v-slot:prev&gt;\n    &lt;span&gt;前&lt;/span&gt;\n&lt;/template&gt;    \n&lt;template v-slot:next&gt;\n    &lt;span&gt;后&lt;/span&gt;\n&lt;/template&gt;\n\n// 子组件中不变\n&lt;slot name=&quot;prev&quot;&gt;&lt;/slot&gt;\n&lt;slot name=&quot;next&quot;&gt;&lt;/slot&gt;\n```"}]},{"id":"4978d5c61f86","title":"作用域插槽","parent":"32348f33e4b5","children":[{"id":"7d0341a541e3","tags":[{"text":"2.6.0 新增","color":"rgb(255, 255, 255)","background":"rgb(113, 203, 45)"}],"title":"新的写法","children":[],"parent":"4978d5c61f86","note":"```\n&lt;template v-slot:prev=&quot;slotProps&quot;&gt;\n    &lt;span&gt;前 {{slotProps.value}}&lt;/span&gt;\n&lt;/template&gt;    \n&lt;!-- 接收 prop 的默认插槽，使用了解构写法 --&gt;\n&lt;template v-slot:prev=&quot;{value}&quot;&gt;\n    &lt;span&gt;前 {{value}}&lt;/span&gt;\n&lt;/template&gt;    \n\n\n&lt;template v-slot:next&gt;\n    &lt;span&gt;后&lt;/span&gt;\n&lt;/template&gt;\n\n// 子组件中不变\n&lt;slot name=&quot;prev&quot; :value=num&gt;&lt;/slot&gt;\n&lt;slot name=&quot;next&quot;&gt;&lt;/slot&gt;\n```"}],"note":"给插槽中传值：**把slot当做返回组件的函数，传的值当做函数的参数，这样理解。**\n\n&gt; 作用域插槽本质上就是一个返回组件的函数 而子组件调用这个函数的时候可以把子组件的数据作为参数传递到父组件。"},{"id":"ea939e898167","title":"插槽默认值","parent":"32348f33e4b5","children":[],"note":"如果不传插槽内容，则使用默认插槽内容。\n\n```\n&lt;!--具名插槽--&gt;\n&lt;template v-slot:prev&gt;\n    &lt;span&gt;前&lt;/span&gt;\n&lt;/template&gt;    \n&lt;!--&lt;template v-slot:next&gt;--&gt;\n&lt;!--    &lt;span&gt;后&lt;/span&gt;--&gt;\n&lt;!--&lt;/template&gt;--&gt;\n\n// 子组件中不变\n&lt;slot name=&quot;prev&quot;&gt;&lt;/slot&gt;\n&lt;slot name=&quot;next&quot;&gt;后&lt;/slot&gt;  &lt;!--默认插槽--&gt;\n```"}],"parent":"root","collapsed":true},{"id":"3b4e07492e42","title":"不知道怎么分的","style":{"border-radius":"0px","color":"rgb(102, 102, 102)","border-style":"dashed","background-color":"rgb(255, 255, 255)","border-color":"#f15a23","border-width":"1px"},"children":[{"id":"ddf94a655a57","title":"响应式更新机制","parent":"3b4e07492e42","children":[{"id":"cc82d5165dc3","title":"数据类型","children":[{"id":"db9f8fb93573","title":"对象","children":[{"id":"fb76e6206a55","title":"如果修改对象的某个属性，但是这个属性在data中没有显示出来，则不会触发update生命周期函数","parent":"db9f8fb93573","children":[{"id":"35aae144816a","title":"1、在data中将这个对象的属性显示暴露出来","parent":"fb76e6206a55","children":[]},{"id":"6b34d8a0efbf","title":"2、使用Vue.set进行操作","parent":"fb76e6206a55","children":[]}]}],"parent":"cc82d5165dc3"},{"id":"fda23441ded6","title":"数组","parent":"cc82d5165dc3","children":[{"id":"d3e1ce37d2e2","title":"Vue框架对数组的push、pop、shift、unshift、sort、splice、reverse方法进行了改造，在调用数组的这些方法时，Vue会自动更新视图。","parent":"fda23441ded6","children":[]}]}],"parent":"ddf94a655a57"},{"id":"bd290a8f3026","title":"在template中未用到的data数据，修改这些数据的时候，不会触发update生命周期函数","parent":"ddf94a655a57","children":[]}]},{"id":"08c6c468f432","title":"template vs JSX","link":{"title":"","value":"https://github.com/Daotin/fe-notes/issues/110","type":"url"},"parent":"3b4e07492e42","children":[]}],"parent":"root","collapsed":false},{"id":"1a15311877db","title":"监听器","summaries":[],"parent":"root","children":[{"id":"faa9c5aa44f6","title":"watch","children":[],"parent":"1a15311877db"},{"id":"b01e945470d8","title":"computed","children":[],"parent":"1a15311877db"},{"id":"5537b07835d6","title":"对比","children":[{"id":"1703e6548a0b","title":"computed能做的，watch都能做","children":[],"parent":"5537b07835d6"},{"id":"520392a3f73d","title":"能用computed，尽量用computed","parent":"5537b07835d6","children":[]}],"parent":"1a15311877db"}],"collapsed":true},{"id":"fb9ff9f4dd77","title":"组件","children":[{"id":"a5d4adcd278c","title":"普通组件","parent":"fb9ff9f4dd77","children":[{"id":"06930d85dd21","title":"组件间传值","parent":"a5d4adcd278c","children":[{"id":"f8d597284524","title":"高级特性provide/inject","link":{"title":"vue的provide和inject特性 #5","value":"https://github.com/Daotin/fe-notes/issues/5#","type":"url"},"parent":"06930d85dd21","children":[],"icons":[{"index":"45","color":"rgb(48, 191, 191)","name":""}]}]},{"id":"15dbcb9999e2","title":"获取组件实例","parent":"a5d4adcd278c","children":[{"id":"98ecd6dc06f2","title":"ref","parent":"15dbcb9999e2","children":[{"id":"78f5d3309da3","title":"获取节点DOM","parent":"98ecd6dc06f2","children":[],"note":"```\n&lt;p ref=&quot;p&quot;&gt;&lt;/p&gt;\n\nthis.$refs.p  // 获取p标签DOM元素\n\n```"},{"id":"7aa33eaf6e7b","title":"获取子组件实例","children":[],"parent":"98ecd6dc06f2","note":"```\n&lt;my-conponent ref=&quot;child&quot;&gt;&lt;/my-conponent&gt;\n\nthis.$refs.child  // 获取my-conponent组件实例\n\n```"}]},{"id":"cab7a752b9ad","title":"获取父组件实例：$parent","children":[],"parent":"15dbcb9999e2"},{"id":"cae27ab90010","title":"获取子组件实例：$children","children":[],"parent":"15dbcb9999e2"},{"id":"fdf9c26011d3","title":"获取跨层级组件实例","link":{"title":"","value":"https://github.com/Daotin/fe-notes/issues/109","type":"url"},"children":[],"parent":"15dbcb9999e2"}]}]},{"id":"400f7d9a2fe4","title":"函数式组件","parent":"fb9ff9f4dd77","children":[{"id":"5a67d3c456a7","title":"应用场景","parent":"400f7d9a2fe4","children":[{"id":"d0e51e03de06","title":"临时变量<br>","children":[],"parent":"5a67d3c456a7"}]}]}],"parent":"root","collapsed":true},{"id":"e874ac4e6586","title":"Vuex","parent":"root","children":[{"id":"162d192f5395","title":"运行机制","parent":"e874ac4e6586","children":[]},{"id":"7a91549a616c","title":"通过什么方式提供响应式数据？<br>","parent":"e874ac4e6586","children":[{"id":"769d83a67ef4","title":"通过new Vue({}) 实例的方式把要数据放入data中","parent":"7a91549a616c","children":[]}]},{"id":"9ad6d75c4843","title":"$store是如何挂载到this上的？","children":[],"parent":"e874ac4e6586"},{"id":"e50f0be8fda0","title":"底层原理","children":[{"id":"f93f17960085","title":"State：提供一个响应式数据","children":[],"parent":"e50f0be8fda0"},{"id":"46d688d7db2d","title":"Getter：借助Vue的计算属性 computed 来实现缓存","children":[],"parent":"e50f0be8fda0"},{"id":"e957dc08b531","title":"Mutation：更改state的方法","children":[],"parent":"e50f0be8fda0"},{"id":"0ee539ce8691","title":"Action：触发mutation方法","children":[],"parent":"e50f0be8fda0"},{"id":"98ef48c62103","title":"Module：Vue.set动态添加state到响应式数据中","children":[],"parent":"e50f0be8fda0"}],"parent":"e874ac4e6586"},{"id":"33ef926d553d","tags":[{"text":"进行中","color":"rgb(255, 255, 255)","background":"rgb(39, 96, 242)"}],"title":"自己实现简易min-vuex","link":{"title":"一个实现部分功能的简易版vuex","value":"https://github.com/Daotin/fe-notes/issues/111","type":"url"},"children":[],"parent":"e874ac4e6586"}],"collapsed":true},{"id":"1c9eedb49a96","title":"开发调试工具","children":[{"id":"deebc6ca4767","title":"Vuter","children":[],"parent":"1c9eedb49a96"},{"id":"b5199ed589a5","title":"ESLint","children":[],"parent":"1c9eedb49a96"},{"id":"a0b46f20a3c4","title":"Prettier","children":[],"parent":"1c9eedb49a96"},{"id":"32f59aead657","title":" Vue Devtools","children":[],"parent":"1c9eedb49a96"}],"parent":"root","collapsed":true},{"id":"d9c42a85efb0","title":"单元测试","parent":"root","children":[{"id":"991a7a3c1643","title":"使用方式","parent":"d9c42a85efb0","children":[{"id":"191272c574d3","title":"jest或mocha","parent":"991a7a3c1643","children":[]},{"id":"c440a4965a11","title":"@vue/test-utils","parent":"991a7a3c1643","children":[]},{"id":"5823ba1ad125","title":"sinon","parent":"991a7a3c1643","children":[]}]}],"collapsed":true}]}},"meta":{"id":"5e6311dfe4b03ecc7525c36c","member":"5e488f9ee4b03d4e28b975b2","exportTime":"2020-03-19 10:56:50","diagramInfo":{"category":"mind_free","title":"Vue","created":"2020-03-07 11:15:43","creator":"5e488f9ee4b03d4e28b975b2","modified":"2020-03-16 17:10:10"},"type":"ProcessOn Schema File","version":"1.0"}}